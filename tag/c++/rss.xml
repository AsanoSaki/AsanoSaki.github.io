<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>AsanoSaki • Posts by &#34;c++&#34; tag</title>
        <link>https://asanosaki.github.io</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Tue, 05 Oct 2021 17:40:00 +0800</pubDate>
        <lastBuildDate>Tue, 05 Oct 2021 17:40:00 +0800</lastBuildDate>
        <category>AI</category>
        <category>Others</category>
        <category>Python</category>
        <category>Java</category>
        <category>Hexo</category>
        <category>Interview</category>
        <category>Linux</category>
        <category>Web</category>
        <category>C++</category>
        <item>
            <guid isPermalink="true">https://asanosaki.github.io/posts/46520.html</guid>
            <title>算法竞赛C++ STL详解</title>
            <link>https://asanosaki.github.io/posts/46520.html</link>
            <category>C++</category>
            <pubDate>Tue, 05 Oct 2021 17:40:00 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;本文介绍了什么是 STL 以及如何使用 STL 更高效&lt;s&gt;偷懒&lt;/s&gt;地解题。本篇文章将会长期更新，欢迎大家一起监督学习。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h2 id=&#34;1-STL概念&#34;&gt;1. STL概念&lt;/h2&gt;
&lt;p&gt;STL（&lt;code&gt;Standard Template Library&lt;/code&gt;，标准模板库），是惠普实验室开发的一系列软件的统称。现主要出现在 C++ 中，STL 从广义上分为：容器（&lt;code&gt;Container&lt;/code&gt;）、算法（&lt;code&gt;Algorithm&lt;/code&gt;）和迭代器（&lt;code&gt;Iterator&lt;/code&gt;）。STL 几乎所有的代码都采用了&lt;strong&gt;模板类或者模板函数&lt;/strong&gt;，这相比传统的由函数和类组成的库来说提供了更好的代码重用机会。&lt;/p&gt;
&lt;h2 id=&#34;2-STL六大组件&#34;&gt;2. STL六大组件&lt;/h2&gt;
&lt;p&gt;STL 提供了六大组件，彼此之间可以组合套用，这六大组件分别是容器、算法、迭代器、仿函数、适配器、空间配置器。其中，在算法竞赛中用到最多的为&lt;strong&gt;容器、算法与迭代器&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器（&lt;code&gt;Container&lt;/code&gt;）：STL 容器为各种&lt;strong&gt;数据结构&lt;/strong&gt;，如 &lt;code&gt;vector&lt;/code&gt;、&lt;code&gt;stack&lt;/code&gt;、&lt;code&gt;queue&lt;/code&gt;、&lt;code&gt;map&lt;/code&gt;、&lt;code&gt;set&lt;/code&gt; 等，用来存放数据，从实现角度来看，STL 容器是一种 &lt;code&gt;class template&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;算法（&lt;code&gt;Algorithm&lt;/code&gt;）：STL 的算法多数定义在 &lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt; 头文件中，其中包括了各种常用的算法，如 &lt;code&gt;sort&lt;/code&gt;、&lt;code&gt;find&lt;/code&gt;、&lt;code&gt;copy&lt;/code&gt;、&lt;code&gt;reverse&lt;/code&gt; 等，从实现角度来看，STL 算法是一种 &lt;code&gt;function template&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;迭代器（&lt;code&gt;Iterator&lt;/code&gt;）：STL 迭代器扮演了容器与算法之间的胶合剂，共有五种类型，从实现角度来看，迭代器是一种将 &lt;code&gt;opetator*&lt;/code&gt;、&lt;code&gt;opetator-&amp;gt;&lt;/code&gt;、&lt;code&gt;operator++&lt;/code&gt; 等指针相关操作予以重载的 &lt;code&gt;class template&lt;/code&gt;。所有 STL 容器都附带有自己专属的迭代器，只有容器的设计者才知道如何遍历自己的元素。&lt;/li&gt;
&lt;li&gt;仿函数（&lt;code&gt;Functor&lt;/code&gt;）：行为类似函数，可作为算法的某种策略，从实现角度来看，仿函数是一种重载了 &lt;code&gt;operator()&lt;/code&gt; 的 &lt;code&gt;class&lt;/code&gt; 或者 &lt;code&gt;class template&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;适配器（&lt;code&gt;Adaptor&lt;/code&gt;）：一种用来修饰容器或仿函数或迭代器接口的东西。&lt;/li&gt;
&lt;li&gt;空间配置器（&lt;code&gt;Allocator&lt;/code&gt;）：负责空间的配置与管理。从实现角度来看，配置器是一个实现了动态空间配置、空间管理、空间释放的 &lt;code&gt;class template&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-STL容器&#34;&gt;3. STL容器&lt;/h2&gt;
&lt;p&gt;相信很多人学习 STL 就是为了在比赛中能够更好地&lt;s&gt;装B&lt;/s&gt;运用各种数据结构和算法，提高解题速度。确实，使用 STL 中的容器能够不需要自己手写定义各种数据结构，使用 STL 中的算法能够不需要自己手写实现各种基本算法，因此本部分对于算法巨巨们是最为重要的一部分，那么 STL 容器究竟有哪些呢？在做题中该如何使用呢？&lt;/p&gt;
&lt;h3 id=&#34;3-1-vector&#34;&gt;3.1 vector&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;vector&lt;/code&gt; 又称&lt;strong&gt;变长数组&lt;/strong&gt;，定义在 &lt;code&gt;&amp;lt;vector&amp;gt;&lt;/code&gt; 头文件中，&lt;code&gt;vector&lt;/code&gt; 容器是&lt;strong&gt;动态空间&lt;/strong&gt;，随着元素的加入，它的内部机制会自动扩充空间以容纳新的元素。因此 &lt;code&gt;vector&lt;/code&gt; 的运用对于内存的合理利用与运用的灵活性有很大的帮助。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vector&lt;/code&gt; 的定义方式：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; v;  &lt;span class=&#34;comment&#34;&gt;// 定义一个vector，其中的元素为int类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; v[N];  &lt;span class=&#34;comment&#34;&gt;// 定义一个vector数组，其中有N个vector&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(len)&lt;/span&gt;&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// 定义一个长度为len的vector&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(len, x)&lt;/span&gt;&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// 定义一个长度为len的vector，初始化每个元素为x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(v1)&lt;/span&gt;&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// 用v1给v2赋值，v1的类型为vector&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(v1.begin(), v1.begin() + &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// 将v1中第0~2三个元素赋值给v2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vector&lt;/code&gt; 的常用内置函数：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// vector中的常用内置函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; v = &amp;#123; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; &amp;#125;;  &lt;span class=&#34;comment&#34;&gt;// 初始化vector，v:&amp;#123;1, 2, 3&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;::iterator it = v.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 定义vector的迭代器，指向begin()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;v.&lt;span class=&#34;built_in&#34;&gt;push_back&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 在vector的尾部插入元素4，v:&amp;#123;1, 2, 3, 4&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;v.&lt;span class=&#34;built_in&#34;&gt;pop_back&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 删除vector的最后一个元素，v:&amp;#123;1, 2, 3&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 注意使用lower_bound()与upper_bound()函数时vector必须是有序的，upper_bound()在&amp;lt;algorithm&amp;gt;中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;lower_bound&lt;/span&gt;(v.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(), v.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;(), &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 返回第一个大于等于2的元素的迭代器v.begin() + 1，若不存在则返回v.end()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;upper_bound&lt;/span&gt;(v.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(), v.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;(), &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 返回第一个大于2的元素的迭代器v.begin() + 2，若不存在则返回v.end()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;v.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回vector中元素的个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;v.&lt;span class=&#34;built_in&#34;&gt;empty&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回vector是否为空，若为空则返回true否则返回false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;v.&lt;span class=&#34;built_in&#34;&gt;front&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回vector中的第一个元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;v.&lt;span class=&#34;built_in&#34;&gt;back&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回vector中的最后一个元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;v.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回vector第一个元素的迭代器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;v.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回vector最后一个元素后一个位置的迭代器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;v.&lt;span class=&#34;built_in&#34;&gt;clear&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 清空vector&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;v.&lt;span class=&#34;built_in&#34;&gt;erase&lt;/span&gt;(v.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;());  &lt;span class=&#34;comment&#34;&gt;// 删除迭代器it所指向的元素，即删除第一个元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;v.&lt;span class=&#34;built_in&#34;&gt;erase&lt;/span&gt;(v.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(), v.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;() + &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 删除区间[v.begin(), v.begin() + 2)的所有元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;v.&lt;span class=&#34;built_in&#34;&gt;insert&lt;/span&gt;(v.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(), &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 在迭代器it所指向的位置前插入元素1，返回插入元素的迭代器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 根据下标进行遍历&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; v.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(); i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; v[i] &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 使用迭代器遍历&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;::iterator it = v.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(); it != v.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;(); it++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// for_each遍历(C++11)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; x : v)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;3-2-stack&#34;&gt;3.2 stack&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; 又称&lt;strong&gt;栈&lt;/strong&gt;，是一种&lt;strong&gt;后进先出&lt;/strong&gt;（Last In First Out，LIFO）的数据结构，定义在 &lt;code&gt;&amp;lt;stack&amp;gt;&lt;/code&gt; 头文件中，&lt;code&gt;stack&lt;/code&gt; 容器允许新增元素、移除元素、取得栈顶元素，但是除了最顶端以外，没有任何方法可以存取 &lt;code&gt;stack&lt;/code&gt; 的其它元素，换言之，&lt;code&gt;stack&lt;/code&gt; &lt;strong&gt;不允许有遍历行为&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack&lt;/code&gt; 的定义方式：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;stack&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; stk;  &lt;span class=&#34;comment&#34;&gt;// 定义一个stack，其中元素的类型为int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;stack&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; stk[N];  &lt;span class=&#34;comment&#34;&gt;// 定义一个stack数组，其中有N个stack&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stack&lt;/code&gt; 的常用内置函数：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// stack中的常用内置函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;stack&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; stk;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;stk.&lt;span class=&#34;built_in&#34;&gt;push&lt;/span&gt;(x);  &lt;span class=&#34;comment&#34;&gt;// 在stack中插入元素x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;stk.&lt;span class=&#34;built_in&#34;&gt;pop&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 弹出stack的栈顶元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;stk.&lt;span class=&#34;built_in&#34;&gt;top&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回stack的栈顶元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;stk.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回stack中元素的个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;stk.&lt;span class=&#34;built_in&#34;&gt;empty&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回stack是否为空，若为空则返回true否则返回false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;3-3-string&#34;&gt;3.3 string&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;string&lt;/code&gt; 又称&lt;strong&gt;字符串&lt;/strong&gt;，定义在 &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt; 头文件中。C 风格的字符串（以空字符结尾的字符数组）太过复杂难于掌握，因此 C++ 标准库定义了一种 &lt;code&gt;string&lt;/code&gt; 类。&lt;code&gt;string&lt;/code&gt; 和 &lt;code&gt;vector&amp;lt;char&amp;gt;&lt;/code&gt; 在数据结构、内存管理等方面都是相同的。但是，&lt;code&gt;vector&amp;lt;char&amp;gt;&lt;/code&gt; 只是单纯的一个“&lt;code&gt;char&lt;/code&gt; 元素的容器”，而 &lt;code&gt;string&lt;/code&gt; 不仅是一个“&lt;code&gt;char&lt;/code&gt; 元素的容器”，它还扩展了一些针对字符串的操作，例如 &lt;code&gt;string&lt;/code&gt; 可以使用 &lt;code&gt;c_str()&lt;/code&gt; 函数转换为 C 风格的字符串，&lt;code&gt;vector&lt;/code&gt; 中并未对输入输出流操作符进行重载，因此无法直接对 &lt;code&gt;vector&amp;lt;char&amp;gt;&lt;/code&gt; 进行 &lt;code&gt;cin&lt;/code&gt; 或者 &lt;code&gt;cout&lt;/code&gt; 这样的操作，但是 &lt;code&gt;string&lt;/code&gt; 可以，且 &lt;code&gt;vector&amp;lt;char&amp;gt;&lt;/code&gt; 并不能直接实现字符串的拼接，但是 &lt;code&gt;string&lt;/code&gt; 可以，&lt;code&gt;string&lt;/code&gt; 中重载了 &lt;code&gt;+, +=&lt;/code&gt; 运算符。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt; 的定义方式：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;string str;  &lt;span class=&#34;comment&#34;&gt;// 定义一个空的字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;string str[N];  &lt;span class=&#34;comment&#34;&gt;// 定义一个string数组，其中有N个string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;string &lt;span class=&#34;title&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// 使用5个字符&amp;#x27;a&amp;#x27;初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;string &lt;span class=&#34;title&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// 使用字符串初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt; 的常用内置函数：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// string中的常用内置函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;string &lt;span class=&#34;title&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;abcabc&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str.&lt;span class=&#34;built_in&#34;&gt;push_back&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;d&amp;#x27;&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 在string尾部插入字符，&amp;quot;abcabcd&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str.&lt;span class=&#34;built_in&#34;&gt;pop_back&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 删除string尾部的字符，&amp;quot;abcabc&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str.&lt;span class=&#34;built_in&#34;&gt;length&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回string中字符的个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 作用与length()相同&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str.&lt;span class=&#34;built_in&#34;&gt;empty&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回string是否为空，若为空返回true否则返回false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str.&lt;span class=&#34;built_in&#34;&gt;substr&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 返回string中从下标为1开始至末尾的子串，&amp;quot;bcabc&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str.&lt;span class=&#34;built_in&#34;&gt;substr&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 返回string中从下标为0开始长度为2的子串，&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str.&lt;span class=&#34;built_in&#34;&gt;insert&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;x&amp;#x27;&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 在下标为1的字符前插入2个字符&amp;#x27;x&amp;#x27;，&amp;quot;axxbcabc&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str.&lt;span class=&#34;built_in&#34;&gt;insert&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;yy&amp;quot;&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 在下标为1的字符前插入字符串&amp;quot;yy&amp;quot;，&amp;quot;ayyxxbcabc&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str.&lt;span class=&#34;built_in&#34;&gt;erase&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 删除从位置1开始的4个字符，&amp;quot;abcabc&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str.&lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 返回字符&amp;#x27;b&amp;#x27;在string中第一次出现的位置，返回1，若不存在则返回-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str.&lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 返回从位置2开始字符&amp;#x27;b&amp;#x27;在string中第一次出现的位置，返回4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str.&lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;bc&amp;quot;&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 同上，返回字符串第一次出现的位置，返回1，若不存在则返回-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str.&lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;bc&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 返回4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str.&lt;span class=&#34;built_in&#34;&gt;rfind&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 反向查找，原理同上，返回4，若不存在则返回-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str.&lt;span class=&#34;built_in&#34;&gt;rfind&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 返回1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str.&lt;span class=&#34;built_in&#34;&gt;rfind&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;bc&amp;quot;&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 返回4，若不存在则返回-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str.&lt;span class=&#34;built_in&#34;&gt;rfind&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;bc&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 返回1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;stoi&lt;/span&gt;(str);  &lt;span class=&#34;comment&#34;&gt;// 返回str的整数形式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;to_string&lt;/span&gt;(value);  &lt;span class=&#34;comment&#34;&gt;// 返回value的字符串形式，value为整型、浮点型等&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];  &lt;span class=&#34;comment&#34;&gt;// 用下标访问string中的字符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cout &amp;lt;&amp;lt; (str == str) &amp;lt;&amp;lt; endl;  &lt;span class=&#34;comment&#34;&gt;// string可比较大小，按字典序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt; 的 &lt;code&gt;erase()&lt;/code&gt; 与 &lt;code&gt;remove()&lt;/code&gt; 函数的用法：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// string中erase()与remove()的用法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;string str1, str2, str3, str4, str5;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str1 = str2 = str3 = str4 = str5 = &lt;span class=&#34;string&#34;&gt;&amp;quot;I love AcWing! It&amp;#x27;s very funny!&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str1.&lt;span class=&#34;built_in&#34;&gt;erase&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 删除[15,end())的所有元素，&amp;quot;I love AcWing!&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str2.&lt;span class=&#34;built_in&#34;&gt;erase&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 从第6个元素(包括)开始往后删除11个元素，&amp;quot;I love&amp;#x27;s very funny!&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str3.&lt;span class=&#34;built_in&#34;&gt;erase&lt;/span&gt;(str3.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;() + &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 删除迭代器所指的元素，&amp;quot;I ove AcWing! It&amp;#x27;s very funny!&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str4.&lt;span class=&#34;built_in&#34;&gt;erase&lt;/span&gt;(str4.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;() + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, str4.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;() - &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 删除[str4.begin()+7,str4.end()-11)的所有元素，&amp;quot;I love very funny!&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str5.&lt;span class=&#34;built_in&#34;&gt;erase&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;remove&lt;/span&gt;(str5.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(), str5.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;(), &lt;span class=&#34;string&#34;&gt;&amp;#x27;n&amp;#x27;&lt;/span&gt;), str5.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;());  &lt;span class=&#34;comment&#34;&gt;// 删除[str5.begin(),str5.end())中所有字符&amp;#x27;n&amp;#x27;，&amp;quot;I love AcWig! It&amp;#x27;s very fuy!&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;3-4-queue-priority-queue&#34;&gt;3.4 queue/priority_queue&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;queue&lt;/code&gt; 又称&lt;strong&gt;队列&lt;/strong&gt;，是一种&lt;strong&gt;先进先出&lt;/strong&gt;（First In First Out，FIFO）的数据结构，定义在 &lt;code&gt;&amp;lt;queue&amp;gt;&lt;/code&gt; 头文件中，&lt;code&gt;queue&lt;/code&gt; 容器允许从一端（称为&lt;strong&gt;队尾&lt;/strong&gt;）新增元素（入队），从另一端（称为&lt;strong&gt;队头&lt;/strong&gt;）移除元素（出队）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;priority_queue&lt;/code&gt; 又称&lt;strong&gt;优先队列&lt;/strong&gt;，同样定义在 &lt;code&gt;&amp;lt;queue&amp;gt;&lt;/code&gt; 头文件中，与 &lt;code&gt;queue&lt;/code&gt; 不同的地方在于我们可以自定义其中数据的优先级，优先级高的排在队列前面，优先出队。&lt;code&gt;priority_queue&lt;/code&gt; 具有 &lt;code&gt;queue&lt;/code&gt; 的所有特性，包括基本操作，只是在这基础上添加了内部的一个排序，它的本质是用&lt;strong&gt;堆&lt;/strong&gt;实现的，因此可分为&lt;strong&gt;小根堆&lt;/strong&gt;与&lt;strong&gt;大根堆&lt;/strong&gt;，&lt;strong&gt;小根堆&lt;/strong&gt;中较小的元素排在前面，&lt;strong&gt;大根堆&lt;/strong&gt;中较大的元素排在前面。（创建 &lt;code&gt;priority_queue&lt;/code&gt; 时&lt;strong&gt;默认是大根堆！&lt;/strong&gt;）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;queue/priority_queue&lt;/code&gt; 的定义方式：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;queue&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; que;  &lt;span class=&#34;comment&#34;&gt;// 定义一个queue，其中元素的类型为int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;queue&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; que[N];  &lt;span class=&#34;comment&#34;&gt;// 定义一个queue数组，其中有N个queue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;priority_queue&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; bigHeap;  &lt;span class=&#34;comment&#34;&gt;// 定义一个大根堆&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;priority_queue&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;, greater&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &amp;gt; smallHeap;  &lt;span class=&#34;comment&#34;&gt;// 定义一个小根堆&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;queue/priority_queue&lt;/code&gt; 的常用内置函数：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// queue/priority_queue中的常用内置函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;queue&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; que;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;priority_queue&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; bigHeap;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;que.&lt;span class=&#34;built_in&#34;&gt;push&lt;/span&gt;(x);  &lt;span class=&#34;comment&#34;&gt;// 在queue的队尾插入元素x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;que.&lt;span class=&#34;built_in&#34;&gt;pop&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 出队queue的队头元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;que.&lt;span class=&#34;built_in&#34;&gt;front&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回queue的队头元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;que.&lt;span class=&#34;built_in&#34;&gt;back&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回queue的队尾元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;que.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回queue中元素的个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;que.&lt;span class=&#34;built_in&#34;&gt;empty&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回queue是否为空，若为空则返回true否则返回false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bigHeap.&lt;span class=&#34;built_in&#34;&gt;top&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回priority_queue的队头元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;3-5-deque&#34;&gt;3.5 deque&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;deque&lt;/code&gt; 又称&lt;strong&gt;双端队列&lt;/strong&gt;，定义在 &lt;code&gt;&amp;lt;deque&amp;gt;&lt;/code&gt; 头文件中，&lt;code&gt;vector&lt;/code&gt; 容器是单向开口的连续内存空间，&lt;code&gt;deque&lt;/code&gt; 则是一种&lt;strong&gt;双向开口的连续线性空间&lt;/strong&gt;。所谓的双向开口，意思是可以在头尾两端分别做元素的插入和删除操作，当然，&lt;code&gt;vector&lt;/code&gt;也可以在头尾两端插入元素，但是在其头部进行插入操作效率很低。&lt;code&gt;deque&lt;/code&gt; 和 &lt;code&gt;vector&lt;/code&gt; 最大的差异一是在于 &lt;code&gt;deque&lt;/code&gt; 允许使用常数项时间在头部进行元素的插入和删除操作，二是在于 &lt;code&gt;deque&lt;/code&gt; 没有容量的概念，因为它是动态的以分段连续空间组合而成，随时可以增加一段新的空间并链接起来。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;deque&lt;/code&gt; 的定义方式：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;deque&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; deq;  &lt;span class=&#34;comment&#34;&gt;// 定义一个deque，其中的元素为int类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;deque&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; deq[N];  &lt;span class=&#34;comment&#34;&gt;// 定义一个deque数组，其中有N个deque&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;deque&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;deq&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(len)&lt;/span&gt;&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// 定义一个长度为len的deque&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;deque&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;deq&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(len, x)&lt;/span&gt;&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// 定义一个长度为len的deque，初始化每个元素为x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;deque&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;deq2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(deq1)&lt;/span&gt;&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// 用deq1给v2赋值，deq2的类型为deque&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;deque&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;deq2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(deq1.begin(), deq1.begin() + &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// 将deq1中第0~2三个元素赋值给deq2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;deque&lt;/code&gt; 的常用内置函数：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//deque中的常用内置函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;deque&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; deq = &amp;#123; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; &amp;#125;;  &lt;span class=&#34;comment&#34;&gt;// 初始化vector，v:&amp;#123;1, 2, 3&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;deque&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;::iterator it = deq.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 定义vector的迭代器，指向begin()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;deq.&lt;span class=&#34;built_in&#34;&gt;push_back&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 在deque的尾部插入元素4，v:&amp;#123;1, 2, 3, 4&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;deq.&lt;span class=&#34;built_in&#34;&gt;pop_back&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 删除deque的尾部元素，v:&amp;#123;1, 2, 3&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;deq.&lt;span class=&#34;built_in&#34;&gt;push_front&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 在deque的头部插入元素4，v:&amp;#123;4, 1, 2, 3&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;deq.&lt;span class=&#34;built_in&#34;&gt;pop_front&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 删除deque的头部元素，v:&amp;#123;1, 2, 3&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;deq.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回deque中元素的个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;deq.&lt;span class=&#34;built_in&#34;&gt;empty&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回deque是否为空，若为空则返回true否则返回false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;deq.&lt;span class=&#34;built_in&#34;&gt;front&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回deque中的第一个元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;deq.&lt;span class=&#34;built_in&#34;&gt;back&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回deque中的最后一个元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;deq.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回deque第一个元素的迭代器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;deq.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回deque最后一个元素后一个位置的迭代器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;deq.&lt;span class=&#34;built_in&#34;&gt;clear&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 清空deque&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;deq.&lt;span class=&#34;built_in&#34;&gt;erase&lt;/span&gt;(deq.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;());  &lt;span class=&#34;comment&#34;&gt;// 删除迭代器it所指向的元素，即删除第一个元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;deq.&lt;span class=&#34;built_in&#34;&gt;erase&lt;/span&gt;(deq.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(), deq.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;() + &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 删除区间[v.begin(), v.begin() + 2)的所有元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;deq.&lt;span class=&#34;built_in&#34;&gt;insert&lt;/span&gt;(deq.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(), &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 在迭代器it所指向的位置前插入元素1，返回插入元素的迭代器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 根据下标进行遍历&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; deq.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(); i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; deq[i] &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 使用迭代器遍历&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (deque&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;::iterator it = deq.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(); it != deq.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;(); it++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; *it &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// for_each遍历(C++11)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; x : deq)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;3-6-map-multimap&#34;&gt;3.6 map/multimap&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;map/multimap&lt;/code&gt; 又称&lt;strong&gt;映射&lt;/strong&gt;，定义在 &lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt; 头文件中，&lt;code&gt;map&lt;/code&gt; 和 &lt;code&gt;multimap&lt;/code&gt; 的底层实现机制都是红黑树。&lt;code&gt;map&lt;/code&gt; 的功能是&lt;strong&gt;能够将任意类型的元素映射到另一个任意类型的元素上&lt;/strong&gt;，并且所有的元素都会根据元素的键值自动排序。&lt;code&gt;map&lt;/code&gt; 所有的元素都是 &lt;code&gt;pair&lt;/code&gt;，同时拥有&lt;strong&gt;键值&lt;/strong&gt;和&lt;strong&gt;实值&lt;/strong&gt;（即 &lt;code&gt;(key, value)&lt;/code&gt; 对），&lt;code&gt;key&lt;/code&gt; 被视为&lt;strong&gt;键值&lt;/strong&gt;，&lt;code&gt;value&lt;/code&gt; 被视为&lt;strong&gt;实值&lt;/strong&gt;，&lt;code&gt;map&lt;/code&gt; 不允许两个元素有相同的键值。&lt;code&gt;multimap&lt;/code&gt; 和 &lt;code&gt;map&lt;/code&gt; 的操作类似，唯一区别是 &lt;code&gt;multimap&lt;/code&gt; 的键值允许重复。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map/multimap&lt;/code&gt; 的定义方式：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;map&amp;lt;string, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; mp;  &lt;span class=&#34;comment&#34;&gt;// 定义一个将string映射成int的map&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map&amp;lt;string, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; mp[N];  &lt;span class=&#34;comment&#34;&gt;// 定义一个map数组，其中有N个map&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;multimap&amp;lt;string, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; mulmp;  &lt;span class=&#34;comment&#34;&gt;// 定义一个将string映射成int的multimap&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;multimap&amp;lt;string, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; mulmp[N];  &lt;span class=&#34;comment&#34;&gt;// 定义一个multimap数组，其中有N个multimap&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map/multimap&lt;/code&gt; 的常用内置函数：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// map/multimap中的常用内置函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map&amp;lt;string, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; mp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mp[&lt;span class=&#34;string&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// 将&amp;quot;abc&amp;quot;映射到3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mp[&lt;span class=&#34;string&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;]++;  &lt;span class=&#34;comment&#34;&gt;// 将&amp;quot;ab&amp;quot;所映射的整数++&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mp.&lt;span class=&#34;built_in&#34;&gt;insert&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;make_pair&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;cd&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;));  &lt;span class=&#34;comment&#34;&gt;// 插入元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mp.&lt;span class=&#34;built_in&#34;&gt;insert&lt;/span&gt;(&amp;#123; &lt;span class=&#34;string&#34;&gt;&amp;quot;ef&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt; &amp;#125;);  &lt;span class=&#34;comment&#34;&gt;// 同上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mp.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回map中元素的个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mp.&lt;span class=&#34;built_in&#34;&gt;empty&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回map是否为空，若为空返回true否则返回false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mp.&lt;span class=&#34;built_in&#34;&gt;clear&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 清空map&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mp.&lt;span class=&#34;built_in&#34;&gt;erase&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;ef&amp;quot;&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 清除元素&amp;#123;&amp;quot;ef&amp;quot;, 5&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mp[&lt;span class=&#34;string&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;];  &lt;span class=&#34;comment&#34;&gt;// 返回&amp;quot;abc&amp;quot;映射的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mp.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回map第一个元素的迭代器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mp.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回map最后一个元素后一个位置的迭代器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mp.&lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 返回第一个键值为&amp;quot;ab&amp;quot;的迭代器，若不存在则返回mp.end()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mp.&lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(&amp;#123; &lt;span class=&#34;string&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; &amp;#125;);  &lt;span class=&#34;comment&#34;&gt;// 返回元素&amp;#123;&amp;quot;abc&amp;quot;, 3&amp;#125;的迭代器，若不存在则返回mp.end()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mp.&lt;span class=&#34;built_in&#34;&gt;count&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 返回第一个键值为&amp;quot;abc&amp;quot;的元素数量1，由于map元素不能重复因此count返回值只有0或1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mp.&lt;span class=&#34;built_in&#34;&gt;count&lt;/span&gt;(&amp;#123; &lt;span class=&#34;string&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; &amp;#125;);  &lt;span class=&#34;comment&#34;&gt;// 返回第一个键值为&amp;quot;abc&amp;quot;的元素数量1，注意和find不一样，count只判断第一个键值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mp.&lt;span class=&#34;built_in&#34;&gt;lower_bound&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 返回第一个键值大于等于&amp;quot;abc&amp;quot;的元素的迭代器，&amp;#123;&amp;quot;abc&amp;quot;, 3&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mp.&lt;span class=&#34;built_in&#34;&gt;upper_bound&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 返回第一个键值大于&amp;quot;abc&amp;quot;的元素的迭代器，&amp;#123;&amp;quot;cd&amp;quot;, 2&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 使用迭代器遍历&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (map&amp;lt;string, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;::iterator it = mp.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(); it != mp.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;(); it++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; (*it).first &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt; &amp;lt;&amp;lt; (*it).second &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// for_each遍历(C++11)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; x : mp)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; x.first &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt; &amp;lt;&amp;lt; x.second &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 扩展推断范围的for_each遍历(C++17)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; &amp;amp;[k, v] : mp)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; k &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt; &amp;lt;&amp;lt; v &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;3-7-set-multiset&#34;&gt;3.7 set/multiset&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;set/multiset&lt;/code&gt; 又称&lt;strong&gt;集合&lt;/strong&gt;，定义在 &lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt; 头文件中。&lt;code&gt;set&lt;/code&gt; 的特性是所有元素都会根据元素的键值自动被排序，&lt;code&gt;set&lt;/code&gt; 的元素不像 &lt;code&gt;map&lt;/code&gt; 那样可以同时拥有键值和实值，&lt;code&gt;set&lt;/code&gt; 的元素既是键值又是实值，&lt;code&gt;set&lt;/code&gt; 不允许两个元素有相同的键值，因此总结来说就是 &lt;code&gt;set&lt;/code&gt; 中的元素是&lt;strong&gt;有序且不重复的&lt;/strong&gt;。&lt;code&gt;multiset&lt;/code&gt; 的特性和用法和 &lt;code&gt;set&lt;/code&gt; 完全相同，唯一的区别在于 &lt;code&gt;multiset&lt;/code&gt; 允许有重复元素，&lt;code&gt;set&lt;/code&gt; 和 &lt;code&gt;multiset&lt;/code&gt; 的底层实现都是红黑树。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set/multiset&lt;/code&gt; 的定义方式：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;set&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; st;  &lt;span class=&#34;comment&#34;&gt;// 定义一个set，其中的元素类型为int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; st[N];  &lt;span class=&#34;comment&#34;&gt;// 定义一个set数组，其中有N个set&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;multiset&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; mulst;  &lt;span class=&#34;comment&#34;&gt;// 定义一个multiset&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;multiset&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; mulst[N];  &lt;span class=&#34;comment&#34;&gt;// 定义一个multiset数组，其中有N个multiset&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set/multiset&lt;/code&gt; 的常用内置函数：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// set/multiset中的常用内置函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; st;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;st.&lt;span class=&#34;built_in&#34;&gt;insert&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 插入元素5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;st.&lt;span class=&#34;built_in&#34;&gt;insert&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 同上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;st.&lt;span class=&#34;built_in&#34;&gt;insert&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 同上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;st.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回set中元素的个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;st.&lt;span class=&#34;built_in&#34;&gt;empty&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回set是否为空，若为空返回true否则返回false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;st.&lt;span class=&#34;built_in&#34;&gt;erase&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 清除元素6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;st.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回set第一个元素的迭代器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;st.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回set最后一个元素后一个位置的迭代器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;st.&lt;span class=&#34;built_in&#34;&gt;clear&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 清空set&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;st.&lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 返回元素5的迭代器，若不存在则返回st.end()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;st.&lt;span class=&#34;built_in&#34;&gt;count&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 返回元素5的个数1，由于set元素不会重复，因此count返回值只有0或1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;st.&lt;span class=&#34;built_in&#34;&gt;lower_bound&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 返回第一个键值大于等于5的元素的迭代器，返回元素5的迭代器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;st.&lt;span class=&#34;built_in&#34;&gt;upper_bound&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 返回第一个键值大于5的元素的迭代器，返回元素7的迭代器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 使用迭代器遍历&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (set&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;::iterator it = st.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(); it != st.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;(); it++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; (*it) &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// for_each遍历(C++11)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; x : st)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;3-8-unordered-map-unordered-set&#34;&gt;3.8 unordered_map/unordered_set&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;unordered_map/unordered_set&lt;/code&gt; 分别定义在 &lt;code&gt;&amp;lt;unordered_map&amp;gt;&lt;/code&gt; 与 &lt;code&gt;&amp;lt;unordered_set&amp;gt;&lt;/code&gt; 头文件中，内部采用的是 &lt;code&gt;hash&lt;/code&gt; 表结构，拥有快速检索的功能。与 &lt;code&gt;map/set&lt;/code&gt; 相比最大的区别在于 &lt;code&gt;unordered_map/unordered_set&lt;/code&gt; 中的元素是&lt;strong&gt;无序&lt;/strong&gt;的，增删改查的时间复杂度为 &lt;code&gt;O(1)&lt;/code&gt;（&lt;code&gt;map/set&lt;/code&gt; 增删改查的时间复杂度为 &lt;code&gt;O(logn)&lt;/code&gt;），但是不支持 &lt;code&gt;lower_bound()/upper_bound()&lt;/code&gt; 函数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unordered_map/unordered_set&lt;/code&gt; 的定义方式：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;unordered_set&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; st;  &lt;span class=&#34;comment&#34;&gt;// 定义一个unordered_set，其中的元素类型为int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;unordered_set&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; st[N];  &lt;span class=&#34;comment&#34;&gt;// 定义一个unordered_set数组，其中有N个unordered_set&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;unordered_map&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; mp;  &lt;span class=&#34;comment&#34;&gt;// 定义一个unordered_map&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;unordered_map&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; mp[N];  &lt;span class=&#34;comment&#34;&gt;// 定义一个unordered_map数组，其中有N个unordered_map&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;unordered_map/unordered_set&lt;/code&gt; 的常用内置函数：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// unordered_map/unordered_set中的常用内置函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;unordered_set&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; st;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;unordered_map&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; mp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;st.&lt;span class=&#34;built_in&#34;&gt;insert&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 插入元素5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;st.&lt;span class=&#34;built_in&#34;&gt;insert&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 同上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;st.&lt;span class=&#34;built_in&#34;&gt;insert&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 同上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;st.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回unordered_set中元素的个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;st.&lt;span class=&#34;built_in&#34;&gt;empty&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回unordered_set是否为空，若为空返回true否则返回false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;st.&lt;span class=&#34;built_in&#34;&gt;erase&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 清除元素6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;st.&lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 返回元素5的迭代器，若不存在则返回st.end()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;st.&lt;span class=&#34;built_in&#34;&gt;count&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 返回元素5的个数，由于unordered_set元素不会重复，因此count返回值只有0或1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;st.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回unordered_set第一个元素的迭代器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;st.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回unordered_set最后一个元素后一个位置的迭代器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;st.&lt;span class=&#34;built_in&#34;&gt;clear&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 清空unordered_set&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mp.&lt;span class=&#34;built_in&#34;&gt;insert&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;make_pair&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;));  &lt;span class=&#34;comment&#34;&gt;// 插入元素&amp;#123;1, 2&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mp.&lt;span class=&#34;built_in&#34;&gt;insert&lt;/span&gt;(&amp;#123; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; &amp;#125;);  &lt;span class=&#34;comment&#34;&gt;// 同上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mp.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回unordered_map中元素的个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mp.&lt;span class=&#34;built_in&#34;&gt;empty&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回unordered_map是否为空，若为空返回true否则返回false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mp.&lt;span class=&#34;built_in&#34;&gt;erase&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 清除元素&amp;#123;3, 4&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mp.&lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 返回第一个键值为1的迭代器，若不存在则返回mp.end()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mp.&lt;span class=&#34;built_in&#34;&gt;count&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 返回第一个键值为1的元素数量，由于unordered_map元素不能重复因此count返回值只有0或1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mp.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回unordered_map第一个元素的迭代器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mp.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 返回unordered_map最后一个元素后一个位置的迭代器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mp.&lt;span class=&#34;built_in&#34;&gt;clear&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// 清空unordered_map&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 使用迭代器遍历&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (unordered_set&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;::iterator it = st.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(); it != st.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;(); it++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; (*it) &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// for_each遍历(C++11)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; x : st)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 使用迭代器遍历&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (unordered_map&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;::iterator it = mp.&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(); it != mp.&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;(); it++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; (*it).first &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt; &amp;lt;&amp;lt; (*it).second &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// for_each遍历(C++11)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; x : mp)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; x.first &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt; &amp;lt;&amp;lt; x.second &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 扩展推断范围的for_each遍历(C++17)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; &amp;amp;[k, v] : mp)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; k &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt; &amp;lt;&amp;lt; v &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;4-STL算法&#34;&gt;4. STL算法&lt;/h2&gt;
&lt;p&gt;C++ 标准库定义了一组&lt;strong&gt;泛型算法&lt;/strong&gt;，之所以称为泛型指的是它们可以操作在多种容器上，&lt;strong&gt;不但可以作用于标准库类型，还可以用在内置数组类型甚至其它类型的序列上&lt;/strong&gt;。泛型算法定义在 &lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt; 头文件中，标准库还定义了一组&lt;strong&gt;泛化的算术算法&lt;/strong&gt;（Generalized Numeric Algorithm），定义在 &lt;code&gt;&amp;lt;numeric&amp;gt;&lt;/code&gt; 头文件中。使用方法如下：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 使用STL容器时将数组指针改为迭代器即可&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a[&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;] = &amp;#123; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; b[&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;] = &amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 排序算法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;sort&lt;/span&gt;(a, a + &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 将区间[0, 5)内元素按字典序从小到大排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;sort&lt;/span&gt;(a, a + &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;greater&lt;/span&gt;&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;());  &lt;span class=&#34;comment&#34;&gt;// 将区间[0, 5)内元素按字典序从大到小排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;reverse&lt;/span&gt;(a, a + &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 将区间[0, 5)内元素翻转&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;nth_element&lt;/span&gt;(a, a + &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, a + &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 将区间[0, 5)中第a + 3个数归位，即将第3大的元素放到正确的位置上，该元素前后的元素不一定有序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 查找与统计算法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;find&lt;/span&gt;(a, a + &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 在区间[0, 5)内查找等于3的元素，返回迭代器，若不存在则返回end()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;binary_search&lt;/span&gt;(a, a + &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 二分查找区间[0, 5)内是否存在元素2，若存在返回true否则返回false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;count&lt;/span&gt;(a, a + &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 返回区间[0, 5)内元素3的个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 可变序列算法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;copy&lt;/span&gt;(a, a + &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, a + &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 将区间[0, 2)的元素复制到以a+3开始的区间，即[3, 5)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;replace&lt;/span&gt;(a, a + &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 将区间[0, 5)内等于3的元素替换为4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;fill&lt;/span&gt;(a, a + &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 将1写入区间[0, 5)中(初始化数组函数)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;unique&lt;/span&gt;(a, a + &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 将相邻元素间的重复元素全部移动至末端，返回去重之后数组最后一个元素之后的地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;remove&lt;/span&gt;(a, a + &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 将区间[0, 5)中的元素3移至末端，返回新数组最后一个元素之后的地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 排列算法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;next_permutation&lt;/span&gt;(a, a + &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 产生下一个排列&amp;#123; 1, 2, 3, 5, 4 &amp;#125;，若已经是最后一个排列则返回false，否则返回true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;prev_permutation&lt;/span&gt;(a, a + &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// 产生上一个排列&amp;#123; 1, 2, 3, 4, 5 &amp;#125;，若已经是第一个排列则返回false，否则返回true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 前缀和算法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;partial_sum&lt;/span&gt;(a, a + &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, b);  &lt;span class=&#34;comment&#34;&gt;// 计算数组a在区间[0, 5)内的前缀和并将结果保存至数组b中，b = &amp;#123; 1, 3, 6, 10, 15 &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 差分算法(感谢willem248同学的补充)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;adjacent_difference&lt;/span&gt;(a, a + &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, b);  &lt;span class=&#34;comment&#34;&gt;// 计算数组a区间[0, 5)内的差分并将结果保存至数组b中，b = &amp;#123; 1, 1, 1, 1, 1 &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;adjacent_difference&lt;/span&gt;(a, a + &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, b, &lt;span class=&#34;built_in&#34;&gt;plus&lt;/span&gt;&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;());  &lt;span class=&#34;comment&#34;&gt;// 计算相邻两元素的和，b = &amp;#123; 1, 3, 5, 7, 9 &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;adjacent_difference&lt;/span&gt;(a, a + &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, b, &lt;span class=&#34;built_in&#34;&gt;multiplies&lt;/span&gt;&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;());  &lt;span class=&#34;comment&#34;&gt;// 计算相邻两元素的乘积，b = &amp;#123; 1, 2, 6, 12, 20 &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
    </channel>
</rss>
