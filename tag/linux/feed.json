{
    "version": "https://jsonfeed.org/version/1",
    "title": "AsanoSaki • All posts by \"linux\" tag",
    "description": "",
    "home_page_url": "https://asanosaki.github.io",
    "items": [
        {
            "id": "https://asanosaki.github.io/posts/63179.html",
            "url": "https://asanosaki.github.io/posts/63179.html",
            "title": "Linux学习笔记-管道、环境变量与Docker",
            "date_published": "2022-09-28T07:14:00.000Z",
            "content_html": "<blockquote>\n<p>本文记录 Linux 的学习过程，内容为管道、环境变量与 Docker。<br>\nDocker 官网：<a href=\"https://hub.docker.com/\">Docker Hub</a>。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"1-管道\">1. 管道</h2>\n<p>（1）概念</p>\n<p>管道类似于文件重定向，可以将前一个命令的 <code>stdout</code> 重定向到下一个命令的 <code>stdin</code>。</p>\n<p>（2）要点</p>\n<ul>\n<li>管道命令仅处理 <code>stdout</code>，会忽略 <code>stderr</code>。</li>\n<li>管道右边的命令必须能接受 <code>stdin</code>。</li>\n<li>多个管道命令可以串联。</li>\n</ul>\n<p>（3）与文件重定向的区别</p>\n<ul>\n<li>文件重定向左边为命令，右边为文件。</li>\n<li>管道左右两边均为命令，左边有 <code>stdout</code>，右边有 <code>stdin</code>。</li>\n</ul>\n<p>（4）举例</p>\n<p>统计当前目录下所有 Python 文件的总行数，其中 <code>find</code>、<code>xargs</code>、<code>wc</code> 等命令可以参考：<a href=\"/posts/53725.html\">Linux学习笔记-命令、Tmux与Vim</a>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -name &#x27;*.py&#x27; | xargs cat | wc -l</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-环境变量\">2. 环境变量</h2>\n<p>（1）概念</p>\n<p>Linux 系统中会用很多环境变量来记录<strong>配置信息</strong>。<br>\n环境变量类似于全局变量，可以<strong>被各个进程访问到</strong>。我们可以通过修改环境变量来方便地修改系统配置。</p>\n<p>（2）查看</p>\n<p>列出当前环境下的所有环境变量：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">env  # 显示当前用户的变量</span><br><span class=\"line\">set  # 显示当前shell的变量，包括当前用户的变量</span><br><span class=\"line\">export  # 显示当前导出成用户变量的shell变量</span><br></pre></td></tr></table></figure>\n<p>输出某个环境变量的值：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $PATH</span><br></pre></td></tr></table></figure>\n<p>（3）修改</p>\n<p>环境变量的定义、修改、删除操作可以参考<a href=\"/posts/31281.html\">Linux学习笔记-Shell</a>这一节的内容。</p>\n<p>为了将对环境变量的修改应用到未来所有环境下，可以将修改命令放到 <code>~/.bashrc</code> 文件中。修改完 <code>~/.bashrc</code> 文件后，需要执行 <code>source ~/.bashrc</code>，来将修改应用到当前的 <code>bash</code> 环境下。</p>\n<p>为何将修改命令放到 <code>~/.bashrc</code>，就可以确保修改会影响未来所有的环境呢？</p>\n<ul>\n<li>每次启动 <code>bash</code>，都会先执行 <code>~/.bashrc</code>。</li>\n<li>每次 <code>ssh</code> 登陆远程服务器，都会启动一个 <code>bash</code> 命令行给我们。</li>\n<li>每次 <code>tmux</code> 新开一个 <code>pane</code>，都会启动一个 <code>bash</code> 命令行给我们。</li>\n<li>所以未来所有新开的环境都会加载我们修改的内容。</li>\n</ul>\n<p>（4）常见环境变量</p>\n<ul>\n<li><code>HOME</code>：用户的家目录。</li>\n<li><code>PATH</code>：可执行文件（命令）的存储路径。路径与路径之间用 <code>:</code> 分隔。当某个可执行文件同时出现在多个路径中时，会选择从左到右数第一个路径中的执行。下列所有存储路径的环境变量，均采用从左到右的优先顺序。</li>\n<li><code>LD_LIBRARY_PATH</code>：用于指定动态链接库（<code>.so</code> 文件）的路径，其内容是以冒号分隔的路径列表。</li>\n<li><code>C_INCLUDE_PATH</code>：C 语言的头文件路径，内容是以冒号分隔的路径列表。</li>\n<li><code>CPLUS_INCLUDE_PATH</code>：CPP 的头文件路径，内容是以冒号分隔的路径列表。</li>\n<li><code>PYTHONPATH</code>：Python 导入包的路径，内容是以冒号分隔的路径列表。</li>\n<li><code>JAVA_HOME</code>：JDK 的安装目录。</li>\n<li><code>CLASSPATH</code>：存放 Java 导入类的路径，内容是以冒号分隔的路径列表。</li>\n</ul>\n<h2 id=\"3-Docker\">3. Docker</h2>\n<h3 id=\"3-1-Docker安装\">3.1 Docker安装</h3>\n<p>Ubuntu 系统 Docker 官网安装教程：<a href=\"https://docs.docker.com/engine/install/ubuntu/\">Docker Install Docs</a>。</p>\n<p>本文安装 Docker 所使用的 OS 版本为：Ubuntu 22.04 (LTS)。依次执行以下命令安装 Docker：</p>\n<p>（1）更新 <code>apt</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n<p>（2）允许 <code>apt</code> 通过 HTTPS 使用存储库：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install ca-certificates curl</span><br></pre></td></tr></table></figure>\n<p>（3）添加 Docker 的官方 GPG 密钥：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo install -m 0755 -d /etc/apt/keyrings</span><br><span class=\"line\">sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc</span><br><span class=\"line\">sudo chmod a+r /etc/apt/keyrings/docker.asc</span><br></pre></td></tr></table></figure>\n<p>（4）设置 <code>repository</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo \\</span><br><span class=\"line\">  &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\</span><br><span class=\"line\"><span class=\"meta prompt_\">  $</span><span class=\"language-bash\">(. /etc/os-release &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$VERSION_CODENAME</span>&quot;</span>) stable<span class=\"string\">&quot; | \\</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-bash\">  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span></span></span><br></pre></td></tr></table></figure>\n<p>（5）安装 Docker Engine，首先更新 <code>apt</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n<p>（6）安装 <code>Docker Engine</code>、<code>containerd</code>、<code>Docker Compose</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure>\n<p>（7）检查版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker -v</span><br><span class=\"line\">docker --version</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-Docker教程\">3.2 Docker教程</h3>\n<p>（1）将当前用户添加到 <code>docker</code> 用户组</p>\n<p>为了避免每次使用 <code>docker</code> 命令都需要加上 <code>sudo</code> 权限，可以将当前用户加入安装中自动创建的 <code>docker</code> 用户组（可以参考<a href=\"https://docs.docker.com/engine/install/linux-postinstall/\">官方文档</a>）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure>\n<p>执行完此操作后，需要退出服务器（即关闭系统），再重新登录回来，才可以省去 <code>sudo</code> 权限。</p>\n<p>重启 Docker 服务命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service docker restart</span><br></pre></td></tr></table></figure>\n<p>查看 Docker 运行状态：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service docker status</span><br></pre></td></tr></table></figure>\n<p>（2）镜像（images）</p>\n<p>一个 Docker 中可以有很多镜像，镜像就相当于模板，每个镜像中又可以有很多容器。</p>\n<p>用相同镜像生成的容器环境都一样，如果 Docker 安装在云服务器上，那么每个容器也就相当于是一个独立的云服务器。</p>\n<p>迁移项目的时候即将容器先生成一个镜像，然后把镜像传到远程服务器上。</p>\n<ul>\n<li><code>docker pull ubuntu:20.04</code> 或 <code>docker pull ubuntu:latest</code>：拉取一个镜像。</li>\n<li><code>docker images</code>：列出本地所有镜像。</li>\n<li><code>docker save -o ubuntu_latest.tar ubuntu:latest</code>：将镜像 <code>ubuntu:latest</code> 导出到本地文件 <code>ubuntu_latest.tar</code> 中，导出后记得给文件加上可读权限：<code>chmod +r ubuntu_latest.tar</code>。</li>\n<li><code>docker image rm ubuntu:latest</code> 或 <code>docker rmi ubuntu:latest</code>：删除镜像 <code>ubuntu:latest</code>。</li>\n<li><code>docker [container] commit CONTAINER IMAGE_NAME:TAG</code>：创建某个 <code>container</code> 的镜像，<code>[]</code> 表示 <code>container</code> 为可选字段。</li>\n<li><code>docker load -i ubuntu_latest.tar</code>：将镜像 <code>ubuntu:latest</code> 从本地文件 <code>ubuntu_latest.tar</code> 中加载出来。</li>\n</ul>\n<p>（3）容器（container）</p>\n<ul>\n<li><code>docker [container] create -it ubuntu:latest</code>：利用镜像 <code>ubuntu:latest</code> 创建一个容器。</li>\n<li><code>docker ps -a</code>：查看本地的所有容器，<code>docker ps</code> 为查看运行中的容器。</li>\n<li><code>docker [container] start CONTAINER</code>：启动容器，<code>CONTAINER</code> 可以是 ID 或 NAMES。</li>\n<li><code>docker [container] stop CONTAINER</code>：停止容器。</li>\n<li><code>docker [container] restart CONTAINER</code>：重启容器。</li>\n<li><code>docker [contaienr] run -itd ubuntu:latest</code>：创建并启动一个容器，可以加上参数 <code>-p 20000:22</code> 表示将容器的22端口映射到本地的20000端口，因为本地的22端口已经被占用了，且如果是在云服务器安装 Docker 还需要修改云服务器安全组配置，把20000端口放行。</li>\n<li><code>docker [container] attach CONTAINER</code>：进入容器。\n<ul>\n<li>先按 <code>Ctrl+p</code>，再按 <code>Ctrl+q</code> 可以挂起容器，即退出但不关闭容器。</li>\n<li>按 <code>Ctrl+d</code> 可以退出并关闭容器。</li>\n</ul>\n</li>\n<li><code>docker [container] exec CONTAINER COMMAND</code>：在容器中执行 <code>COMMAND</code> 命令。</li>\n<li><code>docker [container] rm CONTAINER</code>：删除容器。</li>\n<li><code>docker container prune</code>：删除所有已停止的容器。</li>\n<li><code>docker export -o xxx.tar CONTAINER</code>：将容器导出到本地文件 <code>xxx.tar</code> 中。</li>\n<li><code>docker import xxx.tar image_name:tag</code>：将本地文件 <code>xxx.tar</code> 导入成镜像，并将镜像命名为 <code>image_name:tag</code>。</li>\n<li><code>docker export/import</code> 与 <code>docker save/load</code> 的区别：\n<ul>\n<li><code>export/import</code> 会丢弃历史记录和元数据信息，仅保存容器当时的快照状态。</li>\n<li><code>save/load</code> 会保存完整记录，体积更大。</li>\n</ul>\n</li>\n<li><code>docker top CONTAINER</code>：查看某个容器内的所有进程。</li>\n<li><code>docker stats</code>：查看所有容器的统计信息，包括 CPU、内存、存储、网络等信息。</li>\n<li><code>docker cp xxx CONTAINER:xxx</code> 或 <code>docker cp CONTAINER:xxx xxx</code>：在本地和容器间复制文件。</li>\n<li><code>docker rename NAMES1 NAMES2</code>：将 <code>NAMES1</code> 容器重命名为 <code>NAMES2</code>。</li>\n<li><code>docker update CONTAINER --memory 500MB</code>：修改容器限制，更多修改内容可以在官网查找。</li>\n<li>进入容器后输入 <code>passwd</code> 可以设置 <code>root</code> 密码。</li>\n</ul>\n<p>（4）云服务器配置示例</p>\n<p>首先在 AC Terminal 中操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp /var/lib/acwing/docker/images/docker_lesson_1_0.tar server_name:  # 将镜像上传到自己租的云端服务器</span><br><span class=\"line\">ssh server_name  # 登录自己的云端服务器</span><br><span class=\"line\"></span><br><span class=\"line\">docker load -i docker_lesson_1_0.tar  # 将镜像加载到本地</span><br><span class=\"line\">docker run -p 20000:22 --name my_docker_server -itd docker_lesson:1.0  # 创建并运行docker_lesson:1.0镜像的容器</span><br><span class=\"line\"></span><br><span class=\"line\">docker attach my_docker_server  # 进入创建的docker容器</span><br><span class=\"line\">passwd  # 设置root密码</span><br></pre></td></tr></table></figure>\n<p>然后去云平台控制台中修改安全组配置，放行端口：20000。</p>\n<p>返回 AC Terminal，即可通过 SSH 登录自己的 Docker 容器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@xxx.xxx.xxx.xxx -p 20000  # 将xxx.xxx.xxx.xxx替换成自己租的服务器的IP地址</span><br></pre></td></tr></table></figure>\n<p>创建 <code>acs</code> 用户：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adduser acs  # 创建用户acs</span><br><span class=\"line\">usermod -aG sudo acs  # 给用户acs分配sudo权限</span><br></pre></td></tr></table></figure>\n<p>最后可以配置 Docker 容器的别名和免密登录。</p>\n<p>Tips：如果 <code>apt-get</code> 下载软件速度较慢，可以参考<a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/\">清华大学开源软件镜像站</a>中的内容，修改软件源。</p>\n<p>（5）数据迁移</p>\n<p>如果想保留 Docker 数据库里的数据，需要用 <code>save</code> 和 <code>laod</code> 迁移。</p>\n<p>首先将容器打包成镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit --author AsanoSaki --message &quot;Create the &lt;Image name&gt; by AsanoSaki&quot; &lt;Container name&gt; &lt;Image name&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></figure>\n<p>导出镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker save -o &lt;Image name&gt;.tar &lt;Image name&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></figure>\n<p>将导出的镜像文件传到目标主机上，然后导入镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker load -i &lt;Image name&gt;.tar</span><br></pre></td></tr></table></figure>\n<p>查看镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<p>生成一个新的容器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name &lt;Container name&gt; -p 20000:22 &lt;Image name&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-Docker的代理地址是什么？\">3.3 Docker的代理地址是什么？</h3>\n<p>在 Docker 中，代理地址是用于帮助 Docker 服务和容器访问网络的服务器地址。如果你的网络环境需要通过代理服务器来访问互联网，那么你需要为 Docker 配置代理服务器的地址。这个地址通常由你的网络管理员或者互联网服务提供商提供。</p>\n<p>Docker 的代理配置主要有以下几种情况：</p>\n<ul>\n<li>为 Docker Daemon 配置代理：这主要是为了支持 <code>docker pull</code> 等需要访问公网的 Docker 命令。你可以在 Docker 的守护进程的环境变量中设置代理。</li>\n<li>为 Docker 容器配置代理：这主要是为了让运行在 Docker 容器中的应用能够通过代理访问网络。你可以在启动容器时，通过 <code>docker run</code> 命令的 <code>-e</code> 参数来设置代理。</li>\n<li>为 Docker Build 配置代理：这主要是为了在构建 Docker 镜像时，让 <code>docker build</code> 命令能够通过代理下载依赖的文件。你可以在执行 <code>docker build</code> 命令时，通过 <code>--build-arg</code> 参数来设置代理。</li>\n</ul>\n<p>具体的代理地址和如何获取，需要咨询你的网络管理员或者互联网服务提供商。如果你是在公司或者学校的网络环境下，可能需要通过内部的代理服务器来访问互联网。如果你是在家庭网络环境下，一般来说不需要配置代理，除非你的互联网服务提供商要求你这么做。如果你在中国大陆地区，由于网络封锁的原因，你可能需要配置代理服务器才能访问一些国外的网站。</p>\n<p>上一章：<a href=\"/posts/20905.html\">Linux学习笔记-Thrift</a>。</p>\n<p>下一章：无。</p>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://asanosaki.github.io/posts/20905.html",
            "url": "https://asanosaki.github.io/posts/20905.html",
            "title": "Linux学习笔记-Thrift",
            "date_published": "2022-09-26T06:24:00.000Z",
            "content_html": "<blockquote>\n<p>本文记录 Linux 的学习过程，内容为 RPC 软件框架：Thrift。<br>\nThrift 官网：<a href=\"https://thrift.apache.org/\">Apache Thrift</a>。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"1-Thrift概述\">1. Thrift概述</h2>\n<h3 id=\"1-1-基本概念\">1.1 基本概念</h3>\n<p>Thrift 是一个 RPC（远程过程调用协议 Remote Procedure Call Protocol）软件框架，用来进行可扩展且跨语言的服务的开发。它结合了功能强大的软件堆栈和代码生成引擎，以构建在 C++、Java、Go、Python、PHP、Ruby、Erlang、Perl、Haskell、C#、Cocoa、JavaScript、Node.js、Smalltalk、OCaml 这些编程语言间无缝结合的、高效的服务。Thrift 允许定义一个简单的定义文件中的数据类型和服务接口，以作为输入文件，编译器生成代码用来方便地生成 RPC 客户端和服务器通信的无缝跨编程语言。</p>\n<h3 id=\"1-2-Thrift-IDL\">1.2 Thrift IDL</h3>\n<p>Thrift 采用接口定义语言 IDL（Interface Definition Language）来定义通用的服务接口，然后通过 Thrift 提供的编译器，可以将服务接口编译成不同语言编写的代码，通过这个方式来实现跨语言的功能。</p>\n<ul>\n<li>通过命令调用 Thrift 提供的编译器将服务接口编译成不同语言编写的代码。</li>\n<li>这些代码又分为服务端和客户端，将所在不同进程（或服务器）的功能连接起来。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thrift -r --gen &lt;language&gt; &lt;Thrift filename&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-如何创建Thrift服务？\">1.3 如何创建Thrift服务？</h3>\n<ol>\n<li>定义服务接口（存放接口的文件夹就是 Thrift 文件）。</li>\n<li>作为服务端的服务，需要生成 <code>server</code>。</li>\n<li>作为请求端的服务，需要生成 <code>client</code>。</li>\n</ol>\n<h3 id=\"1-4-实例讲解\">1.4 实例讲解</h3>\n<p>假设我们要实现一个游戏的匹配系统，这个游戏的功能可能运行在一个或多个服务器（进程）上，而 Thrift 就是将不同服务器不同语言的功能连接起来。</p>\n<p>游戏本体（假设用 Python 实现）、匹配系统（假设用 C++ 实现）、数据存储服务器这三个节点（功能）是完全独立的，既可以在同一个服务器上，也可以在不同服务器上。每一个节点就是一个进程，每个进程可以使用不同的语言来实现。</p>\n<p>游戏节点到匹配节点需要实现一条有向边（可以包含多个函数），表示向匹配系统添加和移除玩家 <code>add_user</code>、<code>remove_user</code>，因此游戏节点需要实现 <code>match_client</code> 端，表示可以调用匹配服务器的函数；匹配系统需要实现 <code>match_server</code> 端，表示可以让游戏节点的 Client 端调用自身的函数。同时匹配系统还需实现 <code>save_client</code> 端，因为需要将数据传给服务器存储 <code>save_data</code>（假设数据存储服务器已实现 <code>save_server</code> 端）。</p>\n<h2 id=\"2-Thrift教程\">2. Thrift教程</h2>\n<p>首先创建一个游戏系统文件夹 <code>game</code>、匹配系统文件夹 <code>match_system</code>、保存各种接口的文件夹 <code>thrift</code>。</p>\n<h3 id=\"2-1-match-server框架\">2.1 match_server框架</h3>\n<p>在 <code>thrift</code> 文件夹中创建一个文件：<code>match.thrift</code>，内容如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> cpp match_service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">User</span>  <span class=\"comment\">/**定义结构体存储用户信息*/</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"number\">1</span>: i32 id,  <span class=\"comment\">/**i32表示int*/</span></span><br><span class=\"line\">    <span class=\"number\">2</span>: string name,</span><br><span class=\"line\">    <span class=\"number\">3</span>: i32 score  <span class=\"comment\">/**按照分值匹配*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">service Match</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">i32 <span class=\"title\">add_user</span><span class=\"params\">(<span class=\"number\">1</span>: User user, <span class=\"number\">2</span>: string info)</span>,</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">    i32 <span class=\"title\">remove_user</span><span class=\"params\">(<span class=\"number\">1</span>: User user, <span class=\"number\">2</span>: string info)</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>前往 Thrift 官网，点击 Tutorial，再点击 C++，即可看到如何通过这个接口生成一个 C++ 版本的服务器。命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thrift -r --gen cpp tutorial.thrift</span><br></pre></td></tr></table></figure>\n<p>在 <code>match_system</code> 文件夹中创建一个文件夹 <code>src</code>，表示源文件。在 <code>src</code> 文件夹中输入以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thrift -r --gen cpp ../../thrift/match.thrift</span><br></pre></td></tr></table></figure>\n<p>执行后会发现该目录下生成了一个 <code>gen-cpp</code> 的文件夹，为了后续方便操作，将文件夹改个名：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv gen-cpp match_server</span><br></pre></td></tr></table></figure>\n<p>将自动实现好的文件移出来：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv match_server/Match_server.skeleton.cpp main.cpp</span><br></pre></td></tr></table></figure>\n<p>由于该文件里的函数还没有进行逻辑实现，因此先在每个函数中加上 <code>return 0;</code> 后编译一遍，文件内容如下（可以使用 <code>gg=G</code> 进行格式化）：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This autogenerated skeleton file illustrates how to build a server.</span></span><br><span class=\"line\"><span class=\"comment\">// You should copy it to another filename to avoid overwriting it.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;match_server/Match.h&quot;</span>  <span class=\"comment\">// 注意已经将该文件移出来了，因此头文件路径要改</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/protocol/TBinaryProtocol.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/server/TSimpleServer.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/transport/TServerSocket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/transport/TBufferTransports.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::apache::thrift;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::apache::thrift::protocol;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::apache::thrift::transport;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::apache::thrift::server;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span>  ::match_service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MatchHandler</span> : <span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> MatchIf &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"built_in\">MatchHandler</span>() &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Your initialization goes here</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int32_t</span> <span class=\"title\">add_user</span><span class=\"params\">(<span class=\"type\">const</span> User&amp; user, <span class=\"type\">const</span> std::string&amp; info)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// Your implementation goes here</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;add_user\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int32_t</span> <span class=\"title\">remove_user</span><span class=\"params\">(<span class=\"type\">const</span> User&amp; user, <span class=\"type\">const</span> std::string&amp; info)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// Your implementation goes here</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;remove_user\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> port = <span class=\"number\">9090</span>;</span><br><span class=\"line\">    ::<span class=\"function\">std::shared_ptr&lt;MatchHandler&gt; <span class=\"title\">handler</span><span class=\"params\">(<span class=\"keyword\">new</span> MatchHandler())</span></span>;</span><br><span class=\"line\">    ::<span class=\"function\">std::shared_ptr&lt;TProcessor&gt; <span class=\"title\">processor</span><span class=\"params\">(<span class=\"keyword\">new</span> MatchProcessor(handler))</span></span>;</span><br><span class=\"line\">    ::<span class=\"function\">std::shared_ptr&lt;TServerTransport&gt; <span class=\"title\">serverTransport</span><span class=\"params\">(<span class=\"keyword\">new</span> TServerSocket(port))</span></span>;</span><br><span class=\"line\">    ::<span class=\"function\">std::shared_ptr&lt;TTransportFactory&gt; <span class=\"title\">transportFactory</span><span class=\"params\">(<span class=\"keyword\">new</span> TBufferedTransportFactory())</span></span>;</span><br><span class=\"line\">    ::<span class=\"function\">std::shared_ptr&lt;TProtocolFactory&gt; <span class=\"title\">protocolFactory</span><span class=\"params\">(<span class=\"keyword\">new</span> TBinaryProtocolFactory())</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">TSimpleServer <span class=\"title\">server</span><span class=\"params\">(processor, serverTransport, transportFactory, protocolFactory)</span></span>;</span><br><span class=\"line\">    server.<span class=\"built_in\">serve</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来进行编译链接，链接的时候需要用到 Thrift 的动态链接库，需要加上 <code>-lthrift</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -c main.cpp match_server/*.cpp</span><br><span class=\"line\">g++ *.o -o main -lthrift</span><br></pre></td></tr></table></figure>\n<p>这时输入 <code>./main</code> 即可运行程序，但是此时什么内容都没有。Thrift 只是将接口实现好了，具体的业务逻辑没有实现。我们可以先将文件上传至 Git，上传的时候注意一般不将 <code>.o</code> 文件和可执行文件上传：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git restore --staged *.o</span><br><span class=\"line\">git restore --staged main</span><br><span class=\"line\">git status</span><br><span class=\"line\">git commit -m &quot;add match_server&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-match-client框架与实现\">2.2 match_client框架与实现</h3>\n<p>首先同样在 <code>game</code> 文件夹中创建 <code>src</code> 文件夹，进入 <code>src</code> 文件夹后我们需要生成 Python 代码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thrift -r --gen py ../../thrift/match.thrift</span><br></pre></td></tr></table></figure>\n<p>生成后该目录下有个文件夹 <code>gen-py</code>，也就是生成了 Python 的服务器端，同样将其改个名：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv gen-py match_client</span><br></pre></td></tr></table></figure>\n<p>创建文件 <code>client.py</code>，将官网中 Python 客户端的代码（前四行是为了将当前路径加入到 Python 的环境变量中，可以删掉）复制过来，并进行简单的修改：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> match_client.<span class=\"keyword\">match</span> <span class=\"keyword\">import</span> Match</span><br><span class=\"line\"><span class=\"keyword\">from</span> match_client.<span class=\"keyword\">match</span>.ttypes <span class=\"keyword\">import</span> User</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> thrift <span class=\"keyword\">import</span> Thrift</span><br><span class=\"line\"><span class=\"keyword\">from</span> thrift.transport <span class=\"keyword\">import</span> TSocket</span><br><span class=\"line\"><span class=\"keyword\">from</span> thrift.transport <span class=\"keyword\">import</span> TTransport</span><br><span class=\"line\"><span class=\"keyword\">from</span> thrift.protocol <span class=\"keyword\">import</span> TBinaryProtocol</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"comment\"># Make socket</span></span><br><span class=\"line\">    transport = TSocket.TSocket(<span class=\"string\">&#x27;localhost&#x27;</span>, <span class=\"number\">9090</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Buffering is critical. Raw sockets are very slow</span></span><br><span class=\"line\">    transport = TTransport.TBufferedTransport(transport)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Wrap in a protocol</span></span><br><span class=\"line\">    protocol = TBinaryProtocol.TBinaryProtocol(transport)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Create a client to use the protocol encoder</span></span><br><span class=\"line\">    client = Match.Client(protocol)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Connect!</span></span><br><span class=\"line\">    transport.<span class=\"built_in\">open</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    user = User(<span class=\"number\">1</span>, <span class=\"string\">&#x27;yyj&#x27;</span>, <span class=\"number\">1500</span>)</span><br><span class=\"line\">    client.add_user(user, <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Close!</span></span><br><span class=\"line\">    transport.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>然后我们将 <code>match_system/src</code> 中的 <code>main</code> 执行后，再执行 <code>game/src</code> 中的 <code>client.py</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 client.py</span><br></pre></td></tr></table></figure>\n<p>可以看到 <code>main</code> 程序那边输出：<code>add_user</code>。说明我们的 <code>match_client</code> 端和 <code>match_server</code> 端已经初步实现了，此时更新一下 Git，注意 <code>.pyc</code> 文件也最好不要上传：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git restore --staged *.pyc</span><br><span class=\"line\">git status</span><br><span class=\"line\">git commit -m &quot;add match_client&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<p>接着我们进行优化，从控制台输入用户信息，并指定是添加还是删除用户，修改后的 <code>client.py</code> 代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> match_client.<span class=\"keyword\">match</span> <span class=\"keyword\">import</span> Match</span><br><span class=\"line\"><span class=\"keyword\">from</span> match_client.<span class=\"keyword\">match</span>.ttypes <span class=\"keyword\">import</span> User</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> thrift <span class=\"keyword\">import</span> Thrift</span><br><span class=\"line\"><span class=\"keyword\">from</span> thrift.transport <span class=\"keyword\">import</span> TSocket</span><br><span class=\"line\"><span class=\"keyword\">from</span> thrift.transport <span class=\"keyword\">import</span> TTransport</span><br><span class=\"line\"><span class=\"keyword\">from</span> thrift.protocol <span class=\"keyword\">import</span> TBinaryProtocol</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> sys <span class=\"keyword\">import</span> stdin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">operate</span>(<span class=\"params\">op, user_id, username, score</span>):</span><br><span class=\"line\">    <span class=\"comment\"># Make socket</span></span><br><span class=\"line\">    transport = TSocket.TSocket(<span class=\"string\">&#x27;localhost&#x27;</span>, <span class=\"number\">9090</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Buffering is critical. Raw sockets are very slow</span></span><br><span class=\"line\">    transport = TTransport.TBufferedTransport(transport)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Wrap in a protocol</span></span><br><span class=\"line\">    protocol = TBinaryProtocol.TBinaryProtocol(transport)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Create a client to use the protocol encoder</span></span><br><span class=\"line\">    client = Match.Client(protocol)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Connect!</span></span><br><span class=\"line\">    transport.<span class=\"built_in\">open</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    user = User(user_id, username, score)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;add&quot;</span>:</span><br><span class=\"line\">        client.add_user(user, <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> op == <span class=\"string\">&quot;remove&quot;</span>:</span><br><span class=\"line\">        client.remove_user(user, <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Close!</span></span><br><span class=\"line\">    transport.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> stdin:</span><br><span class=\"line\">        op, user_id, username, score = line.split(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">        operate(op, <span class=\"built_in\">int</span>(user_id), username, <span class=\"built_in\">int</span>(score))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>这样我们的 <code>match_client</code> 端就算是完成了。</p>\n<h3 id=\"2-3-match-server-v2-0实现\">2.3 match_server_v2.0实现</h3>\n<p>由于 <code>server</code> 端一方面需要读入或者移出用户，另一方面还要不断地去匹配，因此需要有一个线程去不断添加用户进来，一个线程去进行匹配，匹配完后再将信息传给一个服务器，且这两个操作是完全独立的，有可能长时间没有用户添加进来，但是匹配系统能够匹配两个已经匹配了很久的人。因此在这里需要用到并行技术，C++ 多线程需要使用到 <code>&lt;thread&gt;</code> 头文件。</p>\n<p><strong>多线程相关知识点：</strong></p>\n<ul>\n<li>IP 和端口：如果把 IP 地址比作一间房子，端口就是出入这间房子的门。真正的房子只有几个门，但是一个 IP 地址的端口可以有65536个之多！端口是通过端口号来标记的，端口号只有整数，范围是从0到65535。同一个端口只能由一个进程来监听。所以我们一旦启动了一个服务，那么这个服务就不能在被另一个进程启动了。服务器的端口号要与客户端的端口号相同。</li>\n<li><code>&lt;thread&gt;</code> 库：C++ 中有一个 <code>thread</code> 的库，可以用来开线程。通过定义一个变量将函数名作为参数，就能开一个线程了，具体使用可以看后文代码。</li>\n<li>首先定义线程的操作：并行中经典的生产者和消费者模型。生产者、消费者是两个线程。本样例中的生产者：<code>add_user()</code>、<code>remove_user()</code>；消费者：匹配用户的功能。</li>\n<li>生产者和消费者之间需要一个媒介。这个媒介可以有很多种方法。比如：消费队列。很多语言都有自己实现的消费队列，也可以自己实现消费队列。实现消费队列，就需要用到一些锁（Mutex）。锁是并行编程的基本概念。</li>\n<li>互斥锁：在编程中，引入了对象互斥锁的概念，来保证共享数据操作的完整性。每个对象都对应于一个可称为“互斥锁”的标记，这个标记用来保证<strong>在任一时刻，只能有一个线程访问该对象</strong>。\n<ul>\n<li>锁有两个操作：一个 P 操作（上锁），一个 V 操作（解锁）。</li>\n<li>定义互斥锁：<code>mutex m</code>。锁一般使用信号量来实现的，<code>mutex</code> 其实就是一个信号量（它特殊也叫互斥量）。互斥量就是同一时间能够分给一个人，即 S = 1。信号量 S = 10 表示可以将信号量分给10个人来用。</li>\n<li>P 操作的主要动作是：<br>\n（1）S - 1；<br>\n（2）若 S - 1 后仍大于或等于0，则进程继续执行；<br>\n（3）若 S - 1 后小于0，则该进程被阻塞后放入等待该信号量的等待队列中，然后转进程调度。</li>\n<li>V 操作的主要动作是：<br>\n（1）S + 1；<br>\n（2）若 S + 1 后结果大于0，则进程继续执行；<br>\n（3）若 S + 1 后结果小于或等于0，则从该信号的等待队列中释放一个等待进程，然后再返回原进程继续执行或转进程调度。</li>\n<li>对于 P 和 V 都是原子操作，就是在执行 P 和 V 操作时，不会被插队，从而实现对共享变量操作的原子性。</li>\n<li>特殊：S = 1 表示互斥量，表示同一时间，信号量只能分配给一个线程。</li>\n</ul>\n</li>\n<li>多线程为啥要用锁？因为<strong>多线程可能共享一个内存空间</strong>，导致出现重复读取并修改的现象。</li>\n</ul>\n<p>我们将程序功能修改为傻瓜式匹配，只要匹配池中的玩家数大于等于2，那么就将前两名玩家进行匹配，修改后的 <code>match_server</code> 端 <code>main.cpp</code> 代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This autogenerated skeleton file illustrates how to build a server.</span></span><br><span class=\"line\"><span class=\"comment\">// You should copy it to another filename to avoid overwriting it.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;match_server/Match.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/protocol/TBinaryProtocol.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/server/TSimpleServer.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/transport/TServerSocket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/transport/TBufferTransports.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;condition_variable&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::apache::thrift;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::apache::thrift::protocol;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::apache::thrift::transport;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::apache::thrift::server;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::match_service;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Task</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    User user;</span><br><span class=\"line\">    string type;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MessageQueue</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    queue&lt;Task&gt; q;</span><br><span class=\"line\">    mutex m;</span><br><span class=\"line\">    condition_variable cv;</span><br><span class=\"line\">&#125;message_queue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Pool</span>  <span class=\"comment\">// 玩家匹配池</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">save_result</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Match result: %d %d\\n&quot;</span>, a, b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">match</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (users.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> a = users[<span class=\"number\">0</span>], b = users[<span class=\"number\">1</span>];</span><br><span class=\"line\">                users.<span class=\"built_in\">erase</span>(users.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">                users.<span class=\"built_in\">erase</span>(users.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">save_result</span>(a.id, b.id);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(User user)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            users.<span class=\"built_in\">push_back</span>(user);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">remove</span><span class=\"params\">(User user)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; users.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (users[i].id == user.id)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    users.<span class=\"built_in\">erase</span>(users.<span class=\"built_in\">begin</span>() + i);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        vector&lt;User&gt; users;</span><br><span class=\"line\">&#125;pool;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MatchHandler</span> : <span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> MatchIf &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"built_in\">MatchHandler</span>() &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Your initialization goes here</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int32_t</span> <span class=\"title\">add_user</span><span class=\"params\">(<span class=\"type\">const</span> User&amp; user, <span class=\"type\">const</span> std::string&amp; info)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// Your implementation goes here</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;add_user\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lck</span><span class=\"params\">(message_queue.m)</span></span>;  <span class=\"comment\">// 当lck变量消失即函数结束后锁会自动释放</span></span><br><span class=\"line\">            message_queue.q.<span class=\"built_in\">push</span>(&#123; user, <span class=\"string\">&quot;add&quot;</span> &#125;);</span><br><span class=\"line\">            message_queue.cv.<span class=\"built_in\">notify_all</span>();  <span class=\"comment\">// 唤醒条件变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int32_t</span> <span class=\"title\">remove_user</span><span class=\"params\">(<span class=\"type\">const</span> User&amp; user, <span class=\"type\">const</span> std::string&amp; info)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// Your implementation goes here</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;remove_user\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lck</span><span class=\"params\">(message_queue.m)</span></span>;</span><br><span class=\"line\">            message_queue.q.<span class=\"built_in\">push</span>(&#123; user, <span class=\"string\">&quot;remove&quot;</span> &#125;);</span><br><span class=\"line\">            message_queue.cv.<span class=\"built_in\">notify_all</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">consume_task</span><span class=\"params\">()</span>  <span class=\"comment\">// 消费者模型</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lck</span><span class=\"params\">(message_queue.m)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message_queue.q.<span class=\"built_in\">empty</span>())  <span class=\"comment\">// 如果消息队列为空则应该先阻塞，而不能一直循环</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            message_queue.cv.<span class=\"built_in\">wait</span>(lck);  <span class=\"comment\">// 先将锁释放，然后卡住，直到在其他地方将这个条件变量唤醒</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> task = message_queue.q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            message_queue.q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            lck.<span class=\"built_in\">unlock</span>();  <span class=\"comment\">// 尽早解锁，若等处理完task再解锁就等待时间太长了</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// do task</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (task.type == <span class=\"string\">&quot;add&quot;</span>) pool.<span class=\"built_in\">add</span>(task.user);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (task.type == <span class=\"string\">&quot;remove&quot;</span>) pool.<span class=\"built_in\">remove</span>(task.user);</span><br><span class=\"line\"></span><br><span class=\"line\">            pool.<span class=\"built_in\">match</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> port = <span class=\"number\">9090</span>;</span><br><span class=\"line\">    ::<span class=\"function\">std::shared_ptr&lt;MatchHandler&gt; <span class=\"title\">handler</span><span class=\"params\">(<span class=\"keyword\">new</span> MatchHandler())</span></span>;</span><br><span class=\"line\">    ::<span class=\"function\">std::shared_ptr&lt;TProcessor&gt; <span class=\"title\">processor</span><span class=\"params\">(<span class=\"keyword\">new</span> MatchProcessor(handler))</span></span>;</span><br><span class=\"line\">    ::<span class=\"function\">std::shared_ptr&lt;TServerTransport&gt; <span class=\"title\">serverTransport</span><span class=\"params\">(<span class=\"keyword\">new</span> TServerSocket(port))</span></span>;</span><br><span class=\"line\">    ::<span class=\"function\">std::shared_ptr&lt;TTransportFactory&gt; <span class=\"title\">transportFactory</span><span class=\"params\">(<span class=\"keyword\">new</span> TBufferedTransportFactory())</span></span>;</span><br><span class=\"line\">    ::<span class=\"function\">std::shared_ptr&lt;TProtocolFactory&gt; <span class=\"title\">protocolFactory</span><span class=\"params\">(<span class=\"keyword\">new</span> TBinaryProtocolFactory())</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">TSimpleServer <span class=\"title\">server</span><span class=\"params\">(processor, serverTransport, transportFactory, protocolFactory)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Start Match Server\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">thread <span class=\"title\">matching_thread</span><span class=\"params\">(consume_task)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    server.<span class=\"built_in\">serve</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于使用了线程库，因此编译的时候需要加上参数 <code>-pthread</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -c main.cpp</span><br><span class=\"line\">g++ *.o -o main -lthrift -pthread</span><br></pre></td></tr></table></figure>\n<p>此时可以打开 <code>match_server</code> 端和 <code>match_client</code> 端，然后在 <code>client</code> 端添加玩家看看 <code>server</code> 端的匹配结果。</p>\n<h3 id=\"2-4-save-client实现\">2.4 save_client实现</h3>\n<p>假设 <code>save_server</code> 端已经实现，在 <code>thrift</code> 文件夹中创建文件 <code>save.thrift</code>，内容如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace cpp save_service</span><br><span class=\"line\"></span><br><span class=\"line\">service Save &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * username: myserver的名称</span><br><span class=\"line\">     * password: myserver的密码的md5sum的前8位</span><br><span class=\"line\">     * 用户名密码验证成功会返回0，验证失败会返回1</span><br><span class=\"line\">     * 验证成功后，结果会被保存到myserver:homework/lesson_6/result.txt中</span><br><span class=\"line\">     */</span><br><span class=\"line\">    i32 save_data(1: string username, 2: string password, 3: i32 player1_id, 4: i32 player2_id)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到直接调用 <code>save_server</code> 端的接口函数 <code>save_data</code> 即可（该函数的实现我们不关心）。</p>\n<p>在 <code>match_system/src</code> 文件夹中输入以下指令生成接口的 C++ 实现，并重命名，然后需要将自动生成的服务端代码删去：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thrift -r --gen cpp ../../thrift/save.thrift</span><br><span class=\"line\">mv gen-cpp save_client</span><br><span class=\"line\">cd save_client</span><br><span class=\"line\">rm Save_server.skeleton.cpp</span><br></pre></td></tr></table></figure>\n<p>接下来我们将 Thrift 官网 C++ 教程中的 Client 端代码抄下来并相应进行修改，修改后的 <code>main.cpp</code> 内容如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This autogenerated skeleton file illustrates how to build a server.</span></span><br><span class=\"line\"><span class=\"comment\">// You should copy it to another filename to avoid overwriting it.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;match_server/Match.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;save_client/Save.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/protocol/TBinaryProtocol.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/server/TSimpleServer.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/transport/TServerSocket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/transport/TBufferTransports.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/transport/TTransportUtils.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/transport/TSocket.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;condition_variable&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::apache::thrift;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::apache::thrift::protocol;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::apache::thrift::transport;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::apache::thrift::server;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::match_service;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::save_service;  <span class=\"comment\">// 注意加上save_client端的命名空间</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Task</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    User user;</span><br><span class=\"line\">    string type;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MessageQueue</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    queue&lt;Task&gt; q;</span><br><span class=\"line\">    mutex m;</span><br><span class=\"line\">    condition_variable cv;</span><br><span class=\"line\">&#125;message_queue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Pool</span>  <span class=\"comment\">// 玩家匹配池</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">save_result</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Match result: %d %d\\n&quot;</span>, a, b);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\">std::shared_ptr&lt;TTransport&gt; <span class=\"title\">socket</span><span class=\"params\">(<span class=\"keyword\">new</span> TSocket(<span class=\"string\">&quot;123.57.47.211&quot;</span>, <span class=\"number\">9090</span>))</span></span>;</span><br><span class=\"line\">            <span class=\"function\">std::shared_ptr&lt;TTransport&gt; <span class=\"title\">transport</span><span class=\"params\">(<span class=\"keyword\">new</span> TBufferedTransport(socket))</span></span>;</span><br><span class=\"line\">            <span class=\"function\">std::shared_ptr&lt;TProtocol&gt; <span class=\"title\">protocol</span><span class=\"params\">(<span class=\"keyword\">new</span> TBinaryProtocol(transport))</span></span>;</span><br><span class=\"line\">            <span class=\"function\">SaveClient <span class=\"title\">client</span><span class=\"params\">(protocol)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                transport-&gt;<span class=\"built_in\">open</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">int</span> res = client.<span class=\"built_in\">save_data</span>(<span class=\"string\">&quot;acs_2077&quot;</span>, <span class=\"string\">&quot;4503f06d&quot;</span>, a, b);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!res) <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Success&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Failed&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                transport-&gt;<span class=\"built_in\">close</span>();</span><br><span class=\"line\">            &#125; <span class=\"built_in\">catch</span> (TException&amp; tx) &#123;</span><br><span class=\"line\">                cout &lt;&lt; <span class=\"string\">&quot;ERROR: &quot;</span> &lt;&lt; tx.<span class=\"built_in\">what</span>() &lt;&lt; endl;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">match</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (users.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> a = users[<span class=\"number\">0</span>], b = users[<span class=\"number\">1</span>];</span><br><span class=\"line\">                users.<span class=\"built_in\">erase</span>(users.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">                users.<span class=\"built_in\">erase</span>(users.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">save_result</span>(a.id, b.id);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(User user)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            users.<span class=\"built_in\">push_back</span>(user);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">remove</span><span class=\"params\">(User user)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; users.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (users[i].id == user.id)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    users.<span class=\"built_in\">erase</span>(users.<span class=\"built_in\">begin</span>() + i);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        vector&lt;User&gt; users;</span><br><span class=\"line\">&#125;pool;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MatchHandler</span> : <span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> MatchIf &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"built_in\">MatchHandler</span>() &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Your initialization goes here</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int32_t</span> <span class=\"title\">add_user</span><span class=\"params\">(<span class=\"type\">const</span> User&amp; user, <span class=\"type\">const</span> std::string&amp; info)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// Your implementation goes here</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;add_user\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lck</span><span class=\"params\">(message_queue.m)</span></span>;  <span class=\"comment\">// 当lck变量消失即函数结束后锁会自动释放</span></span><br><span class=\"line\">            message_queue.q.<span class=\"built_in\">push</span>(&#123; user, <span class=\"string\">&quot;add&quot;</span> &#125;);</span><br><span class=\"line\">            message_queue.cv.<span class=\"built_in\">notify_all</span>();  <span class=\"comment\">// 唤醒条件变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int32_t</span> <span class=\"title\">remove_user</span><span class=\"params\">(<span class=\"type\">const</span> User&amp; user, <span class=\"type\">const</span> std::string&amp; info)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// Your implementation goes here</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;remove_user\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lck</span><span class=\"params\">(message_queue.m)</span></span>;</span><br><span class=\"line\">            message_queue.q.<span class=\"built_in\">push</span>(&#123; user, <span class=\"string\">&quot;remove&quot;</span> &#125;);</span><br><span class=\"line\">            message_queue.cv.<span class=\"built_in\">notify_all</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">consume_task</span><span class=\"params\">()</span>  <span class=\"comment\">// 消费者模型</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lck</span><span class=\"params\">(message_queue.m)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message_queue.q.<span class=\"built_in\">empty</span>())  <span class=\"comment\">// 如果消息队列为空则应该先阻塞，而不能一直循环</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            message_queue.cv.<span class=\"built_in\">wait</span>(lck);  <span class=\"comment\">// 先将锁释放，然后卡住，直到在其他地方将这个条件变量唤醒</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> task = message_queue.q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            message_queue.q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            lck.<span class=\"built_in\">unlock</span>();  <span class=\"comment\">// 尽早解锁，若等处理完task再解锁就等待时间太长了</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// do task</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (task.type == <span class=\"string\">&quot;add&quot;</span>) pool.<span class=\"built_in\">add</span>(task.user);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (task.type == <span class=\"string\">&quot;remove&quot;</span>) pool.<span class=\"built_in\">remove</span>(task.user);</span><br><span class=\"line\"></span><br><span class=\"line\">            pool.<span class=\"built_in\">match</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> port = <span class=\"number\">9090</span>;</span><br><span class=\"line\">    ::<span class=\"function\">std::shared_ptr&lt;MatchHandler&gt; <span class=\"title\">handler</span><span class=\"params\">(<span class=\"keyword\">new</span> MatchHandler())</span></span>;</span><br><span class=\"line\">    ::<span class=\"function\">std::shared_ptr&lt;TProcessor&gt; <span class=\"title\">processor</span><span class=\"params\">(<span class=\"keyword\">new</span> MatchProcessor(handler))</span></span>;</span><br><span class=\"line\">    ::<span class=\"function\">std::shared_ptr&lt;TServerTransport&gt; <span class=\"title\">serverTransport</span><span class=\"params\">(<span class=\"keyword\">new</span> TServerSocket(port))</span></span>;</span><br><span class=\"line\">    ::<span class=\"function\">std::shared_ptr&lt;TTransportFactory&gt; <span class=\"title\">transportFactory</span><span class=\"params\">(<span class=\"keyword\">new</span> TBufferedTransportFactory())</span></span>;</span><br><span class=\"line\">    ::<span class=\"function\">std::shared_ptr&lt;TProtocolFactory&gt; <span class=\"title\">protocolFactory</span><span class=\"params\">(<span class=\"keyword\">new</span> TBinaryProtocolFactory())</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">TSimpleServer <span class=\"title\">server</span><span class=\"params\">(processor, serverTransport, transportFactory, protocolFactory)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Start Match Server\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">thread <span class=\"title\">matching_thread</span><span class=\"params\">(consume_task)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    server.<span class=\"built_in\">serve</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-5-match-server-v3-0实现\">2.5 match_server_v3.0实现</h3>\n<p>通过修改匹配函数 <code>match()</code> 实现将分差小于等于50的玩家进行匹配，修改后的代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This autogenerated skeleton file illustrates how to build a server.</span></span><br><span class=\"line\"><span class=\"comment\">// You should copy it to another filename to avoid overwriting it.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;match_server/Match.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;save_client/Save.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/protocol/TBinaryProtocol.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/server/TSimpleServer.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/transport/TServerSocket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/transport/TBufferTransports.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/transport/TTransportUtils.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/transport/TSocket.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;condition_variable&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::apache::thrift;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::apache::thrift::protocol;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::apache::thrift::transport;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::apache::thrift::server;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::match_service;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::save_service;  <span class=\"comment\">// 注意加上save_client端的命名空间</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Task</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    User user;</span><br><span class=\"line\">    string type;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MessageQueue</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    queue&lt;Task&gt; q;</span><br><span class=\"line\">    mutex m;</span><br><span class=\"line\">    condition_variable cv;</span><br><span class=\"line\">&#125;message_queue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Pool</span>  <span class=\"comment\">// 玩家匹配池</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">save_result</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// do save task</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">match</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (users.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">sort</span>(users.<span class=\"built_in\">begin</span>(), users.<span class=\"built_in\">end</span>(), [&amp;](User &amp;a, User &amp;b)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> a.score &lt; b.score;</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                <span class=\"type\">bool</span> flag = <span class=\"literal\">true</span>;  <span class=\"comment\">// 防止玩家之间分数差距都很大导致死循环</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">uint32_t</span> i = <span class=\"number\">1</span>; i &lt; users.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">auto</span> a = users[i - <span class=\"number\">1</span>], b = users[i];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (b.score - a.score &lt;= <span class=\"number\">50</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">save_result</span>(a.id, b.id);</span><br><span class=\"line\">                        users.<span class=\"built_in\">erase</span>(users.<span class=\"built_in\">begin</span>() + i - <span class=\"number\">1</span>, users.<span class=\"built_in\">begin</span>() + i + <span class=\"number\">1</span>);</span><br><span class=\"line\">                        flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (flag) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(User user)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            users.<span class=\"built_in\">push_back</span>(user);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">remove</span><span class=\"params\">(User user)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; users.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (users[i].id == user.id)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    users.<span class=\"built_in\">erase</span>(users.<span class=\"built_in\">begin</span>() + i);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        vector&lt;User&gt; users;</span><br><span class=\"line\">&#125;pool;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MatchHandler</span> : <span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> MatchIf &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"built_in\">MatchHandler</span>() &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Your initialization goes here</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int32_t</span> <span class=\"title\">add_user</span><span class=\"params\">(<span class=\"type\">const</span> User&amp; user, <span class=\"type\">const</span> std::string&amp; info)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// Your implementation goes here</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;add_user\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lck</span><span class=\"params\">(message_queue.m)</span></span>;  <span class=\"comment\">// 当lck变量消失即函数结束后锁会自动释放</span></span><br><span class=\"line\">            message_queue.q.<span class=\"built_in\">push</span>(&#123; user, <span class=\"string\">&quot;add&quot;</span> &#125;);</span><br><span class=\"line\">            message_queue.cv.<span class=\"built_in\">notify_all</span>();  <span class=\"comment\">// 唤醒条件变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int32_t</span> <span class=\"title\">remove_user</span><span class=\"params\">(<span class=\"type\">const</span> User&amp; user, <span class=\"type\">const</span> std::string&amp; info)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// Your implementation goes here</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;remove_user\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lck</span><span class=\"params\">(message_queue.m)</span></span>;</span><br><span class=\"line\">            message_queue.q.<span class=\"built_in\">push</span>(&#123; user, <span class=\"string\">&quot;remove&quot;</span> &#125;);</span><br><span class=\"line\">            message_queue.cv.<span class=\"built_in\">notify_all</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">consume_task</span><span class=\"params\">()</span>  <span class=\"comment\">// 消费者模型</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lck</span><span class=\"params\">(message_queue.m)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message_queue.q.<span class=\"built_in\">empty</span>())  <span class=\"comment\">// 如果消息队列为空则应该先阻塞，而不能一直循环</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// message_queue.cv.wait(lck);  // 先将锁释放，然后卡住，直到在其他地方将这个条件变量唤醒</span></span><br><span class=\"line\">            lck.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">            pool.<span class=\"built_in\">match</span>();</span><br><span class=\"line\">            <span class=\"built_in\">sleep</span>(<span class=\"number\">1</span>);  <span class=\"comment\">// 每秒匹配一次</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> task = message_queue.q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            message_queue.q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            lck.<span class=\"built_in\">unlock</span>();  <span class=\"comment\">// 尽早解锁，若等处理完task再解锁就等待时间太长了</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// do task</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (task.type == <span class=\"string\">&quot;add&quot;</span>) pool.<span class=\"built_in\">add</span>(task.user);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (task.type == <span class=\"string\">&quot;remove&quot;</span>) pool.<span class=\"built_in\">remove</span>(task.user);</span><br><span class=\"line\"></span><br><span class=\"line\">            pool.<span class=\"built_in\">match</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> port = <span class=\"number\">9090</span>;</span><br><span class=\"line\">    ::<span class=\"function\">std::shared_ptr&lt;MatchHandler&gt; <span class=\"title\">handler</span><span class=\"params\">(<span class=\"keyword\">new</span> MatchHandler())</span></span>;</span><br><span class=\"line\">    ::<span class=\"function\">std::shared_ptr&lt;TProcessor&gt; <span class=\"title\">processor</span><span class=\"params\">(<span class=\"keyword\">new</span> MatchProcessor(handler))</span></span>;</span><br><span class=\"line\">    ::<span class=\"function\">std::shared_ptr&lt;TServerTransport&gt; <span class=\"title\">serverTransport</span><span class=\"params\">(<span class=\"keyword\">new</span> TServerSocket(port))</span></span>;</span><br><span class=\"line\">    ::<span class=\"function\">std::shared_ptr&lt;TTransportFactory&gt; <span class=\"title\">transportFactory</span><span class=\"params\">(<span class=\"keyword\">new</span> TBufferedTransportFactory())</span></span>;</span><br><span class=\"line\">    ::<span class=\"function\">std::shared_ptr&lt;TProtocolFactory&gt; <span class=\"title\">protocolFactory</span><span class=\"params\">(<span class=\"keyword\">new</span> TBinaryProtocolFactory())</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">TSimpleServer <span class=\"title\">server</span><span class=\"params\">(processor, serverTransport, transportFactory, protocolFactory)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Start Match Server\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">thread <span class=\"title\">matching_thread</span><span class=\"params\">(consume_task)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    server.<span class=\"built_in\">serve</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-6-match-server-v4-0实现\">2.6 match_server_v4.0实现</h3>\n<p>通过 Thrift 官网 C++ 教程下的 Server 端代码可以将 <code>match_server</code> 改为多线程，修改后的 <code>main.cpp</code> 代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This autogenerated skeleton file illustrates how to build a server.</span></span><br><span class=\"line\"><span class=\"comment\">// You should copy it to another filename to avoid overwriting it.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;match_server/Match.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;save_client/Save.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/concurrency/ThreadManager.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/concurrency/ThreadFactory.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/protocol/TBinaryProtocol.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/server/TSimpleServer.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/server/TThreadedServer.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/transport/TServerSocket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/transport/TBufferTransports.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/transport/TTransportUtils.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/transport/TSocket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/TToString.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;condition_variable&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::apache::thrift;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::apache::thrift::protocol;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::apache::thrift::transport;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::apache::thrift::server;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::match_service;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::save_service;  <span class=\"comment\">// 注意加上save_client端的命名空间</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Task</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    User user;</span><br><span class=\"line\">    string type;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MessageQueue</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    queue&lt;Task&gt; q;</span><br><span class=\"line\">    mutex m;</span><br><span class=\"line\">    condition_variable cv;</span><br><span class=\"line\">&#125;message_queue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Pool</span>  <span class=\"comment\">// 玩家匹配池</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">save_result</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// do save task</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">match</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// do match task</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(User user)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            users.<span class=\"built_in\">push_back</span>(user);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">remove</span><span class=\"params\">(User user)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; users.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (users[i].id == user.id)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    users.<span class=\"built_in\">erase</span>(users.<span class=\"built_in\">begin</span>() + i);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        vector&lt;User&gt; users;</span><br><span class=\"line\">&#125;pool;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MatchHandler</span> : <span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> MatchIf &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"built_in\">MatchHandler</span>() &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Your initialization goes here</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int32_t</span> <span class=\"title\">add_user</span><span class=\"params\">(<span class=\"type\">const</span> User&amp; user, <span class=\"type\">const</span> std::string&amp; info)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// Your implementation goes here</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;add_user\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lck</span><span class=\"params\">(message_queue.m)</span></span>;  <span class=\"comment\">// 当lck变量消失即函数结束后锁会自动释放</span></span><br><span class=\"line\">            message_queue.q.<span class=\"built_in\">push</span>(&#123; user, <span class=\"string\">&quot;add&quot;</span> &#125;);</span><br><span class=\"line\">            message_queue.cv.<span class=\"built_in\">notify_all</span>();  <span class=\"comment\">// 唤醒条件变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int32_t</span> <span class=\"title\">remove_user</span><span class=\"params\">(<span class=\"type\">const</span> User&amp; user, <span class=\"type\">const</span> std::string&amp; info)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// Your implementation goes here</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;remove_user\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lck</span><span class=\"params\">(message_queue.m)</span></span>;</span><br><span class=\"line\">            message_queue.q.<span class=\"built_in\">push</span>(&#123; user, <span class=\"string\">&quot;remove&quot;</span> &#125;);</span><br><span class=\"line\">            message_queue.cv.<span class=\"built_in\">notify_all</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MatchCloneFactory</span> : <span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> MatchIfFactory &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        ~<span class=\"built_in\">MatchCloneFactory</span>() <span class=\"keyword\">override</span> = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">        <span class=\"function\">MatchIf* <span class=\"title\">getHandler</span><span class=\"params\">(<span class=\"type\">const</span> ::apache::thrift::TConnectionInfo&amp; connInfo)</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            std::shared_ptr&lt;TSocket&gt; sock = std::<span class=\"built_in\">dynamic_pointer_cast</span>&lt;TSocket&gt;(connInfo.transport);</span><br><span class=\"line\">            <span class=\"comment\">/*cout &lt;&lt; &quot;Incoming connection\\n&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">            cout &lt;&lt; &quot;\\tSocketInfo: &quot;  &lt;&lt; sock-&gt;getSocketInfo() &lt;&lt; &quot;\\n&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">            cout &lt;&lt; &quot;\\tPeerHost: &quot;    &lt;&lt; sock-&gt;getPeerHost() &lt;&lt; &quot;\\n&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">            cout &lt;&lt; &quot;\\tPeerAddress: &quot; &lt;&lt; sock-&gt;getPeerAddress() &lt;&lt; &quot;\\n&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">            cout &lt;&lt; &quot;\\tPeerPort: &quot;    &lt;&lt; sock-&gt;getPeerPort() &lt;&lt; &quot;\\n&quot;;*/</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MatchHandler;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">releaseHandler</span><span class=\"params\">(MatchIf* handler)</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> handler;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">consume_task</span><span class=\"params\">()</span>  <span class=\"comment\">// 消费者模型</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lck</span><span class=\"params\">(message_queue.m)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message_queue.q.<span class=\"built_in\">empty</span>())  <span class=\"comment\">// 如果消息队列为空则应该先阻塞，而不能一直循环</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// message_queue.cv.wait(lck);  // 先将锁释放，然后卡住，直到在其他地方将这个条件变量唤醒</span></span><br><span class=\"line\">            lck.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">            pool.<span class=\"built_in\">match</span>();</span><br><span class=\"line\">            <span class=\"built_in\">sleep</span>(<span class=\"number\">1</span>);  <span class=\"comment\">// 每秒匹配一次</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> task = message_queue.q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            message_queue.q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            lck.<span class=\"built_in\">unlock</span>();  <span class=\"comment\">// 尽早解锁，若等处理完task再解锁就等待时间太长了</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// do task</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (task.type == <span class=\"string\">&quot;add&quot;</span>) pool.<span class=\"built_in\">add</span>(task.user);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (task.type == <span class=\"string\">&quot;remove&quot;</span>) pool.<span class=\"built_in\">remove</span>(task.user);</span><br><span class=\"line\"></span><br><span class=\"line\">            pool.<span class=\"built_in\">match</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">TThreadedServer <span class=\"title\">server</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            std::make_shared&lt;MatchProcessorFactory&gt;(std::make_shared&lt;MatchCloneFactory&gt;()),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            std::make_shared&lt;TServerSocket&gt;(<span class=\"number\">9090</span>), <span class=\"comment\">//port</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            std::make_shared&lt;TBufferedTransportFactory&gt;(),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            std::make_shared&lt;TBinaryProtocolFactory&gt;())</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Start Match Server\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">thread <span class=\"title\">matching_thread</span><span class=\"params\">(consume_task)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    server.<span class=\"built_in\">serve</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-7-match-server-v5-0实现\">2.7 match_server_v5.0实现</h3>\n<p>通过对匹配机制的修改，实现玩家每等待一秒钟，匹配的分数区间扩大50分，修改后的 <code>main.cpp</code> 代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This autogenerated skeleton file illustrates how to build a server.</span></span><br><span class=\"line\"><span class=\"comment\">// You should copy it to another filename to avoid overwriting it.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;match_server/Match.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;save_client/Save.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/concurrency/ThreadManager.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/concurrency/ThreadFactory.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/protocol/TBinaryProtocol.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/server/TSimpleServer.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/server/TThreadedServer.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/transport/TServerSocket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/transport/TBufferTransports.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/transport/TTransportUtils.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/transport/TSocket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thrift/TToString.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;condition_variable&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::apache::thrift;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::apache::thrift::protocol;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::apache::thrift::transport;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::apache::thrift::server;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::match_service;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ::save_service;  <span class=\"comment\">// 注意加上save_client端的命名空间</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Task</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    User user;</span><br><span class=\"line\">    string type;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MessageQueue</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    queue&lt;Task&gt; q;</span><br><span class=\"line\">    mutex m;</span><br><span class=\"line\">    condition_variable cv;</span><br><span class=\"line\">&#125;message_queue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Pool</span>  <span class=\"comment\">// 玩家匹配池</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">save_result</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Match result: %d %d\\n&quot;</span>, a, b);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\">std::shared_ptr&lt;TTransport&gt; <span class=\"title\">socket</span><span class=\"params\">(<span class=\"keyword\">new</span> TSocket(<span class=\"string\">&quot;123.57.47.211&quot;</span>, <span class=\"number\">9090</span>))</span></span>;</span><br><span class=\"line\">            <span class=\"function\">std::shared_ptr&lt;TTransport&gt; <span class=\"title\">transport</span><span class=\"params\">(<span class=\"keyword\">new</span> TBufferedTransport(socket))</span></span>;</span><br><span class=\"line\">            <span class=\"function\">std::shared_ptr&lt;TProtocol&gt; <span class=\"title\">protocol</span><span class=\"params\">(<span class=\"keyword\">new</span> TBinaryProtocol(transport))</span></span>;</span><br><span class=\"line\">            <span class=\"function\">SaveClient <span class=\"title\">client</span><span class=\"params\">(protocol)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                transport-&gt;<span class=\"built_in\">open</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">int</span> res = client.<span class=\"built_in\">save_data</span>(<span class=\"string\">&quot;acs_2077&quot;</span>, <span class=\"string\">&quot;4503f06d&quot;</span>, a, b);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!res) <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Success&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Failed&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                transport-&gt;<span class=\"built_in\">close</span>();</span><br><span class=\"line\">            &#125; <span class=\"built_in\">catch</span> (TException&amp; tx) &#123;</span><br><span class=\"line\">                cout &lt;&lt; <span class=\"string\">&quot;ERROR: &quot;</span> &lt;&lt; tx.<span class=\"built_in\">what</span>() &lt;&lt; endl;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check_match</span><span class=\"params\">(<span class=\"type\">uint32_t</span> i, <span class=\"type\">uint32_t</span> j)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> a = users[i], b = users[j];</span><br><span class=\"line\">            <span class=\"type\">int</span> dt = <span class=\"built_in\">abs</span>(a.score - b.score);</span><br><span class=\"line\">            <span class=\"type\">int</span> a_max_dif = wt[i] * <span class=\"number\">50</span>, b_max_dif = wt[j] * <span class=\"number\">50</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dt &lt;= a_max_dif &amp;&amp; dt &lt;= b_max_dif;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">match</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; wt.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">                wt[i]++;  <span class=\"comment\">// 表示等待秒数+1</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (users.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">bool</span> flag = <span class=\"literal\">true</span>;  <span class=\"comment\">// 防止玩家之间分数差距都很大导致死循环</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; users.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">uint32_t</span> j = i + <span class=\"number\">1</span>; j &lt; users.<span class=\"built_in\">size</span>(); j++)</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (<span class=\"built_in\">check_match</span>(i, j))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">auto</span> a = users[i], b = users[j];</span><br><span class=\"line\">                            users.<span class=\"built_in\">erase</span>(users.<span class=\"built_in\">begin</span>() + j);  <span class=\"comment\">// 先删后面的再删前面的</span></span><br><span class=\"line\">                            users.<span class=\"built_in\">erase</span>(users.<span class=\"built_in\">begin</span>() + i);</span><br><span class=\"line\">                            wt.<span class=\"built_in\">erase</span>(wt.<span class=\"built_in\">begin</span>() + j);</span><br><span class=\"line\">                            wt.<span class=\"built_in\">erase</span>(wt.<span class=\"built_in\">begin</span>() + i);</span><br><span class=\"line\">                            <span class=\"built_in\">save_result</span>(a.id, b.id);</span><br><span class=\"line\">                            flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!flag) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (flag) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(User user)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            users.<span class=\"built_in\">push_back</span>(user);</span><br><span class=\"line\">            wt.<span class=\"built_in\">push_back</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">remove</span><span class=\"params\">(User user)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">uint32_t</span> i = <span class=\"number\">0</span>; i &lt; users.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (users[i].id == user.id)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    users.<span class=\"built_in\">erase</span>(users.<span class=\"built_in\">begin</span>() + i);</span><br><span class=\"line\">                    wt.<span class=\"built_in\">erase</span>(wt.<span class=\"built_in\">begin</span>() + i);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        vector&lt;User&gt; users;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; wt;  <span class=\"comment\">// 表示玩家的waiting time</span></span><br><span class=\"line\">&#125;pool;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MatchHandler</span> : <span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> MatchIf &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"built_in\">MatchHandler</span>() &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Your initialization goes here</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int32_t</span> <span class=\"title\">add_user</span><span class=\"params\">(<span class=\"type\">const</span> User&amp; user, <span class=\"type\">const</span> std::string&amp; info)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// Your implementation goes here</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;add_user\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lck</span><span class=\"params\">(message_queue.m)</span></span>;  <span class=\"comment\">// 当lck变量消失即函数结束后锁会自动释放</span></span><br><span class=\"line\">            message_queue.q.<span class=\"built_in\">push</span>(&#123; user, <span class=\"string\">&quot;add&quot;</span> &#125;);</span><br><span class=\"line\">            message_queue.cv.<span class=\"built_in\">notify_all</span>();  <span class=\"comment\">// 唤醒条件变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int32_t</span> <span class=\"title\">remove_user</span><span class=\"params\">(<span class=\"type\">const</span> User&amp; user, <span class=\"type\">const</span> std::string&amp; info)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// Your implementation goes here</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;remove_user\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lck</span><span class=\"params\">(message_queue.m)</span></span>;</span><br><span class=\"line\">            message_queue.q.<span class=\"built_in\">push</span>(&#123; user, <span class=\"string\">&quot;remove&quot;</span> &#125;);</span><br><span class=\"line\">            message_queue.cv.<span class=\"built_in\">notify_all</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MatchCloneFactory</span> : <span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> MatchIfFactory &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        ~<span class=\"built_in\">MatchCloneFactory</span>() <span class=\"keyword\">override</span> = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">        <span class=\"function\">MatchIf* <span class=\"title\">getHandler</span><span class=\"params\">(<span class=\"type\">const</span> ::apache::thrift::TConnectionInfo&amp; connInfo)</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            std::shared_ptr&lt;TSocket&gt; sock = std::<span class=\"built_in\">dynamic_pointer_cast</span>&lt;TSocket&gt;(connInfo.transport);</span><br><span class=\"line\">            <span class=\"comment\">/*cout &lt;&lt; &quot;Incoming connection\\n&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">            cout &lt;&lt; &quot;\\tSocketInfo: &quot;  &lt;&lt; sock-&gt;getSocketInfo() &lt;&lt; &quot;\\n&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">            cout &lt;&lt; &quot;\\tPeerHost: &quot;    &lt;&lt; sock-&gt;getPeerHost() &lt;&lt; &quot;\\n&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">            cout &lt;&lt; &quot;\\tPeerAddress: &quot; &lt;&lt; sock-&gt;getPeerAddress() &lt;&lt; &quot;\\n&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">            cout &lt;&lt; &quot;\\tPeerPort: &quot;    &lt;&lt; sock-&gt;getPeerPort() &lt;&lt; &quot;\\n&quot;;*/</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MatchHandler;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">releaseHandler</span><span class=\"params\">(MatchIf* handler)</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> handler;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">consume_task</span><span class=\"params\">()</span>  <span class=\"comment\">// 消费者模型</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lck</span><span class=\"params\">(message_queue.m)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (message_queue.q.<span class=\"built_in\">empty</span>())  <span class=\"comment\">// 如果消息队列为空则应该先阻塞，而不能一直循环</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// message_queue.cv.wait(lck);  // 先将锁释放，然后卡住，直到在其他地方将这个条件变量唤醒</span></span><br><span class=\"line\">            lck.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">            pool.<span class=\"built_in\">match</span>();</span><br><span class=\"line\">            <span class=\"built_in\">sleep</span>(<span class=\"number\">1</span>);  <span class=\"comment\">// 每秒匹配一次</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> task = message_queue.q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            message_queue.q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            lck.<span class=\"built_in\">unlock</span>();  <span class=\"comment\">// 尽早解锁，若等处理完task再解锁就等待时间太长了</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// do task</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (task.type == <span class=\"string\">&quot;add&quot;</span>) pool.<span class=\"built_in\">add</span>(task.user);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (task.type == <span class=\"string\">&quot;remove&quot;</span>) pool.<span class=\"built_in\">remove</span>(task.user);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">TThreadedServer <span class=\"title\">server</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            std::make_shared&lt;MatchProcessorFactory&gt;(std::make_shared&lt;MatchCloneFactory&gt;()),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            std::make_shared&lt;TServerSocket&gt;(<span class=\"number\">9090</span>), <span class=\"comment\">//port</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            std::make_shared&lt;TBufferedTransportFactory&gt;(),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">            std::make_shared&lt;TBinaryProtocolFactory&gt;())</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Start Match Server\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">thread <span class=\"title\">matching_thread</span><span class=\"params\">(consume_task)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    server.<span class=\"built_in\">serve</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上一章：<a href=\"/posts/20491.html\">Linux学习笔记-SSH与Git</a>。</p>\n<p>下一章：<a href=\"/posts/63179.html\">Linux学习笔记-管道、环境变量与Docker</a>。</p>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://asanosaki.github.io/posts/20491.html",
            "url": "https://asanosaki.github.io/posts/20491.html",
            "title": "Linux学习笔记-SSH与Git",
            "date_published": "2022-04-30T05:56:00.000Z",
            "content_html": "<blockquote>\n<p>本文记录 Linux 的学习过程，内容为 SSH 与 Git。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"1-SSH\">1. SSH</h2>\n<h3 id=\"1-1-SSH登录\">1.1 SSH登录</h3>\n<p>（1）基本用法：</p>\n<p>如果是 Ubuntu 的裸环境需要先安装 SSH：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install openssh-server</span><br></pre></td></tr></table></figure>\n<p>安装完成后，SSH 服务默认自动启动，你可以通过以下命令校验服务运行状态：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status ssh</span><br></pre></td></tr></table></figure>\n<p>重启 SSH 服务：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service ssh restart</span><br></pre></td></tr></table></figure>\n<p>远程登录服务器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh user@hostname</span><br><span class=\"line\"></span><br><span class=\"line\">user: 用户名</span><br><span class=\"line\">hostname: IP地址或域名</span><br></pre></td></tr></table></figure>\n<p>第一次登录时会提示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The authenticity of host &#x27;123.57.47.211 (123.57.47.211)&#x27; can&#x27;t be established.</span><br><span class=\"line\">ECDSA key fingerprint is SHA256:iy237yysfCe013/l+kpDGfEG9xxHxm0dnxnAbJTPpG8.</span><br><span class=\"line\">Are you sure you want to continue connecting (yes/no/[fingerprint])?</span><br></pre></td></tr></table></figure>\n<p>输入 <code>yes</code>，然后回车即可。这样会将该服务器的信息记录在 <code>~/.ssh/known_hosts</code> 文件中。然后输入密码即可登录到远程服务器中。</p>\n<p>默认登录端口号为 <code>22</code>。如果想登录某一特定端口可以加参数 <code>-p</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh user@hostname -p 22</span><br></pre></td></tr></table></figure>\n<p>（2）配置文件：</p>\n<p>创建文件 <code>~/.ssh/config</code>。</p>\n<p>然后在文件中输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host myserver1</span><br><span class=\"line\">    HostName IP地址或域名</span><br><span class=\"line\">    User 用户名</span><br><span class=\"line\"></span><br><span class=\"line\">Host myserver2</span><br><span class=\"line\">    HostName IP地址或域名</span><br><span class=\"line\">    User 用户名</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host myserver1</span><br><span class=\"line\">    HostName 123.57.47.211</span><br><span class=\"line\">    User acs_2077</span><br></pre></td></tr></table></figure>\n<p>之后再使用服务器时，可以直接使用别名 <code>myserver1</code>、<code>myserver2</code>。</p>\n<p>（3）配置公钥免密登录：</p>\n<p>创建密钥：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br></pre></td></tr></table></figure>\n<p>然后一直回车即可，执行结束后，在 <code>~/.ssh/</code> 目录下会多两个文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id_rsa：私钥</span><br><span class=\"line\">id_rsa.pub：公钥</span><br></pre></td></tr></table></figure>\n<p>之后想免密码登录哪个服务器，就将公钥传给哪个服务器即可。</p>\n<p>例如，想免密登录 <code>myserver</code> 服务器。则将公钥中的内容，复制到 <code>myserver</code> 中的 <code>~/.ssh/authorized_keys</code> 文件里即可。</p>\n<p>也可以使用如下命令一键添加公钥：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id myserver</span><br></pre></td></tr></table></figure>\n<p>（4）执行命令：</p>\n<p>命令格式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh user@hostname command</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh user@hostname ls -a</span><br></pre></td></tr></table></figure>\n<p>或者：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">单引号中的<span class=\"variable\">$i</span>可以求值</span></span><br><span class=\"line\">ssh myserver &#x27;for ((i = 0; i &lt; 10; i ++ )) do echo $i; done&#x27;</span><br></pre></td></tr></table></figure>\n<p>或者：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">双引号中的<span class=\"variable\">$i</span>不可以求值</span></span><br><span class=\"line\">ssh myserver &quot;for ((i = 0; i &lt; 10; i ++ )) do echo $i; done&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2-SCP远程拷贝文件\">1.2 SCP远程拷贝文件</h2>\n<p>命令格式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp source destination</span><br></pre></td></tr></table></figure>\n<p>功能：将 <code>source</code> 路径下的文件复制到 <code>destination</code> 中。</p>\n<p>一次复制多个文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp source1 source2 destination</span><br></pre></td></tr></table></figure>\n<p>复制文件夹（将本地家目录中的 <code>tmp</code> 文件夹复制到 <code>myserver</code> 服务器中的 <code>/home/acs/</code> 目录下）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r ~/tmp myserver:/home/acs/</span><br></pre></td></tr></table></figure>\n<p>将本地家目录中的 <code>tmp</code> 文件夹复制到 <code>myserver</code> 服务器中的 <code>~/homework/</code> 目录下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r ~/tmp myserver:homework/</span><br></pre></td></tr></table></figure>\n<p>将 <code>myserver</code> 服务器中的 <code>~/homework/</code> 文件夹复制到本地的当前路径下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r myserver:homework .</span><br></pre></td></tr></table></figure>\n<p>指定服务器的端口号：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -P 22 source1 source2 destination</span><br></pre></td></tr></table></figure>\n<p>注意：<code>scp</code> 的 <code>-r -P</code> 等参数尽量加在 <code>source</code> 和 <code>destination</code> 之前。</p>\n<p>使用 <code>scp</code> 配置其他服务器的 <code>vim</code> 和 <code>tmux</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp ~/.vimrc ~/.tmux.conf myserver:</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-Git\">2. Git</h2>\n<h3 id=\"2-1-Git基本概念\">2.1 Git基本概念</h3>\n<ul>\n<li>工作区：仓库的目录。工作区是独立于各个分支的。</li>\n<li>暂存区：数据暂时存放的区域，类似于工作区写入版本库前的缓存区。暂存区是独立于各个分支的。</li>\n<li>版本库：存放所有已经提交到本地仓库的代码版本</li>\n<li>版本结构：树结构，树中每个节点代表一个代码版本。</li>\n</ul>\n<h3 id=\"2-2-Git常用命令\">2.2 Git常用命令</h3>\n<ul>\n<li><code>git config --global user.name xxx</code>：设置全局用户名，信息记录在 <code>~/.gitconfig</code> 文件中。</li>\n<li><code>git config --global user.email xxx@xxx.com</code>：设置全局邮箱地址，信息记录在 <code>~/.gitconfig</code> 文件中。</li>\n<li><code>git init</code>：将当前目录配置成 Git 仓库，信息记录在隐藏的 <code>.git</code> 文件夹中。</li>\n<li><code>git add XX</code>：将 XX 文件添加到暂存区。\n<ul>\n<li><code>git add .</code>：将所有待加入暂存区的文件加入暂存区。</li>\n</ul>\n</li>\n<li><code>git rm --cached XX</code>：将文件从仓库索引目录中删掉。</li>\n<li><code>git commit -m &quot;给自己看的备注信息&quot;</code>：将暂存区的内容提交到当前分支。</li>\n<li><code>git status</code>：查看仓库状态。</li>\n<li><code>git diff XX</code>：查看 XX 文件相对于暂存区修改了哪些内容。</li>\n<li><code>git log</code>：查看当前分支的所有版本。\n<ul>\n<li><code>git log --pretty=oneline</code>：每个版本用一行显示。</li>\n</ul>\n</li>\n<li><code>git reflog</code>：查看HEAD指针的移动历史（包括被回滚的版本）。</li>\n<li><code>git reset --hard HEAD^</code> 或 <code>git reset --hard HEAD~</code>：将代码库回滚到上一个版本。\n<ul>\n<li><code>git reset --hard HEAD^^</code>：往上回滚两次，以此类推。</li>\n<li><code>git reset --hard HEAD~100</code>：往上回滚100个版本。</li>\n<li><code>git reset --hard 版本号</code>：回滚到某一特定版本。</li>\n</ul>\n</li>\n<li><code>git checkout -- XX</code> 或 <code>git restore XX</code>：将 XX 文件尚未加入暂存区的修改全部撤销。</li>\n<li><code>git restore --staged XX</code>：将 XX 文件从暂存区撤出，不会更改文件的内容。</li>\n<li><code>git remote add origin git@git.acwing.com:xxx/XXX.git</code>：将本地仓库关联到远程仓库。</li>\n<li><code>git remote -v</code>：查看当前 Git 仓库有没有关联远程仓库，如果已经有关联则会显示具体远程仓库路径，如果没有返回，说明没有关联任何远程仓库。</li>\n<li><code>git remote rm XXX</code>：解除与远程仓库的关联，例如：<code>git remote rm origin</code>。</li>\n<li><code>git push -u (第一次需要-u以后不需要)</code>：将当前分支推送到远程仓库。\n<ul>\n<li><code>git push origin branch_name</code>：将本地的某个分支推送到远程仓库。</li>\n</ul>\n</li>\n<li><code>git clone git@git.acwing.com:xxx/XXX.git</code>：将远程仓库 XXX 下载到当前目录下。</li>\n<li><code>git checkout -b branch_name</code>：创建并切换到 <code>branch_name</code> 这个分支。</li>\n<li><code>git branch</code>：查看所有分支和当前所处分支。</li>\n<li><code>git checkout branch_name</code>：切换到 <code>branch_name</code> 这个分支。</li>\n<li><code>git merge branch_name</code>：将分支 <code>branch_name</code> 合并到当前分支上。</li>\n<li><code>git branch -d branch_name</code>：删除本地仓库的 <code>branch_name</code> 分支。</li>\n<li><code>git branch branch_name</code>：创建新分支 <code>branch_name</code>。</li>\n<li><code>git push --set-upstream origin branch_name</code>：设置本地的 <code>branch_name</code> 分支对应远程仓库的 <code>branch_name</code> 分支。</li>\n<li><code>git push -d origin branch_name</code>：删除远程仓库的 <code>branch_name</code> 分支。</li>\n<li><code>git pull</code>：将远程仓库的当前分支与本地仓库的当前分支合并。\n<ul>\n<li><code>git pull origin branch_name</code>：将远程仓库的 <code>branch_name</code> 分支与本地仓库的当前分支合并。</li>\n</ul>\n</li>\n<li><code>git branch --set-upstream-to=origin/branch_name1 branch_name2</code>：将远程的 <code>branch_name1</code> 分支与本地的 <code>branch_name2</code> 分支对应。</li>\n<li><code>git checkout -t origin/branch_name</code>：将远程的 <code>branch_name</code> 分支拉取到本地。</li>\n<li><code>git stash</code>：将工作区和暂存区中尚未提交的修改存入栈中。</li>\n<li><code>git stash apply</code>：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素。</li>\n<li><code>git stash drop</code>：删除栈顶存储的修改。</li>\n<li><code>git stash pop</code>：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素。</li>\n<li><code>git stash list</code>：查看栈中所有元素。</li>\n</ul>\n<p>上一章：<a href=\"/posts/31281.html\">Linux学习笔记-Shell</a>。</p>\n<p>下一章：<a href=\"/posts/20905.html\">Linux学习笔记-Thrift</a>。</p>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://asanosaki.github.io/posts/31281.html",
            "url": "https://asanosaki.github.io/posts/31281.html",
            "title": "Linux学习笔记-Shell",
            "date_published": "2022-03-17T01:39:00.000Z",
            "content_html": "<blockquote>\n<p>本文记录 Linux 的学习过程，内容为 Shell 命令语言。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"1-Shell-概论\">1. Shell 概论</h2>\n<p>Shell 是我们通过命令行与操作系统沟通的语言。</p>\n<p>Shell 脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用。</p>\n<p>Linux 中常见的 Shell 脚本有很多种，常见的有：</p>\n<ul>\n<li>Bourne Shell（<code>/usr/bin/sh</code> 或 <code>/bin/sh</code>）</li>\n<li>Bourne Again Shell（<code>/bin/bash</code>）</li>\n<li>C Shell（<code>/usr/bin/csh</code>）</li>\n<li>K Shell（<code>/usr/bin/ksh</code>）</li>\n<li>zsh</li>\n<li>…</li>\n</ul>\n<p>Linux 系统中一般默认使用 bash，所以接下来讲解 bash 中的语法。</p>\n<p>文件开头需要写 <code>#! /bin/bash</code>，指明 bash 为脚本解释器。</p>\n<p>新建一个 <code>test.sh</code> 文件，内容如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">! /bin/bash</span></span><br><span class=\"line\">echo &quot;Hello World!&quot;</span><br></pre></td></tr></table></figure>\n<p>运行方式：</p>\n<p>（1）作为可执行文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">acs@9e0ebfcd82d7:~$ chmod +x test.sh  # 使脚本具有可执行权限</span><br><span class=\"line\">acs@9e0ebfcd82d7:~$ ./test.sh  # 当前路径下执行</span><br><span class=\"line\">Hello World!  # 脚本输出</span><br><span class=\"line\">acs@9e0ebfcd82d7:~$ /home/acs/test.sh  # 绝对路径下执行</span><br><span class=\"line\">Hello World!  # 脚本输出</span><br><span class=\"line\">acs@9e0ebfcd82d7:~$ ~/test.sh  # 家目录路径下执行</span><br><span class=\"line\">Hello World!  # 脚本输出</span><br></pre></td></tr></table></figure>\n<p>（2）用解释器执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">acs@9e0ebfcd82d7:~$ bash test.sh</span><br><span class=\"line\">Hello World!  # 脚本输出</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-注释\">2. 注释</h2>\n<p>（1）单行注释</p>\n<p>每行中 <code>#</code> 之后的内容均是注释：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这是一行注释</span></span><br><span class=\"line\"></span><br><span class=\"line\">echo &#x27;Hello World&#x27;  #  这也是注释</span><br></pre></td></tr></table></figure>\n<p>（2）多行注释</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:&lt;&lt;EOF</span><br><span class=\"line\">第一行注释</span><br><span class=\"line\">第二行注释</span><br><span class=\"line\">第三行注释</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p>其中 <code>EOF</code> 可以换成其它任意字符串，例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:&lt;&lt;abc</span><br><span class=\"line\">第一行注释</span><br><span class=\"line\">第二行注释</span><br><span class=\"line\">第三行注释</span><br><span class=\"line\">abc</span><br><span class=\"line\"></span><br><span class=\"line\">:&lt;&lt;orz</span><br><span class=\"line\">第一行注释</span><br><span class=\"line\">第二行注释</span><br><span class=\"line\">第三行注释</span><br><span class=\"line\">orz</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-变量\">3. 变量</h2>\n<h3 id=\"3-1-定义变量\">3.1 定义变量</h3>\n<p>定义变量不需要加 <code>$</code> 符号，例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name1=&#x27;yxc&#x27;  # 单引号定义字符串</span><br><span class=\"line\">name2=&quot;yxc&quot;  # 双引号定义字符串</span><br><span class=\"line\">name3=yxc    # 也可以不加引号，同样表示字符串</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-使用变量\">3.2 使用变量</h3>\n<p>使用变量，需要加上 <code>$</code> 符号，或者 <code>$&#123;&#125;</code> 符号。花括号是可选的，主要为了帮助解释器识别变量边界。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=yxc</span><br><span class=\"line\">echo $name  # 输出yxc</span><br><span class=\"line\">echo $&#123;name&#125;  # 输出yxc</span><br><span class=\"line\">echo $&#123;name&#125;acwing  # 输出yxcacwing</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-只读变量\">3.3 只读变量</h3>\n<p>使用 <code>readonly</code> 或者 <code>declare</code> 可以将变量变为只读。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=yxc</span><br><span class=\"line\">readonly name</span><br><span class=\"line\">declare -r name  # 两种写法均可</span><br><span class=\"line\"></span><br><span class=\"line\">name=abc  # 会报错，因为此时name只读</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-4-删除变量\">3.4 删除变量</h3>\n<p><code>unset</code> 可以删除变量。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=yxc</span><br><span class=\"line\">unset name</span><br><span class=\"line\">echo $name  # 输出空行</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-5-变量类型\">3.5 变量类型</h3>\n<ul>\n<li>自定义变量（局部变量）：子进程不能访问的变量。</li>\n<li>环境变量（全局变量）：子进程可以访问的变量。</li>\n</ul>\n<p>自定义变量改成环境变量：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">acs@9e0ebfcd82d7:~$ name=AsanoSaki  # 定义变量</span><br><span class=\"line\">acs@9e0ebfcd82d7:~$ export name  # 第一种方法</span><br><span class=\"line\">acs@9e0ebfcd82d7:~$ declare -x name  # 第二种方法</span><br></pre></td></tr></table></figure>\n<p>环境变量改为自定义变量：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">acs@9e0ebfcd82d7:~$ export name=AsanoSaki  # 定义环境变量</span><br><span class=\"line\">acs@9e0ebfcd82d7:~$ declare +x name  # 改为自定义变量</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-6-字符串\">3.6 字符串</h3>\n<p>字符串可以用单引号，也可以用双引号，也可以不用引号，不用引号与双引号是一样的。</p>\n<p>单引号与双引号的区别：</p>\n<ul>\n<li>单引号中的内容会原样输出，不会执行、不会取变量。</li>\n<li>双引号中的内容可以执行、可以取变量。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=yxc  # 不用引号</span><br><span class=\"line\">echo &#x27;hello, $name \\&quot;hh\\&quot;&#x27;  # 单引号字符串，输出 hello, $name \\&quot;hh\\&quot;</span><br><span class=\"line\">echo &quot;hello, $name \\&quot;hh\\&quot;&quot;  # 双引号字符串，输出 hello, yxc &quot;hh&quot;</span><br></pre></td></tr></table></figure>\n<p>获取字符串长度：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=&quot;yxc&quot;</span><br><span class=\"line\">echo $&#123;#name&#125;  # 输出3</span><br></pre></td></tr></table></figure>\n<p>提取子串：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=&quot;hello, yxc&quot;</span><br><span class=\"line\">echo $&#123;name:0:5&#125;  # 提取从0开始的5个字符</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-默认变量\">4. 默认变量</h2>\n<h3 id=\"4-1-文件参数变量\">4.1 文件参数变量</h3>\n<p>在执行 Shell 脚本时，可以向脚本传递参数。<code>$1</code> 是第一个参数，<code>$2</code> 是第二个参数，以此类推。特殊的，<code>$0</code> 是文件名（包含路径）。例如：</p>\n<p>创建文件 <code>test.sh</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">! /bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;文件名：&quot;$0</span><br><span class=\"line\">echo &quot;第一个参数：&quot;$1</span><br><span class=\"line\">echo &quot;第二个参数：&quot;$2</span><br><span class=\"line\">echo &quot;第三个参数：&quot;$3</span><br><span class=\"line\">echo &quot;第四个参数：&quot;$4</span><br></pre></td></tr></table></figure>\n<p>然后执行该脚本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">acs@9e0ebfcd82d7:~$ chmod +x test.sh </span><br><span class=\"line\">acs@9e0ebfcd82d7:~$ ./test.sh 1 2 3 4</span><br><span class=\"line\"></span><br><span class=\"line\">文件名：./test.sh</span><br><span class=\"line\">第一个参数：1</span><br><span class=\"line\">第二个参数：2</span><br><span class=\"line\">第三个参数：3</span><br><span class=\"line\">第四个参数：4</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-其它参数相关变量\">4.2 其它参数相关变量</h3>\n<ul>\n<li><code>$#</code>：代表文件传入的参数个数，如上例中值为4。</li>\n<li><code>$*</code>：由所有参数构成的用空格隔开的字符串，如上例中值为 <code>&quot;$1 $2 $3 $4&quot;</code>。</li>\n<li><code>$@</code>：每个参数分别用双引号括起来的字符串，如上例中值为 <code>&quot;$1&quot; &quot;$2&quot; &quot;$3&quot; &quot;$4&quot;</code>。</li>\n<li><code>$$</code>：脚本当前运行的进程 ID。</li>\n<li><code>$?</code>：上一条命令的退出状态（注意不是 <code>stdout</code>，而是 <code>exit code</code>）。0表示正常退出，其他值表示错误。</li>\n<li><code>$(command)</code>：返回 <code>command</code> 这条命令的 <code>stdout</code>（可嵌套）</li>\n<li><strong>`command`</strong>：返回 <code>command</code> 这条命令的 <code>stdout</code>（不可嵌套）。注意是 <code>~</code> 下面的那个点号。</li>\n</ul>\n<h2 id=\"5-数组\">5. 数组</h2>\n<p>数组中可以存放多个<strong>不同类型</strong>的值，只支持一维数组，初始化时不需要指明数组大小，数组下标从0开始。</p>\n<h3 id=\"5-1-数组定义\">5.1 数组定义</h3>\n<p>数组用小括号表示，元素之间用空格隔开。例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array=(1 abc &quot;def&quot; AsanoSaki)</span><br></pre></td></tr></table></figure>\n<p>也可以直接定义数组中某个元素的值：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array[0]=1</span><br><span class=\"line\">array[1]=abc</span><br><span class=\"line\">array[2]=&quot;def&quot;</span><br><span class=\"line\">array[3]=yxc</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-2-读取数组中元素的值\">5.2 读取数组中元素的值</h3>\n<p>格式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">&#123;array[index]&#125;</span></span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array=(1 abc &quot;def&quot; AsanoSaki)</span><br><span class=\"line\">echo $&#123;array[0]&#125;</span><br><span class=\"line\">echo $&#123;array[1]&#125;</span><br><span class=\"line\">echo $&#123;array[2]&#125;</span><br><span class=\"line\">echo $&#123;array[3]&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-3-读取整个数组\">5.3 读取整个数组</h3>\n<p>格式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">&#123;array[@]&#125;  <span class=\"comment\"># 第一种写法</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">&#123;array[*]&#125;  <span class=\"comment\"># 第二种写法</span></span></span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array=(1 abc &quot;def&quot; AsanoSaki)</span><br><span class=\"line\"></span><br><span class=\"line\">echo $&#123;array[@]&#125;  # 第一种写法</span><br><span class=\"line\">echo $&#123;array[*]&#125;  # 第二种写法</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-4-数组长度\">5.4 数组长度</h3>\n<p>类似于字符串：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">&#123;<span class=\"comment\">#array[@]&#125;  # 第一种写法</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">&#123;<span class=\"comment\">#array[*]&#125;  # 第二种写法</span></span></span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array=(1 abc &quot;def&quot; AsanoSaki)</span><br><span class=\"line\"></span><br><span class=\"line\">echo $&#123;#array[@]&#125;  # 第一种写法</span><br><span class=\"line\">echo $&#123;#array[*]&#125;  # 第二种写法</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-expr命令\">6. expr命令</h2>\n<p><code>expr</code> 命令用于求表达式的值，格式为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expr 表达式</span><br></pre></td></tr></table></figure>\n<p>表达式说明：</p>\n<ul>\n<li>用空格隔开每一项。</li>\n<li>用反斜杠放在 Shell 特定的字符前面（发现表达式运行错误时，可以试试转义）。</li>\n<li>对包含空格和其他特殊字符的字符串要用引号括起来。</li>\n<li><code>expr</code> 会在 <code>stdout</code> 中输出结果。如果为逻辑关系表达式，则若结果为真，<code>stdout</code> 为1，否则为0。</li>\n<li><code>expr</code> 的 <code>exit code</code>：如果为逻辑关系表达式，则若结果为真，<code>exit code</code> 为0，否则为1。</li>\n</ul>\n<h3 id=\"6-1-字符串表达式\">6.1 字符串表达式</h3>\n<ul>\n<li><code>length STRING</code>：返回 <code>STRING</code> 的长度。</li>\n<li><code>index STRING CHARSET</code>：<code>CHARSET</code> 中任意单个字符在 <code>STRING</code> 中最前面的字符位置，下标从1开始。如果在 <code>STRING</code> 中完全不存在 <code>CHARSET</code> 中的字符，则返回0。</li>\n<li><code>substr STRING POSITION LENGTH</code>：返回 <code>STRING</code> 字符串中从 <code>POSITION</code> 开始，长度最大为 <code>LENGTH</code> 的子串。如果 <code>POSITION</code> 或 <code>LENGTH</code> 为负数、0或非数值，则返回空字符串。</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str=&quot;Hello World!&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo `expr length &quot;$str&quot;`  # ``不是单引号，表示执行该命令，输出12</span><br><span class=\"line\">echo `expr index &quot;$str&quot; aWd`  # 输出7，下标从1开始</span><br><span class=\"line\">echo `expr substr &quot;$str&quot; 2 3`  # 输出 ell，下标从1开始</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-2-整数表达式\">6.2 整数表达式</h3>\n<p><code>expr</code> 支持普通的算术操作，算术表达式优先级低于字符串表达式，高于逻辑关系表达式。</p>\n<ul>\n<li><code>+ -</code>：加减运算。两端参数会转换为整数，如果转换失败则报错。</li>\n<li><code>* / %</code>：乘、除与取模运算。两端参数会转换为整数，如果转换失败则报错。注意 <code>*</code> 需要转义。</li>\n<li><code>()</code>：可以改变优先级，但需要<strong>用反斜杠转义</strong>。</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=3</span><br><span class=\"line\">b=4</span><br><span class=\"line\"></span><br><span class=\"line\">echo `expr $a + $b`  # 输出7</span><br><span class=\"line\">echo `expr $a - $b`  # 输出-1</span><br><span class=\"line\">echo `expr $a \\* $b`  # 输出12，*需要转义</span><br><span class=\"line\">echo `expr $a / $b`  # 输出0，整除</span><br><span class=\"line\">echo `expr $a % $b` # 输出3</span><br><span class=\"line\">echo `expr \\( $a + 1 \\) \\* \\( $b + 1 \\)`  # 输出20，值为(a + 1) * (b + 1)</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-3-逻辑关系表达式\">6.3 逻辑关系表达式</h3>\n<ul>\n<li><code>|</code>：如果第一个参数非空且非0，则返回第一个参数的值，否则返回第二个参数的值，但要求第二个参数的值也是非空或非0，否则返回0。如果第一个参数是非空或非0时，不会计算第二个参数。</li>\n<li><code>&amp;</code>：如果两个参数都非空且非0，则返回第一个参数，否则返回0。如果第一个参为0或为空，则不会计算第二个参数。</li>\n<li><code>&lt; &lt;= = == != &gt;= &gt;</code>：比较两端的参数，如果为 <code>true</code>，则返回1，否则返回0。<code>==</code> 是 <code>=</code> 的同义词。<code>expr</code> 首先尝试将两端参数转换为整数，并做算术比较，如果转换失败，则按字符集排序规则做字符比较。</li>\n<li><code>()</code>：可以改变优先级，但需要<strong>用反斜杠转义</strong>。</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=3</span><br><span class=\"line\">b=4</span><br><span class=\"line\"></span><br><span class=\"line\">echo `expr $a \\&gt; $b`  # 输出0，&gt;需要转义</span><br><span class=\"line\">echo `expr $a &#x27;&lt;&#x27; $b`  # 输出1，也可以将特殊字符用引号引起来</span><br><span class=\"line\">echo `expr $a &#x27;&gt;=&#x27; $b`  # 输出0</span><br><span class=\"line\">echo `expr $a \\&lt;\\= $b`  # 输出1</span><br><span class=\"line\"></span><br><span class=\"line\">c=0</span><br><span class=\"line\">d=5</span><br><span class=\"line\"></span><br><span class=\"line\">echo `expr $c \\&amp; $d`  # 输出0</span><br><span class=\"line\">echo `expr $a \\&amp; $b`  # 输出3</span><br><span class=\"line\">echo `expr $c \\| $d`  # 输出5</span><br><span class=\"line\">echo `expr $a \\| $b`  # 输出3</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-read命令\">7. read命令</h2>\n<p><code>read</code> 命令用于从标准输入中读取单行数据。当读到文件结束符时，<code>exit code</code> 为1，否则为0。</p>\n<p>参数说明：</p>\n<ul>\n<li><code>-p</code>：后面可以接提示信息。</li>\n<li><code>-t</code>：后面跟秒数，定义输入字符的等待时间，超过等待时间后会自动忽略此命令。</li>\n</ul>\n<p>实例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">acs@9e0ebfcd82d7:~$ read name  # 读入name的值</span><br><span class=\"line\">GitHub AsanoSaki  # 标准输入</span><br><span class=\"line\">acs@9e0ebfcd82d7:~$ echo $name  # 输出name的值</span><br><span class=\"line\">GitHub AsanoSaki  #标准输出</span><br><span class=\"line\">acs@9e0ebfcd82d7:~$ read -p &quot;Please input your name: &quot; -t 30 name  # 读入name的值，等待时间30秒</span><br><span class=\"line\">Please input your name: GitHub AsanoSaki  # 标准输入</span><br><span class=\"line\">acs@9e0ebfcd82d7:~$ echo $name  # 输出name的值</span><br><span class=\"line\">GitHub AsanoSaki  # 标准输出</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-echo命令\">8. echo命令</h2>\n<p><code>echo</code> 用于输出字符串。命令格式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo STRING</span><br></pre></td></tr></table></figure>\n<p>（1）显示普通字符串</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;Hello AC Terminal&quot;</span><br><span class=\"line\">echo Hello AC Terminal  # 引号可以省略</span><br></pre></td></tr></table></figure>\n<p>（2）显示转义字符</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;\\&quot;Hello AC Terminal\\&quot;&quot;  # 注意只能使用双引号，如果使用单引号，则不转义</span><br><span class=\"line\">echo \\&quot;Hello AC Terminal\\&quot;  # 也可以省略双引号</span><br></pre></td></tr></table></figure>\n<p>（3）显示变量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=AsanoSaki</span><br><span class=\"line\">echo &quot;My name is $name&quot;  # 输出 My name is AsanoSaki</span><br></pre></td></tr></table></figure>\n<p>（4）显示换行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo -e &quot;Hi\\n&quot;  # -e 开启转义</span><br><span class=\"line\">echo &quot;AsanoSaki&quot;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hi</span><br><span class=\"line\"></span><br><span class=\"line\">AsanoSaki</span><br></pre></td></tr></table></figure>\n<p>（5）显示不换行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo -e &quot;Hi \\c&quot; # -e 开启转义 \\c 不换行</span><br><span class=\"line\">echo &quot;AsanoSaki&quot;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hi AsanoSaki</span><br></pre></td></tr></table></figure>\n<p>（6）显示结果定向至文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;Hello World&quot; &gt; output.txt  # 将内容以覆盖的方式输出到output.txt中</span><br></pre></td></tr></table></figure>\n<p>（7）原样输出字符串，不进行转义或取变量（用单引号）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=acwing</span><br><span class=\"line\">echo &#x27;$name\\&quot;&#x27;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">name\\&quot;</span></span><br></pre></td></tr></table></figure>\n<p>（8）显示命令的执行结果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo `date`</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Wed Sep 1 11:45:33 CST 2021</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-printf命令\">9. printf命令</h2>\n<p><code>printf</code> 命令用于格式化输出，类似于 C/C++ 中的 <code>printf</code> 函数。默认不会在字符串末尾添加换行符。</p>\n<p>命令格式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printf format-string [arguments...]</span><br></pre></td></tr></table></figure>\n<p>脚本内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printf &quot;%10d.\\n&quot; 123  # 占10位，右对齐</span><br><span class=\"line\">printf &quot;%-10.2f.\\n&quot; 123.123321  # 占10位，保留2位小数，左对齐</span><br><span class=\"line\">printf &quot;My name is %s\\n&quot; &quot;AsanoSaki&quot;  # 格式化输出字符串</span><br><span class=\"line\">printf &quot;%d * %d = %d\\n&quot; 2 3 `expr 2 \\* 3`  # 表达式的值作为参数</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">       123.</span><br><span class=\"line\">123.12    .</span><br><span class=\"line\">My name is AsanoSaki</span><br><span class=\"line\">2 * 3 = 6</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-test命令与判断符号\">10. test命令与判断符号[]</h2>\n<h3 id=\"10-1-逻辑运算符\">10.1 逻辑运算符</h3>\n<ul>\n<li><code>&amp;&amp;</code> 表示与，<code>||</code> 表示或。</li>\n<li>二者具有短路原则：\n<ul>\n<li><code>expr1 &amp;&amp; expr2</code>：当 <code>expr1</code> 为假时，直接忽略 <code>expr2</code>。</li>\n<li><code>expr1 || expr2</code>：当 <code>expr1</code> 为真时，直接忽略 <code>expr2</code>。</li>\n</ul>\n</li>\n<li>表达式的 <code>exit code</code> 为0，表示真；为非零，表示假（与 C/C++ 中的定义相反）。</li>\n</ul>\n<h3 id=\"10-2-test命令\">10.2 test命令</h3>\n<p>在命令行中输入 <code>man test</code>，可以查看 <code>test</code> 命令的用法。</p>\n<p><code>test</code> 命令用于判断文件类型，以及对变量做比较。</p>\n<p><code>test</code> 命令用 <code>exit code</code> 返回结果，而不是使用 <code>stdout</code>。0表示真，非0表示假。</p>\n<p>例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test 2 -lt 3  # 为真，返回值为0</span><br><span class=\"line\">echo $?  # 输出上个命令的返回值，输出0</span><br><span class=\"line\">acs@9e0ebfcd82d7:~$ ls  # 列出当前目录下的所有文件</span><br><span class=\"line\">homework  output.txt  test.sh  tmp</span><br><span class=\"line\">acs@9e0ebfcd82d7:~$ test -e test.sh &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot;</span><br><span class=\"line\">exist  # test.sh 文件存在</span><br><span class=\"line\">acs@9e0ebfcd82d7:~$ test -e test2.sh &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot;</span><br><span class=\"line\">Not exist  # testh2.sh 文件不存在</span><br></pre></td></tr></table></figure>\n<p>（1）文件<strong>类型</strong>判断</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test -e filename  # 判断文件是否存在</span><br></pre></td></tr></table></figure>\n<p>其它参数如下：</p>\n<ul>\n<li><code>-e</code>：文件是否存在。</li>\n<li><code>-f</code>：是否为文件。</li>\n<li><code>-d</code>：是否为目录。</li>\n</ul>\n<p>（2）文件<strong>权限</strong>判断</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test -r filename  # 判断文件是否可读</span><br></pre></td></tr></table></figure>\n<p>其它参数如下：</p>\n<ul>\n<li><code>-r</code>：文件是否可读。</li>\n<li><code>-w</code>：文件是否可写。</li>\n<li><code>-x</code>：文件是否可执行。</li>\n<li><code>-s</code>：是否为非空文件。</li>\n</ul>\n<p>（3）整数间比较</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test $a -eq $b  # a是否等于b</span><br></pre></td></tr></table></figure>\n<p>其它参数如下：</p>\n<ul>\n<li><code>-eq</code>：<code>a</code> 是否等于 <code>b</code>。</li>\n<li><code>-ne</code>：<code>a</code> 是否不等于 <code>b</code>。</li>\n<li><code>-gt</code>：<code>a</code> 是否大于 <code>b</code>。</li>\n<li><code>-lt</code>：<code>a</code> 是否小于 <code>b</code>。</li>\n<li><code>-ge</code>：<code>a</code> 是否大于等于 <code>b</code>。</li>\n<li><code>-le</code>：<code>a</code> 是否小于等于 <code>b</code>。</li>\n</ul>\n<p>（4）字符串比较</p>\n<ul>\n<li><code>test -z STRING</code>：判断 <code>STRING</code> 是否为空，如果为空，则返回 <code>true</code>。</li>\n<li><code>test -n STRING</code>：判断 <code>STRING</code> 是否非空，如果非空，则返回 <code>true</code>（<code>-n</code> 可以省略）。</li>\n<li><code>test str1 == str2</code>：判断 <code>str1</code> 是否等于 <code>str2</code>。</li>\n<li><code>test str1 != str2</code>：判断 <code>str1</code> 是否不等于 <code>str2</code>。</li>\n</ul>\n<p>（5）多重条件判定</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test -r filename -a -x filename</span><br></pre></td></tr></table></figure>\n<p>其它参数如下：</p>\n<ul>\n<li><code>-a</code>：两条件是否同时成立。</li>\n<li><code>-o</code>：两条件是否至少一个成立。</li>\n<li><code>!</code>：取反，如 <code>test ! -x file</code>，当 <code>file</code> 不可执行时，返回 <code>true</code>。</li>\n</ul>\n<h3 id=\"10-3-判断符号\">10.3 判断符号[]</h3>\n<p><code>[]</code> 与 <code>test</code> 用法几乎一模一样，更常用于 <code>if</code> 语句中。另外 <code>[[]]</code> 是 <code>[]</code> 的加强版，支持的特性更多。</p>\n<p>例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ 2 -lt 3 ]  # 为真，返回值为0</span><br><span class=\"line\">echo $?  # 输出上个命令的返回值，输出0</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">acs@9e0ebfcd82d7:~$ ls  # 列出当前目录下的所有文件</span><br><span class=\"line\">homework  output.txt  test.sh  tmp</span><br><span class=\"line\">acs@9e0ebfcd82d7:~$ [ -e test.sh ] &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot;</span><br><span class=\"line\">exist  # test.sh 文件存在</span><br><span class=\"line\">acs@9e0ebfcd82d7:~$ [ -e test2.sh ] &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot;</span><br><span class=\"line\">Not exist  # testh2.sh 文件不存在</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li><code>[]</code> 内的每一项都要用空格隔开。</li>\n<li><code>[]</code> 内的变量，最好用双引号括起来。</li>\n<li><code>[]</code> 内的常数，最好用单或双引号括起来。</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=&quot;acwing AsanoSaki&quot;</span><br><span class=\"line\">[ $name == &quot;acwing AsanoSaki&quot; ]  # 错误，等价于 [ acwing AsanoSaki == &quot;acwing AsanoSaki&quot; ]</span><br><span class=\"line\">[ &quot;$name&quot; == &quot;acwing AsanoSaki&quot; ]  # 正确</span><br></pre></td></tr></table></figure>\n<h2 id=\"11-判断语句\">11. 判断语句</h2>\n<h3 id=\"11-1-if…then形式\">11.1 if…then形式</h3>\n<p>类似于 C/C++ 中的 <code>if-else</code> 语句。</p>\n<p>（1）单层 <code>if</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if condition</span><br><span class=\"line\">then</span><br><span class=\"line\">    语句1</span><br><span class=\"line\">    语句2</span><br><span class=\"line\">    ...</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=3</span><br><span class=\"line\">b=4</span><br><span class=\"line\"></span><br><span class=\"line\">if [ &quot;$a&quot; -lt &quot;$b&quot; ] &amp;&amp; [ &quot;$a&quot; -gt 2 ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo $&#123;a&#125;在范围内</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3在范围内</span><br></pre></td></tr></table></figure>\n<p>（2）单层 <code>if-else</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if condition</span><br><span class=\"line\">then</span><br><span class=\"line\">    语句1</span><br><span class=\"line\">    语句2</span><br><span class=\"line\">    ...</span><br><span class=\"line\">else</span><br><span class=\"line\">    语句1</span><br><span class=\"line\">    语句2</span><br><span class=\"line\">    ...</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=3</span><br><span class=\"line\">b=4</span><br><span class=\"line\"></span><br><span class=\"line\">if ! [ &quot;$a&quot; -lt &quot;$b&quot; ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo $&#123;a&#125;不小于$&#123;b&#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo $&#123;a&#125;小于$&#123;b&#125;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3小于4</span><br></pre></td></tr></table></figure>\n<p>（3）多层 <code>if-elif-elif-else</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if condition</span><br><span class=\"line\">then</span><br><span class=\"line\">    语句1</span><br><span class=\"line\">    语句2</span><br><span class=\"line\">    ...</span><br><span class=\"line\">elif condition</span><br><span class=\"line\">then</span><br><span class=\"line\">    语句1</span><br><span class=\"line\">    语句2</span><br><span class=\"line\">    ...</span><br><span class=\"line\">elif condition</span><br><span class=\"line\">then</span><br><span class=\"line\">    语句1</span><br><span class=\"line\">    语句2</span><br><span class=\"line\">else</span><br><span class=\"line\">    语句1</span><br><span class=\"line\">    语句2</span><br><span class=\"line\">    ...</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=4</span><br><span class=\"line\"></span><br><span class=\"line\">if [ $a -eq 1 ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo $&#123;a&#125;等于1</span><br><span class=\"line\">elif [ $a -eq 2 ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo $&#123;a&#125;等于2</span><br><span class=\"line\">elif [ $a -eq 3 ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo $&#123;a&#125;等于3</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo 其他</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他</span><br></pre></td></tr></table></figure>\n<h3 id=\"11-2-case…esac形式\">11.2 case…esac形式</h3>\n<p>类似于 C/C++ 中的 <code>switch</code> 语句。</p>\n<p>命令格式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case $变量名称 in</span><br><span class=\"line\">    值1)</span><br><span class=\"line\">        语句1</span><br><span class=\"line\">        语句2</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        ;;  # 类似于C/C++中的break</span><br><span class=\"line\">    值2)</span><br><span class=\"line\">        语句1</span><br><span class=\"line\">        语句2</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)  # 类似于C/C++中的default</span><br><span class=\"line\">        语句1</span><br><span class=\"line\">        语句2</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=4</span><br><span class=\"line\"></span><br><span class=\"line\">case $a in</span><br><span class=\"line\">    1)</span><br><span class=\"line\">        echo $&#123;a&#125;等于1</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    2)</span><br><span class=\"line\">        echo $&#123;a&#125;等于2</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    3)</span><br><span class=\"line\">        echo $&#123;a&#125;等于3</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        echo 其他</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他</span><br></pre></td></tr></table></figure>\n<h2 id=\"12-循环语句\">12. 循环语句</h2>\n<h3 id=\"12-1-for…in…do…done\">12.1 for…in…do…done</h3>\n<p>命令格式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for var in val1 val2 val3</span><br><span class=\"line\">do</span><br><span class=\"line\">    语句1</span><br><span class=\"line\">    语句2</span><br><span class=\"line\">    ...</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>示例一，输出 <code>a 2 cc</code>，每个元素一行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i in a 2 cc</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo $i</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>示例二，输出当前路径下的所有文件名，每个文件名一行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for file in `ls`</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo $file</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>示例三，输出1到10：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i in $(seq 1 10)</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo $i</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>示例四，使用 <code>&#123;1..10&#125;</code> 或者 <code>&#123;a..z&#125;</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i in &#123;a..z&#125;</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo $i</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<h3 id=\"12-2-for-…-…-…-do…done\">12.2 for ((…;…;…)) do…done</h3>\n<p>命令格式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for ((expression; condition; expression))</span><br><span class=\"line\">do</span><br><span class=\"line\">    语句1</span><br><span class=\"line\">    语句2</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>示例，输出1到10，每个数占一行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for ((i=1; i&lt;=10; i++))</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo $i</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<h3 id=\"12-3-while…do…done\">12.3 while…do…done</h3>\n<p><code>while...do...done</code>：当条件为假时结束。</p>\n<p>命令格式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while condition</span><br><span class=\"line\">do</span><br><span class=\"line\">    语句1</span><br><span class=\"line\">    语句2</span><br><span class=\"line\">    ...</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>示例，文件结束符为 <code>Ctrl+d</code>，输入文件结束符后 <code>read</code> 指令返回 <code>false</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while read name</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo $name</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<h3 id=\"12-4-until…do…done\">12.4 until…do…done</h3>\n<p><code>until...do...done</code>：当条件为真时结束。</p>\n<p>命令格式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">until condition</span><br><span class=\"line\">do</span><br><span class=\"line\">    语句1</span><br><span class=\"line\">    语句2</span><br><span class=\"line\">    ...</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>示例，当用户输入 <code>yes</code> 或者 <code>YES</code> 时结束，否则一直等待读入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">until [ &quot;$&#123;word&#125;&quot; == &quot;yes&quot; ] || [ &quot;$&#123;word&#125;&quot; == &quot;YES&quot; ]</span><br><span class=\"line\">do</span><br><span class=\"line\">    read -p &quot;Please input yes/YES to stop this program: &quot; word</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<h3 id=\"12-5-break\">12.5 break</h3>\n<p><code>break</code>：跳出当前一层循环，注意与 C/C++ 不同的是：<code>break</code> 不能跳出 <code>case</code> 语句。</p>\n<p>示例，每读入非 EOF 的字符串，会输出一遍1到7。该程序可以输入 <code>Ctrl+d</code> 文件结束符来结束，也可以直接用 <code>Ctrl+c</code> 杀掉该进程：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while read name</span><br><span class=\"line\">do</span><br><span class=\"line\">    for ((i=1;i&lt;=10;i++))</span><br><span class=\"line\">    do</span><br><span class=\"line\">        case $i in</span><br><span class=\"line\">            8)</span><br><span class=\"line\">                break</span><br><span class=\"line\">                ;;</span><br><span class=\"line\">            *)</span><br><span class=\"line\">                echo $i</span><br><span class=\"line\">                ;;</span><br><span class=\"line\">        esac</span><br><span class=\"line\">    done</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<h3 id=\"12-6-continue\">12.6 continue</h3>\n<p><code>continue</code>：跳出当前循环。</p>\n<p>示例，输出1到10中的所有奇数：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for ((i=1;i&lt;=10;i++))</span><br><span class=\"line\">do</span><br><span class=\"line\">    if [ `expr $i % 2` -eq 0 ]</span><br><span class=\"line\">    then</span><br><span class=\"line\">        continue</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    echo $i</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>直接关闭进程的方式：</p>\n<ol>\n<li>使用 <code>top</code> 命令找到进程的 <code>PID</code>。</li>\n<li>输入 <code>kill -9 PID</code> 即可关掉此进程。</li>\n</ol>\n<h2 id=\"13-函数\">13. 函数</h2>\n<p><code>bash</code> 中的函数类似于 <code>C/C++</code> 中的函数，但 <code>return</code> 的返回值与 C/C++ 不同，返回的是 <code>exit code</code>，取值为 <code>[0, 255]</code>，0表示正常结束。</p>\n<p>如果想获取函数的输出结果，可以通过 <code>echo</code> 输出到 <code>stdout</code> 中，然后通过 <code>$(function_name)</code> 来获取 <code>stdout</code> 中的结果。</p>\n<p>函数的 <code>return</code> 值可以通过 <code>$?</code> 来获取。</p>\n<p>命令格式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[function] func_name() &#123;  # function关键字可以省略</span><br><span class=\"line\">    语句1</span><br><span class=\"line\">    语句2</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（1）不获取 <code>return</code> 值和 <code>stdout</code> 值</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func() &#123;</span><br><span class=\"line\">    name=AsanoSaki</span><br><span class=\"line\">    echo &quot;Hello $name&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">AsanoSaki</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello yxc</span><br></pre></td></tr></table></figure>\n<p>（2）获取 <code>return</code> 值和 <code>stdout</code> 值（不写 <code>return</code> 时，默认 <code>return 0</code>）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func() &#123;</span><br><span class=\"line\">    name=AsanoSaki</span><br><span class=\"line\">    echo &quot;Hello $name&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 123</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output=$(func)</span><br><span class=\"line\">ret=$?</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;output = $output&quot;</span><br><span class=\"line\">echo &quot;return = $ret&quot;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output = Hello AsanoSaki</span><br><span class=\"line\">return = 123</span><br></pre></td></tr></table></figure>\n<p>（3）函数的输入参数</p>\n<p>在函数内，<code>$1</code> 表示第一个输入参数，<code>$2</code> 表示第二个输入参数，依此类推。</p>\n<p>注意：函数内的 <code>$0</code> 仍然是文件名，而不是函数名。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func() &#123;  # 递归计算 $1 + ($1 - 1) + ($1 - 2) + ... + 0</span><br><span class=\"line\">    word=&quot;&quot;</span><br><span class=\"line\">    while [ &quot;$&#123;word&#125;&quot; != &#x27;y&#x27; ] &amp;&amp; [ &quot;$&#123;word&#125;&quot; != &#x27;n&#x27; ]</span><br><span class=\"line\">    do</span><br><span class=\"line\">        read -p &quot;要进入func($1)函数吗？请输入y/n：&quot; word</span><br><span class=\"line\">    done</span><br><span class=\"line\"></span><br><span class=\"line\">    if [ &quot;$word&quot; == &#x27;n&#x27; ]</span><br><span class=\"line\">    then</span><br><span class=\"line\">        echo 0</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">    fi  </span><br><span class=\"line\"></span><br><span class=\"line\">    if [ $1 -le 0 ] </span><br><span class=\"line\">    then</span><br><span class=\"line\">        echo 0</span><br><span class=\"line\">        return 0</span><br><span class=\"line\">    fi  </span><br><span class=\"line\"></span><br><span class=\"line\">    sum=$(func $(expr $1 - 1))</span><br><span class=\"line\">    echo $(expr $sum + $1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">echo $(func 10)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">55</span><br></pre></td></tr></table></figure>\n<p>（4）函数内的局部变量</p>\n<p>可以在函数内定义局部变量，作用范围仅在当前函数内。可以在递归函数中定义局部变量。</p>\n<p>命令格式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local 变量名=变量值</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">! /bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">func() &#123;</span><br><span class=\"line\">    local name=AsanoSaki</span><br><span class=\"line\">    echo $name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func</span><br><span class=\"line\"></span><br><span class=\"line\">echo $name</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AsanoSaki</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>第一行为函数内的 <code>name</code> 变量，第二行为函数外调用 <code>name</code> 变量，会发现此时该变量不存在。</p>\n<h2 id=\"14-exit命令\">14. exit命令</h2>\n<p><code>exit</code> 命令用来退出当前 Shell 进程，并返回一个退出状态；使用 <code>$?</code> 可以接收这个退出状态。</p>\n<p><code>exit</code> 命令可以接受一个整数值作为参数，代表退出状态。如果不指定，默认状态值是0。</p>\n<p><code>exit</code> 退出状态只能是一个介于0到255之间的整数，其中只有0表示成功，其它值都表示失败。</p>\n<p>示例，创建脚本 <code>test.sh</code>，内容如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">! /bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">if [ $# -ne 1 ]  # 如果传入参数个数等于1，则正常退出；否则非正常退出。</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;arguments not valid&quot;</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;arguments valid&quot;</span><br><span class=\"line\">    exit 0</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p>执行该脚本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">acs@9e0ebfcd82d7:~$ chmod +x test.sh </span><br><span class=\"line\">acs@9e0ebfcd82d7:~$ ./test.sh acwing</span><br><span class=\"line\">arguments valid</span><br><span class=\"line\">acs@9e0ebfcd82d7:~$ echo $?  # 传入一个参数，则正常退出，exit code为0</span><br><span class=\"line\">0</span><br><span class=\"line\">acs@9e0ebfcd82d7:~$ ./test.sh </span><br><span class=\"line\">arguments not valid</span><br><span class=\"line\">acs@9e0ebfcd82d7:~$ echo $?  # 传入参数个数不是1，则非正常退出，exit code为1</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<h2 id=\"15-文件重定向\">15. 文件重定向</h2>\n<p>每个进程默认打开3个文件描述符：</p>\n<ul>\n<li><code>stdin</code>：标准输入，从命令行读取数据，文件描述符为0。</li>\n<li><code>stdout</code>：标准输出，向命令行输出数据，文件描述符为1。</li>\n<li><code>stderr</code>：标准错误输出，向命令行输出数据，文件描述符为2。</li>\n</ul>\n<p>可以用文件重定向将这三个文件重定向到其他文件中。</p>\n<p>（1）重定向命令列表</p>\n<ul>\n<li><code>command &gt; file</code>：将 <code>stdout</code> 重定向到 <code>file</code> 中。</li>\n<li><code>command &lt; file</code>：将 <code>stdin</code> 重定向到 <code>file</code> 中。</li>\n<li><code>command &gt;&gt; file</code>：将 <code>stdout</code> 以追加方式重定向到 <code>file</code> 中。</li>\n<li><code>command n&gt; file</code>：将文件描述符 <code>n</code> 重定向到 <code>file</code> 中。</li>\n<li><code>command n&gt;&gt; file</code>：将文件描述符 <code>n</code> 以追加方式重定向到 <code>file</code> 中。</li>\n</ul>\n<p>（2）输入和输出重定向</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo -e &quot;Hello \\c&quot; &gt; output.txt  # 将stdout重定向到output.txt中</span><br><span class=\"line\">echo &quot;World&quot; &gt;&gt; output.txt  # 将字符串追加到output.txt中</span><br><span class=\"line\"></span><br><span class=\"line\">read str &lt; output.txt  # 从output.txt中读取字符串</span><br><span class=\"line\"></span><br><span class=\"line\">echo $str  # 输出结果：Hello World</span><br></pre></td></tr></table></figure>\n<p>（3）同时重定向 <code>stdin</code> 和 <code>stdout</code></p>\n<p>创建 bash 脚本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">! /bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">read a</span><br><span class=\"line\">read b</span><br><span class=\"line\"></span><br><span class=\"line\">echo $(expr &quot;$a&quot; + &quot;$b&quot;)</span><br></pre></td></tr></table></figure>\n<p>创建 <code>input.txt</code>，里面的内容为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n<p>执行命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">acs@9e0ebfcd82d7:~$ chmod +x test.sh  # 添加可执行权限</span><br><span class=\"line\">acs@9e0ebfcd82d7:~$ ./test.sh &lt; input.txt &gt; output.txt  # 从input.txt中读取内容，将输出写入output.txt中</span><br><span class=\"line\">acs@9e0ebfcd82d7:~$ cat output.txt  # 查看output.txt中的内容</span><br><span class=\"line\">7</span><br></pre></td></tr></table></figure>\n<h2 id=\"16-引入外部脚本\">16. 引入外部脚本</h2>\n<p>类似于 C/C++ 中的 <code>include</code> 操作，bash 也可以引入其他文件中的代码。</p>\n<p>语法格式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. filename  # 注意点和文件名之间有一个空格</span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">source filename</span><br></pre></td></tr></table></figure>\n<p>示例，创建 <code>test1.sh</code>，内容为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">! /bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">name=AsanoSaki  # 定义变量name</span><br></pre></td></tr></table></figure>\n<p>然后创建 <code>test2.sh</code>，内容为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">! /bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">source test1.sh  # 或 . test1.sh</span><br><span class=\"line\"></span><br><span class=\"line\">echo My name is: $name  # 可以使用test1.sh中的变量</span><br></pre></td></tr></table></figure>\n<p>执行命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">acs@9e0ebfcd82d7:~$ chmod +x test2.sh </span><br><span class=\"line\">acs@9e0ebfcd82d7:~$ ./test2.sh </span><br><span class=\"line\">My name is: AsanoSaki</span><br></pre></td></tr></table></figure>\n<p>上一章：<a href=\"/posts/53725.html\">Linux学习笔记-命令、Tmux与Vim</a>。</p>\n<p>下一章：<a href=\"/posts/20491.html\">Linux学习笔记-SSH与Git</a>。</p>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://asanosaki.github.io/posts/53725.html",
            "url": "https://asanosaki.github.io/posts/53725.html",
            "title": "Linux学习笔记-命令、Tmux与Vim",
            "date_published": "2022-03-15T10:06:00.000Z",
            "content_html": "<blockquote>\n<p>本文记录 Linux 的学习过程，内容为 Linux 常用文件管理命令、Tmux、Vim。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"1-常用命令\">1. 常用命令</h2>\n<p>Linux 中描述路径有两种方式（假设当前用户的目录为 <code>AsanoSaki</code>）：</p>\n<ol>\n<li>绝对路径：从根目录（即 <code>/</code>）开始描述，例如：<code>/home/AsanoSaki/main.cpp</code>。</li>\n<li>相对路径：从当前的路径开始描述，例如：<code>AsanoSaki/main.cpp</code>（当前在 <code>home</code> 中）。</li>\n</ol>\n<p>绝对路径的开头一定是 <code>/</code>，相对路径开头一定不是 <code>/</code>。</p>\n<ul>\n<li><code>.</code> 表示当前目录，<code>..</code> 表示上一目录，假如当前在 <code>AsanoSaki</code> 目录下，则路径 <code>../AsanoSaki/./../AsanoSaki</code> 表示同一路径。</li>\n<li><code>~/</code> 表示家目录，等价于 <code>/home/AsanoSaki</code>。</li>\n</ul>\n<h3 id=\"1-1-常用文件管理命令\">1.1 常用文件管理命令</h3>\n<ul>\n<li><code>ctrl+c</code>：取消命令，并且换行。如当前有一个程序正在运行且一直无法停止，则可以使用该操作将当前正在运行的程序中止。另一个作用是中断当前正在输入的这一行，直接跳到下一行重新输入。</li>\n<li><code>ctrl+u</code>：清空本行命令。</li>\n<li><code>tab</code>：可以补全命令和文件名，如果补全不了快速按两下 <code>tab</code> 键，可以显示备选选项。</li>\n<li><code>ls</code>：列出当前目录下所有文件，蓝色的是文件夹，白色的是普通文件，绿色的是可执行文件。</li>\n<li><code>pwd</code>：显示当前路径。</li>\n<li><code>cd XXX</code>：进入 <code>XXX</code> 目录下，<code>cd ..</code> 表示返回上层目录，<code>cd -</code> 表示返回上一个待过的目录。<code>cd</code> 后面既可以用相对路径也可以用绝对路径，不加目录则默认返回家目录。</li>\n<li><code>cp XXX YYY</code>：将 <code>XXX</code> 文件复制成 <code>YYY</code>，<code>XXX</code> 和 <code>YYY</code> 可以是一个路径，比如将目录 <code>a</code> 中的文件 <code>tmp.txt</code> 复制到目录 <code>b</code> 中：<code>cp a/tmp.txt b</code>。如果想顺带将复制后的文件重命名则可以写成：<code>cp a/tmp.txt b/tmp2.txt</code>。如果想把目录 <code>a</code> 整个复制到目录 <code>b</code> 下则可以写：<code>cp a b -r</code>。</li>\n<li><code>mkdir XXX</code>：创建目录 <code>XXX</code>。如在当前目录下创建文件夹 <code>a</code>：<code>mkdir a</code>。使用绝对路径在目录 <code>a</code> 下创建文件夹 <code>b</code>：<code>mkdir /home/AsanoSaki/a/b</code>。直接创建 <code>a</code> 里有 <code>b</code>，<code>b</code> 里有 <code>c</code> 的目录：<code>mkdir a/b/c -p</code>。</li>\n<li><code>rm XXX</code>：删除普通文件。<code>rm XXX -r</code>：删除文件夹。删除多个文件：<code>rm tmp1.txt tmp2.txt</code>。删除当前目录下的所有 <code>txt</code> 文件：<code>rm *.txt</code>。删除 <code>a</code> 中的所有文件：<code>rm a/*</code>。</li>\n<li><code>mv XXX YYY</code>：将 <code>XXX</code> 文件移动（剪切）到 <code>YYY</code>，和 <code>cp</code> 命令一样，<code>XXX</code> 和 <code>YYY</code> 可以是一个路径，重命名也是用这个命令。</li>\n<li><code>touch XXX</code>：创建一个文件。</li>\n<li><code>cat XXX</code>：展示文件 <code>XXX</code> 中的内容。</li>\n</ul>\n<h3 id=\"1-2-其它常用命令\">1.2 其它常用命令</h3>\n<p>（1）系统状况</p>\n<ul>\n<li><code>top</code>：查看所有进程的信息（Linux 的任务管理器）。\n<ul>\n<li>打开后，输入 <code>M</code>：按使用内存排序。</li>\n<li>打开后，输入 <code>P</code>：按使用 CPU 排序。</li>\n<li>打开后，输入 <code>q</code>：退出。</li>\n</ul>\n</li>\n<li><code>df -h</code>：查看硬盘使用情况。</li>\n<li><code>free -h</code>：查看内存使用情况。</li>\n<li><code>du -sh</code>：查看当前目录占用的硬盘空间。</li>\n<li><code>ps aux</code>：查看所有进程。</li>\n<li><code>kill -9 pid</code>：杀死编号为 <code>pid</code> 的进程。\n<ul>\n<li>传递某个具体的信号：<code>kill -s SIGTERM pid</code>。</li>\n</ul>\n</li>\n<li><code>netstat -nt</code>：查看所有网络连接。</li>\n<li><code>w</code>：列出当前登陆的用户。</li>\n<li><code>ping www.baidu.com</code>：检查是否连网。</li>\n</ul>\n<p>（2）文件权限</p>\n<ul>\n<li><code>chmod</code>：修改文件权限\n<ul>\n<li><code>chmod +x xxx</code>：给 <code>xxx</code> 添加可执行权限。</li>\n<li><code>chmod -x xxx</code>：去掉 <code>xxx</code> 的可执行权限。</li>\n<li><code>chmod 777 xxx</code>：将 <code>xxx</code> 的权限改成 <code>777</code>（三个数字按顺序分别表示 <code>Owner</code>、<code>Group</code>、<code>Other Users</code>，每个数字的二进制例如7的二进制为111，表示具有 <code>rwx</code> 权限，某一位为0表示没有该权限）。</li>\n<li><code>chmod 777 xxx -R</code>：递归修改整个文件夹的权限。</li>\n</ul>\n</li>\n</ul>\n<p>（3）文件检索</p>\n<ul>\n<li><code>find /path/to/directory/ -name '*.py'</code>：搜索某个文件路径下的所有 <code>*.py</code> 文件。</li>\n<li><code>grep xxx</code>：从 <code>stdin</code> 中读入若干行数据，如果某行中包含 <code>xxx</code>，则输出该行；否则忽略该行。</li>\n<li><code>wc</code>：统计行数、单词数、字节数。\n<ul>\n<li>既可以从 <code>stdin</code> 中直接读入内容；也可以在命令行参数中传入文件名列表。</li>\n<li><code>wc -l</code>：统计行数。</li>\n<li><code>wc -w</code>：统计单词数。</li>\n<li><code>wc -c</code>：统计字节数。</li>\n</ul>\n</li>\n<li><code>tree</code>：展示当前目录的文件结构。\n<ul>\n<li><code>tree /path/to/directory/</code>：展示某个目录的文件结构。</li>\n<li><code>tree -a</code>：展示隐藏文件。</li>\n</ul>\n</li>\n<li><code>ag xxx</code>：搜索当前目录下的所有文件，检索 <code>xxx</code> 字符串。</li>\n<li><code>cut</code>：分割一行内容。\n<ul>\n<li>从 <code>stdin</code> 中读入多行数据。</li>\n<li><code>echo $PATH | cut -d ':' -f 3,5</code>：输出 <code>PATH</code> 用 <code>:</code> 分割后第3、5列数据。</li>\n<li><code>echo $PATH | cut -d ':' -f 3-5</code>：输出 <code>PATH</code> 用 <code>:</code> 分割后第3-5列数据。</li>\n<li><code>echo $PATH | cut -c 3,5</code>：输出 <code>PATH</code> 的第3、5个字符。</li>\n<li><code>echo $PATH | cut -c 3-5</code>：输出 <code>PATH</code> 的第3-5个字符。</li>\n</ul>\n</li>\n<li><code>sort</code>：将每行内容按字典序排序。\n<ul>\n<li>可以从 <code>stdin</code> 中读取多行数据。</li>\n<li>可以从命令行参数中读取文件名列表。</li>\n</ul>\n</li>\n<li><code>xargs</code>：将 <code>stdin</code> 中的数据用空格或回车分割成命令行参数。\n<ul>\n<li><code>find . -name '*.py' | xargs cat | wc -l</code>：统计当前目录下所有 Python 文件的总行数</li>\n</ul>\n</li>\n</ul>\n<p>（4）查看文件内容</p>\n<ul>\n<li><code>more</code>：浏览文件内容。\n<ul>\n<li>回车：下一行。</li>\n<li>空格：下一页。</li>\n<li><code>b</code>：上一页。</li>\n<li><code>q</code>：退出。</li>\n</ul>\n</li>\n<li><code>less</code>：与 <code>more</code> 类似，功能更全。\n<ul>\n<li>回车：下一行。</li>\n<li><code>y</code>：上一行。</li>\n<li><code>Page Down</code>：下一页。</li>\n<li><code>Page Up</code>：上一页。</li>\n<li><code>q</code>：退出。</li>\n</ul>\n</li>\n<li><code>head -3 xxx</code>：展示 <code>xxx</code> 的前3行内容。\n<ul>\n<li>同时支持从 <code>stdin</code> 读入内容。</li>\n</ul>\n</li>\n<li><code>tail -3 xxx</code>：展示 <code>xxx</code> 末尾3行内容。\n<ul>\n<li>同时支持从 <code>stdin</code> 读入内容。</li>\n</ul>\n</li>\n</ul>\n<p>（5）用户相关</p>\n<ul>\n<li><code>history</code>：展示当前用户的历史操作。内容存放在 <code>~/.bash_history</code> 中。</li>\n</ul>\n<p>（6）工具</p>\n<ul>\n<li><code>md5sum</code>：计算 <code>md5</code> 哈希值。\n<ul>\n<li>可以从 <code>stdin</code> 读入内容。</li>\n<li>也可以在命令行参数中传入文件名列表。</li>\n</ul>\n</li>\n<li><code>time command</code>：统计 <code>command</code> 命令的执行时间。</li>\n<li><code>ipython3</code>：交互式 Python3 环境。可以当做计算器，或者批量管理文件。\n<ul>\n<li><code>! echo &quot;Hello World&quot;</code>：<code>!</code> 表示执行 <code>shell</code> 脚本。</li>\n</ul>\n</li>\n<li><code>watch -n 0.1 command</code>：每0.1秒执行一次 <code>command</code> 命令。</li>\n<li><code>tar</code>：压缩文件。\n<ul>\n<li><code>tar -zcvf xxx.tar.gz /path/to/file/*</code>：压缩。</li>\n<li><code>tar -zxvf xxx.tar.gz</code>：解压缩。</li>\n</ul>\n</li>\n<li><code>diff xxx yyy</code>：查找文件 <code>xxx</code> 与 <code>yyy</code> 的不同点。</li>\n</ul>\n<p>（7）安装软件</p>\n<ul>\n<li><code>sudo command</code>：以 <code>root</code> 身份执行 <code>command</code> 命令。</li>\n<li><code>apt-get install xxx</code>：安装软件。</li>\n<li><code>pip install xxx --user --upgrade</code>：安装 Python 包。</li>\n</ul>\n<h2 id=\"2-Tmux与Vim\">2. Tmux与Vim</h2>\n<h3 id=\"2-1-Tmux\">2.1 Tmux</h3>\n<p>（1）功能</p>\n<ul>\n<li>分屏。</li>\n<li>允许断开 Terminal 连接后，继续运行进程。</li>\n</ul>\n<p>（2）结构</p>\n<p>一个 Tmux 可以包含多个 <code>session</code>，一个 <code>session</code> 可以包含多个 <code>window</code>，一个 <code>window</code> 可以包含多个 <code>pane</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">实例：</span><br><span class=\"line\">    tmux:</span><br><span class=\"line\">        session 0:</span><br><span class=\"line\">            window 0:</span><br><span class=\"line\">                pane 0</span><br><span class=\"line\">                pane 1</span><br><span class=\"line\">                pane 2</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            window 1</span><br><span class=\"line\">            window 2</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        session 1</span><br><span class=\"line\">        session 2</span><br><span class=\"line\">        ...</span><br></pre></td></tr></table></figure>\n<p>（3）常用操作</p>\n<ul>\n<li><code>tmux [-u]</code>：新建一个 <code>session</code>，其中包含一个 <code>window</code>，<code>window</code> 中包含一个 <code>pane</code>，<code>pane</code> 里打开了一个 shell 对话框，<code>-u</code> 参数可以在 Tmux 中显示中文内容。</li>\n<li>按下 <code>Ctrl + a</code> 后手指松开，然后按 <code>%</code>：将当前 <code>pane</code> 左右平分成两个 <code>pane</code>。</li>\n<li>按下 <code>Ctrl + a</code> 后手指松开，然后按 <code>&quot;</code>（注意是双引号）：将当前 <code>pane</code> 上下平分成两个 <code>pane</code>。</li>\n<li><code>Ctrl + d</code>：关闭当前 <code>pane</code>；如果当前 <code>window</code> 的所有 <code>pane</code> 均已关闭，则自动关闭 <code>window</code>；如果当前 <code>session</code> 的所有 <code>window</code> 均已关闭，则自动关闭 <code>session</code>。</li>\n<li>鼠标点击可以选则 <code>pane</code>。</li>\n<li>按下 <code>Ctrl + a</code> 后手指松开，然后按方向键：选择相邻的 <code>pane</code>。</li>\n<li>鼠标拖动 <code>pane</code> 之间的分割线，可以调整分割线的位置。</li>\n<li>按住 <code>Ctrl + a</code> 的同时按方向键，可以调整 <code>pane</code> 之间分割线的位置。</li>\n<li>按下 <code>Ctrl + a</code> 后手指松开，然后按 <code>z</code>：将当前 <code>pane</code> 全屏/取消全屏。</li>\n<li>按下 <code>Ctrl + a</code> 后手指松开，然后按 <code>d</code>：挂起当前 <code>session</code>。</li>\n<li><code>tmux a</code>：打开之前挂起的 <code>session</code>。</li>\n<li>按下 <code>Ctrl + a</code> 后手指松开，然后按 <code>s</code>：选择其它 <code>session</code>：\n<ul>\n<li>方向键上：选择上一项；</li>\n<li>方向键下：选择下一项；</li>\n<li>方向键右：展开当前项；</li>\n<li>方向键左：闭合当前项。</li>\n</ul>\n</li>\n<li>按下 <code>Ctrl + a</code> 后手指松开，然后按 <code>c</code>：在当前 <code>session</code> 中创建一个新的 <code>window</code>。</li>\n<li>按下 <code>Ctrl + a</code> 后手指松开，然后按 <code>w</code>：选择其他 <code>window</code>，操作方法与选择 <code>session</code> 完全相同。</li>\n<li>按下 <code>Ctrl + a</code> 后手指松开，然后按 <code>PageUp/PageDown</code>：翻阅当前 <code>pane</code> 内的内容。注意第一次唤醒该操作时只能按 <code>PageUp</code>。</li>\n<li>鼠标滚轮：翻阅当前 <code>pane</code> 内的内容。</li>\n<li>在 <code>tmux</code> 中选中文本时，需要按住 <code>shift</code> 键。（仅支持 Windows 和 Linux，不支持 Mac，不过该操作并不是必须的，因此影响不大）</li>\n<li><code>tmux</code> 中复制/粘贴文本的通用方式：\n<ol>\n<li>按下 <code>Ctrl + a</code> 后松开手指，然后按 <code>[</code>。</li>\n<li>用鼠标选中文本，被选中的文本会被自动复制到 <code>tmux</code> 的剪贴板。</li>\n<li>按下 <code>Ctrl + a</code> 后松开手指，然后按 <code>]</code>，会将剪贴板中的内容粘贴到光标处。</li>\n</ol>\n</li>\n</ul>\n<p>注意：Tmux 的配置文件为 <code>~/.tmux.conf</code>，默认 Tmux 前缀快捷键是 <code>Ctrl + b</code>！本文是已经修改过了配置文件后的操作说明，不过基本上操作逻辑都是一样的。</p>\n<h3 id=\"2-2-Vim\">2.2 Vim</h3>\n<p>（1）功能</p>\n<ul>\n<li>命令行模式下的文本编辑器。</li>\n<li>根据文件扩展名自动判别编程语言。支持代码缩进、代码高亮等功能。</li>\n<li>使用方式：<code>vim &lt;filename&gt;</code>。\n<ul>\n<li>如果已有该文件，则打开它。</li>\n<li>如果没有该文件，则打开个一个新的文件，并命名为 <code>filename</code>。</li>\n</ul>\n</li>\n</ul>\n<p>（2）模式</p>\n<ul>\n<li>一般命令模式\n<ul>\n<li>默认模式。命令输入方式：类似于打游戏放技能，按不同字符，即可进行不同操作。可以复制、粘贴、删除文本等。</li>\n</ul>\n</li>\n<li>编辑模式\n<ul>\n<li>在一般命令模式里按下 <code>i</code>，会进入编辑模式。</li>\n<li>按下 <code>ESC</code> 会退出编辑模式，返回到一般命令模式。</li>\n</ul>\n</li>\n<li>命令行模式\n<ul>\n<li>在一般命令模式里按下 <code>:/?</code> 三个字符中的任意一个，会进入命令行模式。命令行在最下面。</li>\n<li>可以查找、替换、保存、退出、配置编辑器等。</li>\n</ul>\n</li>\n</ul>\n<p>（3）操作</p>\n<ul>\n<li><code>i</code>：进入编辑模式。</li>\n<li><code>ESC</code>：进入一般命令模式。</li>\n<li><code>h</code> 或左方向键：光标向左移动一个字符。</li>\n<li><code>j</code> 或下方向键：光标向下移动一个字符。</li>\n<li><code>k</code> 或上方向键：光标向上移动一个字符。</li>\n<li><code>l</code> 或右方向键：光标向右移动一个字符。</li>\n<li><code>n&lt;Space&gt;</code>：<code>n</code> 表示数字，按下数字后再按空格，光标会向右移动 <code>n</code> 个字符。</li>\n<li><code>0</code> 或 <code>Home</code>：光标移动到本行开头。</li>\n<li><code>$</code> 或 <code>End</code>：光标移动到本行末尾。</li>\n<li><code>G</code>：光标移动到最后一行。</li>\n<li><code>:n</code> 或 <code>nG</code>：<code>n</code> 为数字，光标移动到第 <code>n</code> 行。</li>\n<li><code>gg</code>：光标移动到第一行，相当于 <code>1G</code>。</li>\n<li><code>n&lt;Enter&gt;</code>：<code>n</code> 为数字，光标向下移动 <code>n</code> 行。</li>\n<li><code>/word</code>：向光标之下寻找第一个值为 <code>word</code> 的字符串。</li>\n<li><code>?word</code>：向光标之上寻找第一个值为 <code>word</code> 的字符串。</li>\n<li><code>n</code>：重复前一个查找操作。</li>\n<li><code>N</code>：反向重复前一个查找操作。</li>\n<li><code>:n1,n2s/word1/word2/g</code>：<code>n1</code> 与 <code>n2</code> 为数字，在第 <code>n1</code> 行与 <code>n2</code> 行之间寻找 <code>word1</code> 这个字符串，并将该字符串替换为 <code>word2</code>。</li>\n<li><code>:1,$s/word1/word2/g</code>：将全文的 <code>word1</code> 替换为 <code>word2</code>。</li>\n<li><code>:1,$s/word1/word2/gc</code>：将全文的 <code>word1</code> 替换为 <code>word2</code>，且在替换前要求用户确认。</li>\n<li><code>v</code>：选中文本，连续按两次 <code>ESC</code> 取消选中。</li>\n<li><code>d</code>：删除选中的文本。</li>\n<li><code>dd</code>：删除当前行（其实是剪切）。</li>\n<li><code>ggdG</code>：删除全部内容。</li>\n<li><code>y</code>：复制选中的文本。</li>\n<li><code>yy</code>：复制当前行。</li>\n<li><code>ggyG</code>：复制全部内容。</li>\n<li><code>p</code>：将复制的数据在光标的下一行/下一个位置粘贴。</li>\n<li><code>u</code>：撤销。</li>\n<li><code>Ctrl + r</code>：取消撤销。</li>\n<li><code>&gt;</code>：将选中的文本整体向右缩进一次。</li>\n<li><code>&lt;</code>：将选中的文本整体向左缩进一次。</li>\n<li><code>:w</code>：保存。</li>\n<li><code>:w!</code>：强制保存。</li>\n<li><code>:q</code>：退出。</li>\n<li><code>:q!</code>：强制退出。</li>\n<li><code>:wq</code>：保存并退出。</li>\n<li><code>:set paste</code>：设置成粘贴模式，取消代码自动缩进。</li>\n<li><code>:set nopaste</code>：取消粘贴模式，开启代码自动缩进。</li>\n<li><code>:set nu</code>：显示行号。</li>\n<li><code>:set nonu</code>：隐藏行号。</li>\n<li><code>gg=G</code>：将全文代码格式化。</li>\n<li><code>:noh</code>：关闭查找关键词高亮。</li>\n<li><code>Ctrl + q</code>：当 Vim 卡死时，可以取消当前正在执行的命令。</li>\n</ul>\n<p>异常处理：<br>\n每次用 Vim 编辑文件时，会自动创建一个 <code>&lt;filename&gt;.swp</code> 的临时文件。<br>\n如果打开某个文件时，该文件的 <code>swp</code> 文件已存在，则会报错。此时解决办法有两种：</p>\n<ul>\n<li>找到正在打开该文件的程序，并退出。</li>\n<li>直接删掉该 <code>swp</code> 文件即可。</li>\n</ul>\n<p>Vim 的配置文件在 <code>~/.vimrc</code> 中。</p>\n<p>上一章：无。</p>\n<p>下一章：<a href=\"/posts/31281.html\">Linux学习笔记-Shell</a>。</p>\n",
            "tags": [
                "Linux"
            ]
        }
    ]
}