{
    "version": "https://jsonfeed.org/version/1",
    "title": "AsanoSaki • All posts by \"python\" tag",
    "description": "",
    "home_page_url": "https://asanosaki.github.io",
    "items": [
        {
            "id": "https://asanosaki.github.io/posts/9681.html",
            "url": "https://asanosaki.github.io/posts/9681.html",
            "title": "Python遥感常用模块Rasterio与Rioxarray教程",
            "date_published": "2023-05-29T07:52:00.000Z",
            "content_html": "<blockquote>\n<p><code>rasterio</code> 是一个很多模块是基于 <code>GDAL</code> 的 Python 包，可用于处理地理空间栅格数据，例如 GeoTIFF 文件。<code>xarray</code> 是一个为数组提供标签，例如尺寸、坐标和其他特定属性的 Python 包，它使大维数组的工作更加直观。<code>rioxarray</code> 结合了 <code>rasterio</code> 的功能和 <code>xarray</code> 的所有优点。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"1-Rasterio与Rioxarray安装\">1. Rasterio与Rioxarray安装</h2>\n<p>首先安装 Rasterio 模块，（本人使用 <code>conda</code> 安装时遇到过报错 <code>ImportError: cannot import name 'CRS' from 'pyproj' (unknown location)</code>，是由于 <code>pyproj</code> 模块安装不全，因此建议采用后面的离线安装方式或者之后遇到问题时删除 <code>pyproj</code> 模块后再离线安装该模块）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install gdal</span><br><span class=\"line\">conda install rasterio</span><br></pre></td></tr></table></figure>\n<p>如果安装失败可以采用离线安装的方式，Rasterio 依赖很多第三方库，所以比较麻烦，按下面的顺序依次安装即可，可以尝试使用 <code>pip</code> 安装或者下载 <code>.whl</code> 文件离线安装（注意对上 Python 版本）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyproj</span><br><span class=\"line\">Shapely</span><br><span class=\"line\">GDAL</span><br><span class=\"line\">Fiona</span><br><span class=\"line\">rasterio</span><br></pre></td></tr></table></figure>\n<p>各个模块的链接：<a href=\"https://pypi.org/project/pyproj/\">Pyproj</a>、<a href=\"https://pypi.org/project/shapely/\">Shapely</a>、<a href=\"https://pypi.org/project/GDAL/\">GDAL</a>、<a href=\"https://pypi.org/project/Fiona/\">Fiona</a>、<a href=\"https://pypi.org/project/rasterio/\">Rasterio</a>。</p>\n<p>离线安装指令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install E:\\GDAL-1.2.10-cp310-cp310-win_amd64.whl</span><br></pre></td></tr></table></figure>\n<p>在 Python 中使用 Anaconda 安装 <code>rioxarray</code> 包时，首先需要安装 <code>GDAL</code> 和 <code>rasterio</code>，然后再安装 <code>rioxarray</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install rioxarray</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-使用教程\">2. 使用教程</h2>\n<p>（1）使用 Rioxarray 读取并展示图像：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> rasterio</span><br><span class=\"line\"><span class=\"keyword\">import</span> rioxarray</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;font.sans-serif&#x27;</span>] = [<span class=\"string\">&#x27;SimHei&#x27;</span>]</span><br><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;axes.unicode_minus&#x27;</span>] = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">img_path = <span class=\"string\">&#x27;../images/tiff_img.tif&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">img = rioxarray.open_rasterio(img_path)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(img.shape)  <span class=\"comment\"># (22, 488, 480)，第一维为通道数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(img))  <span class=\"comment\"># &lt;class &#x27;xarray.core.dataarray.DataArray&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(img.values))  <span class=\"comment\"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">fig, axes = plt.subplots(<span class=\"number\">1</span>, <span class=\"number\">2</span>, figsize=(<span class=\"number\">10</span>, <span class=\"number\">6</span>))</span><br><span class=\"line\"><span class=\"keyword\">for</span> ax <span class=\"keyword\">in</span> axes.flat:</span><br><span class=\"line\">    ax_img = ax.imshow(img[<span class=\"number\">0</span>], cmap=<span class=\"string\">&#x27;viridis&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> ax, title <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(axes.flat, [<span class=\"string\">&#x27;img1&#x27;</span>, <span class=\"string\">&#x27;img2&#x27;</span>]):</span><br><span class=\"line\">    ax.set_title(title)</span><br><span class=\"line\">fig.colorbar(mappable=ax_img, label=<span class=\"string\">&#x27;FSC&#x27;</span>, orientation=<span class=\"string\">&#x27;horizontal&#x27;</span>, ax=axes, fraction=<span class=\"number\">0.04</span>)  <span class=\"comment\"># 图例，fraction可调整大小</span></span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p>也可以用另一种形式展示（注意如果使用 Rasterio 读取图像则无法使用该方式展示图像）：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.figure(dpi=<span class=\"number\">300</span>, figsize=(<span class=\"number\">15</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">plt.subplots_adjust(hspace=<span class=\"number\">0.2</span>, wspace=<span class=\"number\">0.5</span>)</span><br><span class=\"line\">plt.subplot(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">img[<span class=\"number\">0</span>].plot(cmap=<span class=\"string\">&#x27;terrain&#x27;</span>)  <span class=\"comment\"># getting the first band</span></span><br><span class=\"line\">plt.subplot(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">img[<span class=\"number\">1</span>].plot(cmap=<span class=\"string\">&#x27;terrain&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># plt.savefig(&#x27;1.png&#x27;, dpi=300, bbox_inches=&#x27;tight&#x27;, pad_inches=0)</span></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p>（2）使用 Rasterio 读取图像：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img = rasterio.<span class=\"built_in\">open</span>(img_path).read()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(img.shape)  <span class=\"comment\"># (22, 488, 480)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(img))  <span class=\"comment\"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（3）转换为 Tensor 类型：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">img_torch = torch.tensor(np.array(img.values), dtype=torch.float32)  <span class=\"comment\"># Rioxarray转Tensor</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(img_torch.shape)  <span class=\"comment\"># torch.Size([22, 488, 480])</span></span><br><span class=\"line\"></span><br><span class=\"line\">img_torch = torch.tensor(img, dtype=torch.float32)  <span class=\"comment\"># Rasterio转Tensor</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(img_torch.shape)  <span class=\"comment\"># torch.Size([22, 488, 480])</span></span><br></pre></td></tr></table></figure>\n<p>（4）将 TIFF 图像逐像素提取出数据构建 CSV 文件：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">read_image</span>(<span class=\"params\">img_path</span>):</span><br><span class=\"line\">    img = rasterio.<span class=\"built_in\">open</span>(img_path).read()</span><br><span class=\"line\">    band, height, width = np.shape(img)</span><br><span class=\"line\"></span><br><span class=\"line\">    img_data_list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> tqdm.trange(height):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(width):</span><br><span class=\"line\">            temp = img[::, x, y]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> np.array(np.isnan(temp), dtype=np.int8).<span class=\"built_in\">sum</span>() &gt; <span class=\"number\">0</span>:  <span class=\"comment\"># 过滤nan值</span></span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                img_data_list.append(temp.tolist())</span><br><span class=\"line\"></span><br><span class=\"line\">    img_arr = np.array(img_data_list)</span><br><span class=\"line\">    img_arr = np.around(img_arr, <span class=\"number\">6</span>)  <span class=\"comment\"># 将数据四舍五入保留6位小数</span></span><br><span class=\"line\">    labels = img_arr[:, <span class=\"number\">0</span>]  <span class=\"comment\"># 第一个特征为标签</span></span><br><span class=\"line\">    dataset = img_arr[:, <span class=\"number\">1</span>:]  <span class=\"comment\"># 之后的特征为训练数据</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(os.path.basename(img_path), <span class=\"string\">&#x27;读取成功!&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># return dataset, labels</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> img_arr</span><br><span class=\"line\"></span><br><span class=\"line\">total_dataset = np.zeros((<span class=\"number\">1</span>, <span class=\"number\">22</span>), dtype=np.float32)</span><br><span class=\"line\">img_data = read_image(img_path)</span><br><span class=\"line\">total_dataset = np.append(total_dataset, img_data, axis=<span class=\"number\">0</span>)</span><br><span class=\"line\">total_dataset = np.delete(total_dataset, obj=<span class=\"number\">0</span>, axis=<span class=\"number\">0</span>)  <span class=\"comment\"># 按行(axis=0)删除第一行(obj=0)元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(total_dataset, <span class=\"string\">&#x27;\\n&#x27;</span>, np.shape(total_dataset))</span><br><span class=\"line\"><span class=\"comment\"># [[0.570768 0.14354  0.159068 ... 0.458602 1.       0.4     ]</span></span><br><span class=\"line\"><span class=\"comment\">#  [0.307365 0.14354  0.159068 ... 0.458602 1.       0.4     ]</span></span><br><span class=\"line\"><span class=\"comment\">#  [0.005285 0.14354  0.159068 ... 0.428406 1.       0.4     ]</span></span><br><span class=\"line\"><span class=\"comment\">#  ...</span></span><br><span class=\"line\"><span class=\"comment\">#  [0.993229 0.393478 0.370807 ... 0.243081 1.       0.8     ]</span></span><br><span class=\"line\"><span class=\"comment\">#  [0.967867 0.370807 0.356894 ... 0.243081 1.       0.8     ]</span></span><br><span class=\"line\"><span class=\"comment\">#  [0.945627 0.321429 0.305714 ... 0.243081 1.       0.8     ]]</span></span><br><span class=\"line\"><span class=\"comment\">#  (116082, 22)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一张影像22个波段，每一波段为一种特征，特征名如下，其中FSC既是模型训练时的标签数据也是模型输出数据</span></span><br><span class=\"line\">feature_name = [<span class=\"string\">&#x27;FSC&#x27;</span>, <span class=\"string\">&#x27;SR1&#x27;</span>, <span class=\"string\">&#x27;SR2&#x27;</span>, <span class=\"string\">&#x27;SR3&#x27;</span>, <span class=\"string\">&#x27;SR4&#x27;</span>, <span class=\"string\">&#x27;SR5&#x27;</span>, <span class=\"string\">&#x27;SR6&#x27;</span>, <span class=\"string\">&#x27;SR7&#x27;</span>, <span class=\"string\">&#x27;NDVI&#x27;</span>, <span class=\"string\">&#x27;NDSI&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;NDFSI&#x27;</span>, <span class=\"string\">&#x27;SensorZenith&#x27;</span>, <span class=\"string\">&#x27;SensorAzimuth&#x27;</span>, <span class=\"string\">&#x27;SolarZenith&#x27;</span>, <span class=\"string\">&#x27;SolarAzimuth&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;Dem&#x27;</span>, <span class=\"string\">&#x27;Slope&#x27;</span>, <span class=\"string\">&#x27;Aspect&#x27;</span>, <span class=\"string\">&#x27;LST&#x27;</span>, <span class=\"string\">&#x27;A2T&#x27;</span>, <span class=\"string\">&#x27;SC&#x27;</span>, <span class=\"string\">&#x27;LCT&#x27;</span>]</span><br><span class=\"line\">df = pd.DataFrame(total_dataset, columns=feature_name)</span><br><span class=\"line\">df.to_csv(<span class=\"string\">&#x27;../data/MODIS_total_data.csv&#x27;</span>, index=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(df)</span><br><span class=\"line\"><span class=\"comment\">#              FSC       SR1       SR2       SR3  ...       LST       A2T   SC  LCT</span></span><br><span class=\"line\"><span class=\"comment\"># 0       0.570768  0.143540  0.159068  0.165776  ...  0.447205  0.458602  1.0  0.4</span></span><br><span class=\"line\"><span class=\"comment\"># 1       0.307365  0.143540  0.159068  0.165776  ...  0.447205  0.458602  1.0  0.4</span></span><br><span class=\"line\"><span class=\"comment\"># ...          ...       ...       ...       ...  ...       ...       ...  ...  ...</span></span><br><span class=\"line\"><span class=\"comment\"># 116080  0.967867  0.370807  0.356894  0.384162  ...  0.252946  0.243081  1.0  0.8</span></span><br><span class=\"line\"><span class=\"comment\"># 116081  0.945627  0.321429  0.305714  0.327329  ...  0.252946  0.243081  1.0  0.8</span></span><br><span class=\"line\"><span class=\"comment\"># [116082 rows x 22 columns]</span></span><br><span class=\"line\"></span><br><span class=\"line\">train_data, valid_data = train_test_split(df, test_size=<span class=\"number\">0.3</span>, random_state=<span class=\"number\">1</span>)  <span class=\"comment\"># 按7:3的比例划分train_data与valid_data</span></span><br><span class=\"line\">train_data.to_csv(<span class=\"string\">&#x27;../data/MODIS_train_data.csv&#x27;</span>, index=<span class=\"literal\">False</span>)</span><br><span class=\"line\">valid_data.to_csv(<span class=\"string\">&#x27;../data/MODIS_valid_data.csv&#x27;</span>, index=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(train_data)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(valid_data)</span><br><span class=\"line\"><span class=\"comment\">#             FSC       SR1       SR2  ...       A2T        SC  LCT</span></span><br><span class=\"line\"><span class=\"comment\"># 65463  1.000000  0.868261  0.860124  ...  0.306415  0.954102  0.4</span></span><br><span class=\"line\"><span class=\"comment\"># 71636  0.000000  0.074969  0.090683  ...  0.492837  0.021780  0.4</span></span><br><span class=\"line\"><span class=\"comment\"># ...         ...       ...       ...  ...       ...       ...  ...</span></span><br><span class=\"line\"><span class=\"comment\"># 77708  0.836359  0.252298  0.268199  ...  0.400243  1.000000  0.4</span></span><br><span class=\"line\"><span class=\"comment\"># 98539  0.004958  0.048758  0.073168  ...  0.547051  0.000000  0.4</span></span><br><span class=\"line\"><span class=\"comment\"># [81257 rows x 22 columns]</span></span><br><span class=\"line\"><span class=\"comment\">#              FSC       SR1       SR2  ...       A2T        SC  LCT</span></span><br><span class=\"line\"><span class=\"comment\"># 24035   0.907556  0.579814  0.588075  ...  0.332088  1.000000  0.8</span></span><br><span class=\"line\"><span class=\"comment\"># 26625   0.988592  0.708696  0.702981  ...  0.334435  0.999297  0.4</span></span><br><span class=\"line\"><span class=\"comment\"># ...          ...       ...       ...  ...       ...       ...  ...</span></span><br><span class=\"line\"><span class=\"comment\"># 22745   0.000000  0.054348  0.127143  ...  0.494257  0.532436  0.4</span></span><br><span class=\"line\"><span class=\"comment\"># 31068   0.994422  0.562795  0.532174  ...  0.384267  1.000000  0.4</span></span><br><span class=\"line\"><span class=\"comment\"># [34825 rows x 22 columns]</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://asanosaki.github.io/posts/31783.html",
            "url": "https://asanosaki.github.io/posts/31783.html",
            "title": "Python绘图模块Plotly教程",
            "date_published": "2023-05-29T07:42:00.000Z",
            "content_html": "<blockquote>\n<p>Plotly 是一个快速完善并崛起的交互式的、开源的绘图库库，Python 库则是它的一个重要分支。现已支持超过40种独特的图表类型，涵盖了广泛的统计、金融、地理、科学和三维用例。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"1-Plotly安装\">1. Plotly安装</h2>\n<p>Python 中可以使用 <code>pip</code> 或者 <code>conda</code> 安装 Plotly：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install plotly</span><br><span class=\"line\">conda install plotly</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-Plotly绘图教程\">2. Plotly绘图教程</h2>\n<h3 id=\"2-1-折线图与散点图\">2.1 折线图与散点图</h3>\n<p>折线图不仅可以表示数量的多少，而且可以反映同一事物在不同时间里的发展变化的情况，易于显示数据变化趋势，可以直观地反映这种变化以及各组之间的差别。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> plotly.graph_objects <span class=\"keyword\">as</span> go</span><br><span class=\"line\"></span><br><span class=\"line\">x = np.arange(<span class=\"number\">5</span>)</span><br><span class=\"line\">y1 = np.random.rand(<span class=\"number\">5</span>) * <span class=\"number\">5</span></span><br><span class=\"line\">y2 = np.random.rand(<span class=\"number\">5</span>) * <span class=\"number\">5</span></span><br><span class=\"line\">y3 = np.random.rand(<span class=\"number\">5</span>) * <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(</span><br><span class=\"line\">    data=[</span><br><span class=\"line\">        <span class=\"comment\"># name为图例名，textfont设置字体属性，mode为绘图模式，marker设置颜色否则后续导出图像会丢失颜色（不导出可不设置该参数也有默认颜色）</span></span><br><span class=\"line\">        go.Scatter(name=<span class=\"string\">&#x27;Lines&#x27;</span>, x=x, y=y1, textfont=<span class=\"built_in\">dict</span>(size=<span class=\"number\">25</span>), mode=<span class=\"string\">&#x27;lines&#x27;</span>, marker=<span class=\"built_in\">dict</span>(color=<span class=\"string\">&#x27;#0068C9&#x27;</span>)),</span><br><span class=\"line\">        go.Scatter(name=<span class=\"string\">&#x27;Markers&#x27;</span>, x=x, y=y2, textfont=<span class=\"built_in\">dict</span>(size=<span class=\"number\">25</span>), mode=<span class=\"string\">&#x27;markers&#x27;</span>),</span><br><span class=\"line\">        go.Scatter(name=<span class=\"string\">&#x27;Lines&amp;Markers&#x27;</span>, x=x, y=y3, textfont=<span class=\"built_in\">dict</span>(size=<span class=\"number\">25</span>), mode=<span class=\"string\">&#x27;lines+markers&#x27;</span>),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置图像格式</span></span><br><span class=\"line\">fig.update_layout(</span><br><span class=\"line\">    autosize=<span class=\"literal\">False</span>, width=<span class=\"number\">1200</span>, height=<span class=\"number\">650</span>,  <span class=\"comment\"># 取消自动大小，手动设置宽高</span></span><br><span class=\"line\">    title=<span class=\"string\">&#x27;This is title&#x27;</span>,  <span class=\"comment\"># 标题</span></span><br><span class=\"line\">    xaxis=<span class=\"built_in\">dict</span>(title=<span class=\"string\">&#x27;X&#x27;</span>, nticks=<span class=\"number\">5</span>),  <span class=\"comment\"># 设置X轴属性</span></span><br><span class=\"line\">    yaxis=<span class=\"built_in\">dict</span>(title=<span class=\"string\">&#x27;Y&#x27;</span>, nticks=<span class=\"number\">11</span>, <span class=\"built_in\">range</span>=(<span class=\"number\">0</span>, <span class=\"number\">5</span>)),  <span class=\"comment\"># 设置Y轴属性，nticks表示划分为多少段</span></span><br><span class=\"line\">    showlegend=<span class=\"literal\">True</span>  <span class=\"comment\"># 显示图例</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-饼图\">2.2 饼图</h3>\n<p>饼图用于强调各项数据占总体的占比，强调个体和整体的比较。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fig = go.Figure(</span><br><span class=\"line\">    <span class=\"comment\"># textinfo表示显示内容是百分比还是标签，hoverinfo表示鼠标悬停的显示内容，pull表示每一块往外拉的比例</span></span><br><span class=\"line\">    go.Pie(labels=[<span class=\"string\">&#x27;Train data&#x27;</span>, <span class=\"string\">&#x27;Valid data&#x27;</span>], values=[<span class=\"number\">7</span>, <span class=\"number\">3</span>],</span><br><span class=\"line\">           textinfo=<span class=\"string\">&#x27;percent&#x27;</span>, hoverinfo=<span class=\"string\">&#x27;label+percent&#x27;</span>,</span><br><span class=\"line\">           textfont=<span class=\"built_in\">dict</span>(size=<span class=\"number\">15</span>), pull=[<span class=\"number\">0</span>, <span class=\"number\">0.05</span>],</span><br><span class=\"line\">           title=<span class=\"string\">&#x27;训练集划分&#x27;</span>, titlefont=<span class=\"built_in\">dict</span>(size=<span class=\"number\">18</span>),</span><br><span class=\"line\">           marker=<span class=\"built_in\">dict</span>(colors=[<span class=\"string\">&#x27;#0068C9&#x27;</span>, <span class=\"string\">&#x27;#83C9FF&#x27;</span>]))</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(</span><br><span class=\"line\">    autosize=<span class=\"literal\">False</span>, width=<span class=\"number\">600</span>, height=<span class=\"number\">450</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-直方图\">2.3 直方图</h3>\n<p>直方图虽然也和条形图一样通过矩形的长度表示数值，但他的宽度一般用于表示各组的组距，因此其高度与宽度均有意义，适合展示大量数据集的统计结果，直方图的表示的数据通常是连续排列，而柱状图则是分开排列。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = np.random.rand(<span class=\"number\">1000</span>) * <span class=\"number\">30</span>  <span class=\"comment\"># 生成1000个0-30之间的数</span></span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(</span><br><span class=\"line\">    data=[</span><br><span class=\"line\">        go.Histogram(name=<span class=\"string\">&#x27;X&#x27;</span>, x=x)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(</span><br><span class=\"line\">    autosize=<span class=\"literal\">False</span>, width=<span class=\"number\">1350</span>, height=<span class=\"number\">600</span>,</span><br><span class=\"line\">    xaxis=<span class=\"built_in\">dict</span>(title=<span class=\"string\">&#x27;Value&#x27;</span>),</span><br><span class=\"line\">    yaxis=<span class=\"built_in\">dict</span>(title=<span class=\"string\">&#x27;Count&#x27;</span>),</span><br><span class=\"line\">    showlegend=<span class=\"literal\">True</span>,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(opacity=<span class=\"number\">0.6</span>)  <span class=\"comment\"># 设置透明度</span></span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<p>可设置 <code>barmode</code> 参数实现多个直方图覆盖的效果：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x1 = np.random.rand(<span class=\"number\">1000</span>) * <span class=\"number\">30</span></span><br><span class=\"line\">x2 = np.random.rand(<span class=\"number\">500</span>) * <span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(</span><br><span class=\"line\">    data=[</span><br><span class=\"line\">        go.Histogram(name=<span class=\"string\">&#x27;X1&#x27;</span>, x=x1),</span><br><span class=\"line\">        go.Histogram(name=<span class=\"string\">&#x27;X2&#x27;</span>, x=x2)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(</span><br><span class=\"line\">    barmode=<span class=\"string\">&#x27;overlay&#x27;</span>,  <span class=\"comment\"># 设置覆盖模式</span></span><br><span class=\"line\">    autosize=<span class=\"literal\">False</span>, width=<span class=\"number\">1350</span>, height=<span class=\"number\">600</span>,</span><br><span class=\"line\">    xaxis=<span class=\"built_in\">dict</span>(title=<span class=\"string\">&#x27;Value&#x27;</span>),</span><br><span class=\"line\">    yaxis=<span class=\"built_in\">dict</span>(title=<span class=\"string\">&#x27;Count&#x27;</span>),</span><br><span class=\"line\">    showlegend=<span class=\"literal\">True</span>,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_traces(opacity=<span class=\"number\">0.6</span>)  <span class=\"comment\"># 设置透明度</span></span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-4-条形图\">2.4 条形图</h3>\n<p>条形图用于比较各组数据的差异性，强调进行个体间的比较。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = np.arange(<span class=\"number\">10</span>)</span><br><span class=\"line\">y = np.random.randint(<span class=\"number\">30</span>, size=<span class=\"number\">10</span>) + <span class=\"number\">1</span>  <span class=\"comment\"># 生成10个1~30的整数</span></span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(</span><br><span class=\"line\">    data=[</span><br><span class=\"line\">        go.Bar(name=<span class=\"string\">&#x27;Bar1&#x27;</span>, x=x, y=y, textfont=<span class=\"built_in\">dict</span>(size=<span class=\"number\">25</span>))</span><br><span class=\"line\">    ]</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(</span><br><span class=\"line\">    autosize=<span class=\"literal\">False</span>, width=<span class=\"number\">800</span>, height=<span class=\"number\">500</span>,</span><br><span class=\"line\">    title=<span class=\"string\">&#x27;Bar&#x27;</span>,</span><br><span class=\"line\">    xaxis=<span class=\"built_in\">dict</span>(title=<span class=\"string\">&#x27;X&#x27;</span>),</span><br><span class=\"line\">    yaxis=<span class=\"built_in\">dict</span>(title=<span class=\"string\">&#x27;Y&#x27;</span>),</span><br><span class=\"line\">    showlegend=<span class=\"literal\">True</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-5-热力图\">2.5 热力图</h3>\n<p>热力图是一种特殊的图表，它是一种通过对色块着色来显示数据的统计图表，在绘图时，需要指定每个颜色映射的规则（一般以颜色的强度或色调为标准）；比如颜色越深的表示数值越大、程度越深或者颜色越浅的数值越大、程度越深。热力图适合用于查看总体的情况、观察特殊值或者显示多个变量之间的差异性、检测它们之间是否存在相关性等等。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df = pd.read_csv(<span class=\"string\">&#x27;../data/MODIS/test_data.csv&#x27;</span>, nrows=<span class=\"number\">10</span>)  <span class=\"comment\"># [10 rows x 22 columns]</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(df.head(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"comment\">#    FSC       SR1       SR2       SR3  ...       LST       A2T   SC  LCT</span></span><br><span class=\"line\"><span class=\"comment\"># 0  1.0  0.587019  0.551739  0.565093  ...  0.129661  0.205581  1.0  0.8</span></span><br><span class=\"line\"></span><br><span class=\"line\">pearson = df.corr()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(pearson.values.shape)  <span class=\"comment\"># (22, 22)</span></span><br><span class=\"line\">features = df.columns.values  <span class=\"comment\"># 或者features = pearson.index.values</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(features)  <span class=\"comment\"># [&#x27;FSC&#x27; &#x27;SR1&#x27; &#x27;SR2&#x27; &#x27;SR3&#x27; ...]</span></span><br><span class=\"line\"></span><br><span class=\"line\">fig = go.Figure(</span><br><span class=\"line\">    data=[</span><br><span class=\"line\">        go.Heatmap(x=features, y=features, z=pearson.values, colorscale=<span class=\"string\">&#x27;blues&#x27;</span>)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.update_layout(</span><br><span class=\"line\">    autosize=<span class=\"literal\">False</span>, width=<span class=\"number\">900</span>, height=<span class=\"number\">900</span>,</span><br><span class=\"line\">    title=<span class=\"string\">&#x27;皮尔逊相关系数热力图&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 以下注释的两行代码用于保存本地时调整字体的大小防止显示不全</span></span><br><span class=\"line\">    <span class=\"comment\"># xaxis=dict(title=&#x27;Feature&#x27;, titlefont=dict(size=10), tickfont=dict(size=8)),</span></span><br><span class=\"line\">    <span class=\"comment\"># yaxis=dict(title=&#x27;Feature&#x27;, titlefont=dict(size=10), tickfont=dict(size=8)),</span></span><br><span class=\"line\">    xaxis=<span class=\"built_in\">dict</span>(title=<span class=\"string\">&#x27;Features&#x27;</span>),</span><br><span class=\"line\">    yaxis=<span class=\"built_in\">dict</span>(title=<span class=\"string\">&#x27;Features&#x27;</span>),</span><br><span class=\"line\">    showlegend=<span class=\"literal\">True</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">fig.show()</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-6-导出图像到本地\">2.6 导出图像到本地</h3>\n<p>首先我们需要安装两个依赖项：<code>orca</code> 和 <code>psutil</code>，<code>orca</code> 在 PyPi 存储库中不可用，因此需要使用 <code>conda</code> 安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install -c plotly plotly-orca psutil</span><br></pre></td></tr></table></figure>\n<p>或者直接安装 <code>kaleido</code> 模块：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install kaleido</span><br></pre></td></tr></table></figure>\n<p>安装完成后即可使用 Plotly 的 <code>io</code> 库导出图像（格式可以是 SVG、JPG、PNG等）：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> plotly.io <span class=\"keyword\">as</span> pio</span><br><span class=\"line\"></span><br><span class=\"line\">pio.write_image(fig, <span class=\"string\">&#x27;images/figure.svg&#x27;</span>)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://asanosaki.github.io/posts/55.html",
            "url": "https://asanosaki.github.io/posts/55.html",
            "title": "Python路径操作模块pathlib教程",
            "date_published": "2023-03-31T02:47:00.000Z",
            "content_html": "<blockquote>\n<p>Python 路径操作新标准：<code>pathlib</code> 模块相较于老式的 <code>os.path</code> 更为简洁易用，本文为该模块的使用教程。</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><code>pathlib</code> 库从 Python 3.4 开始，到 Python 3.6 已经比较成熟。如果你的新项目可以直接用 3.6 及以上，建议用 <code>pathlib</code>。相比于老式的 <code>os.path</code> 有几个优势：</p>\n<ul>\n<li>老的路径操作函数管理比较混乱，有的是导入 <code>os</code>，有的又是在 <code>os.path</code> 当中，而新的用法统一可以用 <code>pathlib</code> 管理。</li>\n<li>老用法在处理不同操作系统 Win、Mac 以及 Linux 之间很吃力。换了操作系统常常要改代码，还经常需要进行一些额外操作。</li>\n<li>老用法主要是函数形式，返回的数据类型通常是字符串。但是路径和字符串并不等价，所以在使用 <code>os</code> 操作路径的时候常常还要引入其他类库协助操作。新用法是面向对象，处理起来更灵活方便。</li>\n<li><code>pathlib</code> 简化了很多操作，用起来更轻松。</li>\n</ul>\n<h2 id=\"1-路径获取\">1. 路径获取</h2>\n<p><strong>（1）获取当前工作目录</strong></p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(pathlib.Path.cwd())  <span class=\"comment\"># D:\\Dive into Deep Learning\\src</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(pathlib.Path.cwd()))  <span class=\"comment\"># D:\\Dive into Deep Learning\\src</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：工作目录是在哪个目录下运行你的程序，不是项目目录。</p>\n</blockquote>\n<p>虽然在这里打印出来的很像一个字符串，但实际上得到的是一个 <code>WindowsPath('D:\\Dive into Deep Learning\\src')</code> 对象，如果只想得到字符串表示，不想要 <code>WindowsPath</code> 对象，可以用 <code>str()</code> 转化。</p>\n<p><strong>（2）获取用户 Home 目录</strong></p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(pathlib.Path.home())  <span class=\"comment\"># C:\\Users\\AsanoSaki</span></span><br></pre></td></tr></table></figure>\n<p><strong>（3）获取当前文件路径</strong></p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(pathlib.Path(__file__))  <span class=\"comment\"># D:\\Dive into Deep Learning\\src\\路径操作.py</span></span><br></pre></td></tr></table></figure>\n<p><strong>（4）获取任意字符串路径</strong></p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dir_path = pathlib.Path(<span class=\"string\">&#x27;../images&#x27;</span>)</span><br><span class=\"line\">file_path = pathlib.Path(<span class=\"string\">&#x27;../images/cat1.jpg&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dir_path)  <span class=\"comment\"># ..\\images</span></span><br></pre></td></tr></table></figure>\n<p><strong>（5）获取绝对路径</strong></p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(dir_path.resolve())  <span class=\"comment\"># D:\\Dive into Deep Learning\\images</span></span><br></pre></td></tr></table></figure>\n<p><strong>（6）获取文件属性</strong></p>\n<p>文件属性比如文件大小、创建时间、修改时间等。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(file_path.stat())  <span class=\"comment\"># os.stat_result(st_mode=33206, st_ino=281474978388098, st_dev=80873957, st_nlink=1, st_uid=0, st_gid=0, st_size=53081, st_atime=1680229254, st_mtime=1670460384, st_ctime=1680228818)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(file_path.stat().st_size)  <span class=\"comment\"># 53081</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-路径组成部分\">2. 路径组成部分</h2>\n<p>获取路径的组成部分非常方便：</p>\n<ul>\n<li><code>.name</code>：文件名，包含后缀名，如果是目录则获取目录名。</li>\n<li><code>.stem</code>：文件名，不包含后缀。</li>\n<li><code>.suffix</code>：后缀，比如 <code>.txt</code>、<code>.png</code>。</li>\n<li><code>.parent</code>：父级目录，相当于 <code>cd ..</code>。</li>\n<li><code>.anchor</code>：锚，目录前面的部分 <code>C:\\</code> 或者 <code>/</code>。</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(file_path.name)  <span class=\"comment\"># cat1.jpg</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(file_path.stem)  <span class=\"comment\"># cat1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(file_path.suffix)  <span class=\"comment\"># .jpg</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(file_path.parent)  <span class=\"comment\"># ..\\images</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-子路径扫描\">3. 子路径扫描</h2>\n<p><strong>（1）扫描某个目录下的所有路径</strong></p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all_path = [<span class=\"built_in\">str</span>(p) <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> dir_path.iterdir() <span class=\"keyword\">if</span> dir_path.is_dir()]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(all_path)  <span class=\"comment\"># [&#x27;..\\\\images\\\\cat1.jpg&#x27;, &#x27;..\\\\images\\\\cat2.jpg&#x27;, &#x27;..\\\\images\\\\cat3.jpg&#x27;, &#x27;..\\\\images\\\\catdog.jpg&#x27;]</span></span><br></pre></td></tr></table></figure>\n<p><strong>（2）使用模式匹配（正则表达式）查找目录下的指定文件</strong></p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all_jpg = <span class=\"built_in\">list</span>(dir_path.glob(<span class=\"string\">&#x27;*.jpg&#x27;</span>))</span><br><span class=\"line\">all_jpg_strpath = [<span class=\"built_in\">str</span>(p) <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> all_jpg]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(all_jpg)  <span class=\"comment\"># [WindowsPath(&#x27;../images/cat1.jpg&#x27;), WindowsPath(&#x27;../images/cat2.jpg&#x27;), WindowsPath(&#x27;../images/cat3.jpg&#x27;), WindowsPath(&#x27;../images/catdog.jpg&#x27;)]</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(all_jpg_strpath)  <span class=\"comment\"># [&#x27;..\\\\images\\\\cat1.jpg&#x27;, &#x27;..\\\\images\\\\cat2.jpg&#x27;, &#x27;..\\\\images\\\\cat3.jpg&#x27;, &#x27;..\\\\images\\\\catdog.jpg&#x27;]</span></span><br></pre></td></tr></table></figure>\n<p><strong>（3）检查路径是否符合规则</strong></p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(file_path.<span class=\"keyword\">match</span>(<span class=\"string\">&#x27;*.jpg&#x27;</span>))  <span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-路径拼接\">4. 路径拼接</h2>\n<p><code>pathlib</code> 支持用 <code>/</code> 拼接路径，如果用不惯 <code>/</code>，也可以用类似 <code>os.path.join</code> 的方法：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(dir_path / <span class=\"string\">&#x27;dir1&#x27;</span> / <span class=\"string\">&#x27;file1.txt&#x27;</span>)  <span class=\"comment\"># ..\\images\\dir1\\file1.txt</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dir_path.joinpath(<span class=\"string\">&#x27;dir1&#x27;</span>, <span class=\"string\">&#x27;file1.txt&#x27;</span>))  <span class=\"comment\"># ..\\images\\dir1\\file1.txt</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-路径测试（判断）\">5. 路径测试（判断）</h2>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(dir_path.is_file())  <span class=\"comment\"># 是否为文件，False</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dir_path.is_dir())  <span class=\"comment\"># 是否为文件夹，True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(dir_path.exists())  <span class=\"comment\"># 是否存在，True</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"6-文件操作\">6. 文件操作</h2>\n<p><strong>（1）创建文件</strong></p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_file = pathlib.Path(<span class=\"string\">&#x27;../images/readme.txt&#x27;</span>)</span><br><span class=\"line\">new_file.touch(exist_ok=<span class=\"literal\">True</span>)</span><br><span class=\"line\">new_file.touch(exist_ok=<span class=\"literal\">False</span>)  <span class=\"comment\"># FileExistsError: [Errno 17] File exists: &#x27;..\\\\images\\\\readme.txt&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><code>exist_ok</code> 表示当文件已经存在时，程序的反应。如果为 <code>True</code>，文件存在时，不进行任何操作；如果为 <code>False</code>，则会报 <code>FileExistsError</code> 错误。</p>\n<p><strong>（2）创建目录</strong></p>\n<p>用 <code>os</code> 创建目录分为两个函数：<code>mkdir()</code> 和 <code>makedirs()</code>。<code>mkdir()</code> 一次只能创建一级目录，<code>makedirs()</code> 可以同时创建多级目录。使用 <code>pathlib</code> 只需要用 <code>path.mkdir()</code> 函数就可以。它提供了 <code>parents</code> 参数，设置为 <code>True</code> 可以创建多级目录，不设置则只能创建一层：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_dir = pathlib.Path(<span class=\"string\">&#x27;../images/dir1/dir2&#x27;</span>)</span><br><span class=\"line\">new_dir.mkdir()  <span class=\"comment\"># FileNotFoundError: [WinError 3] The system cannot find the path specified: &#x27;..\\\\images\\\\dir1\\\\dir2&#x27;</span></span><br><span class=\"line\">new_dir.mkdir(parents=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>（3）删除目录</strong></p>\n<p>删除目录非常危险，并且没有提示，一定要谨慎操作。一次只删除一级目录，且当前目录必须为空：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">del_dir = pathlib.Path(<span class=\"string\">&#x27;../images/dir&#x27;</span>)</span><br><span class=\"line\">del_dir.rmdir()</span><br></pre></td></tr></table></figure>\n<p><strong>（4）删除文件</strong></p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">del_file = pathlib.Path(<span class=\"string\">&#x27;../images/readme.txt&#x27;</span>)</span><br><span class=\"line\">del_file.unlink()</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Python"
            ]
        }
    ]
}