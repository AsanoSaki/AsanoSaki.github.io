<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://asanosaki.github.io</id>
    <title>AsanoSaki • Posts by &#34;interview&#34; tag</title>
    <link href="https://asanosaki.github.io" />
    <updated>2023-11-24T09:09:00.000Z</updated>
    <category term="AI" />
    <category term="Others" />
    <category term="Python" />
    <category term="Java" />
    <category term="Hexo" />
    <category term="Interview" />
    <category term="Linux" />
    <category term="Web" />
    <category term="Essay" />
    <category term="C++" />
    <entry>
        <id>https://asanosaki.github.io/posts/2329.html</id>
        <title>Spring面试题总结</title>
        <link rel="alternate" href="https://asanosaki.github.io/posts/2329.html"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;Spring 面试题总结，涉及 Spring、Spring MVC、Spring Boot、Spring Cloud、MyBatis 等内容，文章将不断更新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h1&gt;1. Spring&lt;/h1&gt;
&lt;h2 id=&#34;1-1-Spring框架是什么？有什么优势？&#34;&gt;1.1 Spring框架是什么？有什么优势？&lt;/h2&gt;
&lt;p&gt;Spring 框架是一个轻量级的 Java 开发框架，目的是为了解决企业级应用开发的业务逻辑层和其他各层的耦合问题。它是一个分层的 JavaSE/JavaEE full-stack（一站式）轻量级开源框架，为开发 Java 应用程序提供全面的基础架构支持。Spring 的最根本的使命是解决企业级应用开发的复杂性，即简化 Java 开发。Spring 框架的优势主要包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方便解耦，简化开发：Spring 就是一个大工厂，可以将所有对象的创建和依赖关系的维护，交给 Spring 管理。&lt;/li&gt;
&lt;li&gt;AOP 编程的支持：Spring 提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能。&lt;/li&gt;
&lt;li&gt;声明式事务的支持：只需要通过配置就可以完成对事务的管理，而无需手动编程。&lt;/li&gt;
&lt;li&gt;方便程序的测试：Spring 对 Junit4 支持，可以通过注解方便地测试 Spring 程序。&lt;/li&gt;
&lt;li&gt;方便集成各种优秀框架：Spring 不排斥各种优秀的开源框架，其内部提供了对各种优秀框架（如：Struts、Hibernate、MyBatis 等）的直接支持。&lt;/li&gt;
&lt;li&gt;降低 JavaEE API 的使用难度：Spring 对 JavaEE 开发中非常难用的一些 API（如 JDBC、JavaMail、远程调用等），都提供了封装，使这些 API 应用难度大大降低。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-2-什么是Spring-IoC容器？&#34;&gt;1.2 什么是Spring IoC容器？&lt;/h2&gt;
&lt;p&gt;Spring IoC（Spring Inversion of Control）容器，是 Spring 框架的核心部分。IoC 即&lt;strong&gt;控制反转&lt;/strong&gt;，是一种设计思想，在 Java 开发中，IoC 意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。&lt;/p&gt;
&lt;p&gt;Spring IoC 容器负责实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。具体来说，Spring IoC 容器负责创建对象、管理对象（通过依赖注入）、装配对象、配置对象，并且管理这些对象的整个生命周期。&lt;/p&gt;
&lt;p&gt;使用 IoC 的目的，主要是为了降低类之间的耦合。通过控制反转，对象的创建和对象之间的依赖关系处理，交给 Spring 容器来管理，不用程序员自己创建和维护。这样，应用程序无需直接在代码中创建相关的对象，应用程序由 IoC 容器进行组装。这种方式不仅降低了类之间的耦合，也使得代码更加简洁，更易于测试和维护。&lt;/p&gt;
&lt;h2 id=&#34;1-3-什么是依赖注入？&#34;&gt;1.3 什么是依赖注入？&lt;/h2&gt;
&lt;p&gt;依赖注入（Dependency Injection，DI）是一种设计模式，也是 Spring 框架的核心概念之一。它的主要作用是去除 Java 类之间的依赖关系，实现松耦合，以便于开发测试。&lt;/p&gt;
&lt;p&gt;在传统的程序设计过程中，当某个角色（可能是一个 Java 实例，调用者）需要另一个角色（另一个 Java 实例，被调用者）的协助时，通常由调用者来创建被调用者的实例。这种方式会导致调用者与被调用者之间产生紧密的耦合关系，使得代码难以修改和测试。&lt;/p&gt;
&lt;p&gt;依赖注入的思想是，不在类内部直接创建依赖类的对象，而是将依赖的类对象在外部创建好之后，通过构造函数、函数参数等方式传递（或注入）给需要的类来使用。例如，&lt;code&gt;A&lt;/code&gt; 类要依赖 &lt;code&gt;B&lt;/code&gt; 类，&lt;code&gt;A&lt;/code&gt; 类不再直接创建 &lt;code&gt;B&lt;/code&gt; 类，而是把这种依赖关系配置在外部 XML（或 Java Config）文件中，然后由 Spring 容器根据配置信息创建、管理 &lt;code&gt;bean&lt;/code&gt; 类。&lt;/p&gt;
&lt;p&gt;这样，调用者不需要关心被调用者的创建和销毁，只需要关心如何使用被调用者，从而实现了调用者和被调用者之间的解耦。这种方式不仅降低了类之间的耦合，也使得代码更加简洁，更易于测试和维护。&lt;/p&gt;
&lt;p&gt;举一个例子，加入我们有一个接口和两个实现类：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MessageService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String &lt;span class=&#34;title function_&#34;&gt;getMessage&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TextMessageService&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MessageService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title function_&#34;&gt;getMessage&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Text Message&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;EmailMessageService&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MessageService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title function_&#34;&gt;getMessage&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Email Message&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，我们有一个使用 &lt;code&gt;MessageService&lt;/code&gt; 的 &lt;code&gt;MessagePrinter&lt;/code&gt; 类：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MessagePrinter&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; MessageService service;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 通过构造器注入依赖&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;MessagePrinter&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(MessageService service)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.service = service;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;printMessage&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.service.getMessage());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 Spring 的配置文件中，我们可以定义 &lt;code&gt;MessageService&lt;/code&gt; 和 &lt;code&gt;MessagePrinter&lt;/code&gt; 的 &lt;code&gt;bean&lt;/code&gt;，并通过构造器注入依赖：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;messageService&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;com.example.TextMessageService&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;messagePrinter&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;com.example.MessagePrinter&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;constructor-arg&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;ref&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;messageService&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中，&lt;code&gt;MessagePrinter&lt;/code&gt; 依赖于 &lt;code&gt;MessageService&lt;/code&gt;。通过 Spring IoC 容器和依赖注入，我们可以在外部配置文件中定义这种依赖关系，而不需要在 &lt;code&gt;MessagePrinter&lt;/code&gt; 类中硬编码依赖的实现类。这样，我们可以轻松地更改 &lt;code&gt;MessageService&lt;/code&gt; 的实现，而无需修改 &lt;code&gt;MessagePrinter&lt;/code&gt; 类的代码，这就是依赖注入的优势。&lt;/p&gt;
&lt;p&gt;如果我们运行 &lt;code&gt;MessagePrinter&lt;/code&gt; 的 &lt;code&gt;printMessage()&lt;/code&gt; 方法，它将打印出 &lt;code&gt;Text Message&lt;/code&gt;。这是因为我们在 Spring 的配置文件中将 &lt;code&gt;TextMessageService&lt;/code&gt; 定义为 &lt;code&gt;MessageService&lt;/code&gt; 的实现类，然后通过构造器注入的方式将其注入到了 &lt;code&gt;MessagePrinter&lt;/code&gt; 中。所以，当我们调用 &lt;code&gt;printMessage()&lt;/code&gt; 方法时，它会调用 &lt;code&gt;TextMessageService&lt;/code&gt; 的 &lt;code&gt;getMessage()&lt;/code&gt; 方法。&lt;/p&gt;
&lt;p&gt;总的来说，依赖注入是一种消除类之间依赖关系的设计模式，它使得对象之间的依赖关系更加清晰，代码更加灵活，更易于测试和维护。&lt;/p&gt;
&lt;h2 id=&#34;1-4-依赖注入有几种方式？&#34;&gt;1.4 依赖注入有几种方式？&lt;/h2&gt;
&lt;p&gt;在 Spring 中，有四种常见的依赖注入方式：&lt;/p&gt;
&lt;p&gt;（1）属性注入（Field Injection）：直接在需要注入的字段上使用 &lt;code&gt;@Autowired&lt;/code&gt; 或 &lt;code&gt;@Resource&lt;/code&gt; 等注解：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;UserService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; UserMapper userMapper;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（2）Setter 注入（Setter Injection）：在 &lt;code&gt;setter&lt;/code&gt; 方法上使用 &lt;code&gt;@Autowired&lt;/code&gt; 或 &lt;code&gt;@Resource&lt;/code&gt; 等注解。在 SpringBoot 中，由于 WebSocket 的特殊性，它是由容器管理的，而不是由 Spring 管理的 Bean，每次 WebSocket 连接都会创建一个新的 WebSocket 实例（非单例模式），因此不能直接使用属性注入的方式来注入 WebSocket。假如我们要在 WebSocket 中使用 Mapper，那么我们就可以用 Setter 注入的方式：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@ServerEndpoint(value = &amp;quot;/websocket&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;WebSocketServer&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; UserMapper userMapper;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;setUserMapper&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(UserMapper userMapper)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        WebSocketServer.userMapper = userMapper;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（3）构造器注入（Constructor Injection）：在构造器上使用 &lt;code&gt;@Autowired&lt;/code&gt; 或 &lt;code&gt;@Resource&lt;/code&gt; 等注解：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;UserService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; UserMapper userMapper;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;UserService&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(UserMapper userMapper)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.userMapper = userMapper;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（4）静态工厂的方法注入：通过静态工厂方法创建 Bean，并在 Spring 配置文件中声明：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BeanFactory&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; UserService &lt;span class=&#34;title function_&#34;&gt;createUserService&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;UserService&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 Spring 配置文件中声明：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;userService&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;com.example.BeanFactory&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;factory-method&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;createUserService&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;1-5-Spring中的Bean是什么？&#34;&gt;1.5 Spring中的Bean是什么？&lt;/h2&gt;
&lt;p&gt;在 Spring 中，构成应用程序主干并由 Spring IoC 容器管理的对象称为 Bean。Bean 是一个由 Spring IoC 容器实例化、组装和管理的对象。简而言之，Spring Bean 是 Spring 框架在运行时管理的对象。Spring Bean 是任何 Spring 应用程序的基本构建块。你编写的大多数应用程序逻辑代码都将放在 Spring Bean 中。Spring Bean 的管理包括：创建一个对象，提供依赖项（例如其他 Bean，配置属性），拦截对象方法调用以提供额外的框架功能，销毁一个对象。&lt;/p&gt;
&lt;h2 id=&#34;1-6-BeanFactory和ApplicationContext有什么区别？&#34;&gt;1.6 BeanFactory和ApplicationContext有什么区别？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;BeanFactory&lt;/code&gt; 和 &lt;code&gt;ApplicationContext&lt;/code&gt; 都是 Spring 框架中用于创建和管理 Bean 的容器。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BeanFactory&lt;/code&gt; 是 Spring 框架的最基本的容器，它是 Spring 的核心部分。&lt;code&gt;BeanFactory&lt;/code&gt; 通过一个配置文件来管理和创建 Bean。&lt;code&gt;BeanFactory&lt;/code&gt; 中的 Bean 是懒加载的，也就是说只有在调用 &lt;code&gt;getBean()&lt;/code&gt; 方法去请求某个 Bean 时才会创建实例，这样可以提高程序的性能和启动速度，帮助我们节省资源。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ApplicationContext&lt;/code&gt; 是 &lt;code&gt;BeanFactory&lt;/code&gt; 的子接口，它是一个更加强大的容器。&lt;code&gt;ApplicationContext&lt;/code&gt; 可以像 &lt;code&gt;BeanFactory&lt;/code&gt; 一样创建和管理 Bean，但是它还可以提供其他的功能，比如支持国际化、事件传播、资源加载等。&lt;code&gt;ApplicationContext&lt;/code&gt; 是在程序启动时就将所有的 Bean 全部实例化，因此在程序运行时可以直接获取已经创建好的 Bean，从而提高了程序的响应速度。&lt;/p&gt;
&lt;h2 id=&#34;1-7-Spring提供了哪些配置方式？&#34;&gt;1.7 Spring提供了哪些配置方式？&lt;/h2&gt;
&lt;p&gt;Spring 提供了以下三种主要的配置方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于 XML 的配置：在 Spring1.x 时代，都是基于 XML 来进行配置，用 XML 文件来管理 Bean 之间的关系。例如，你可以在 XML 文件中定义一个 Bean，然后在需要的地方引用这个 Bean。&lt;/li&gt;
&lt;li&gt;基于注解的配置：Spring2.5 以后开始支持用注解的方式来配置依赖注入。可以用注解的方式来替代 XML 方式的 Bean 描述，可以将 Bean 描述转移到组件类的内部，只需要在相关类上、方法上或者字段声明上使用注解即可。例如，你可以使用 &lt;code&gt;@Component&lt;/code&gt; 或其子类（&lt;code&gt;@Repository&lt;/code&gt;、&lt;code&gt;@Service&lt;/code&gt;、&lt;code&gt;@Controller&lt;/code&gt;）来定义 Bean。&lt;/li&gt;
&lt;li&gt;基于 Java API 的配置：Spring3.0 以后，提供了 Java 配置的能力，Spring4.x和SpringBoot都推荐使用Java配置2。例如，你可以使用@Configuration和@Bean注解来定义和配置bean12。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意 Spring 框架默认并不启用注解配置方式，你需要在配置文件中添加相应的配置才能启用注解配置方式：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;&amp;lt;!-- 启用注解配置 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;context:annotation-config&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;&amp;lt;!-- 其他bean的定义 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;context:annotation-config/&amp;gt;&lt;/code&gt; 是 Spring 框架中的一个 XML 配置元素，用于启用注解驱动的 Spring 容器。它会自动扫描 Spring 容器中的所有组件，包括 &lt;code&gt;@Service&lt;/code&gt;、&lt;code&gt;@Repository&lt;/code&gt;、&lt;code&gt;@Controller&lt;/code&gt;、&lt;code&gt;@Component&lt;/code&gt; 等注解标注的类，并将它们注册到 Spring 容器中。&lt;/p&gt;
&lt;p&gt;也可以使用 &lt;code&gt;&amp;lt;context:component-scan/&amp;gt;&lt;/code&gt;，如果使用了 &lt;code&gt;&amp;lt;context:component-scan/&amp;gt;&lt;/code&gt;，那么 &lt;code&gt;&amp;lt;context:annotation-config/&amp;gt;&lt;/code&gt; 就不再需要，因为 &lt;code&gt;&amp;lt;context:component-scan/&amp;gt;&lt;/code&gt; 除了具有 &lt;code&gt;&amp;lt;context:annotation-config/&amp;gt;&lt;/code&gt; 的功能之外，还可以在指定的 Package 下扫描以及注册 Java Bean。&lt;/p&gt;
&lt;h2 id=&#34;1-8-Bean的作用域有哪些？&#34;&gt;1.8 Bean的作用域有哪些？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;singleton&lt;/code&gt;：单例模式，在整个 Spring IoC 容器中，使用 &lt;code&gt;singleton&lt;/code&gt; 定义的 Bean 将只有一个实例。这是 Spring 的默认作用域。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prototype&lt;/code&gt;：原型模式，每次通过容器的 &lt;code&gt;getBean()&lt;/code&gt; 方法获取 &lt;code&gt;prototype&lt;/code&gt; 定义的 Bean 时，都将产生一个新的 Bean 实例。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;request&lt;/code&gt;：对于每次 HTTP 请求，使用 &lt;code&gt;request&lt;/code&gt; 定义的 Bean 都将产生一个新实例。只有在 Web 应用中使用 Spring 时，该作用域才有效。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session&lt;/code&gt;：对于每次 HTTP Session，使用 &lt;code&gt;session&lt;/code&gt; 定义的 Bean 都将产生一个新实例。同样只有在 Web 应用中使用 Spring 时，该作用域才有效。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;application&lt;/code&gt;：限定一个 Bean 的作用域为 &lt;code&gt;ServletContext&lt;/code&gt; 的生命周期。该作用域仅适用于 Web 的 Spring WebApplicationContext 环境。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;globalSession&lt;/code&gt;：全局 Session 作用域，仅在基于 &lt;code&gt;portlet&lt;/code&gt; 的 Web 应用中才有意义，Spring5 已经没有了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-9-如何理解IoC和DI？&#34;&gt;1.9 如何理解IoC和DI？&lt;/h2&gt;
&lt;p&gt;IoC（Inversion of Control，控制反转）和 DI（Dependency Injection，依赖注入）是 Spring 框架的核心概念，它们是面向对象编程的重要设计原则。IoC 和 DI 是同一个概念的不同角度描述，IoC 是一种设计思想，DI 是这种思想的一种实现方式。&lt;/p&gt;
&lt;p&gt;IoC 是一种设计思想，不是一种技术。在 Java 开发中，IoC 意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。这意味着，所有的类都会在 Spring 容器中登记，告诉 Spring 你是什么，你需要什么，然后 Spring 会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、销毁都由 Spring 来控制，也就是说控制对象生存周期的不再是引用它的对象，而是 Spring。&lt;/p&gt;
&lt;p&gt;DI 是 IoC 的一种实现方式。DI 是一种将调用者与被调用者分离的思想，组件之间的依赖关系由容器在运行时决定，形象的说，是由容器动态地将某个依赖关系注入到组件之中，这样你就可以使用 &lt;code&gt;@Autowired&lt;/code&gt;、&lt;code&gt;@Resource&lt;/code&gt; 等注解来实现自动注入。&lt;/p&gt;
&lt;h2 id=&#34;1-10-Bean的生命周期有几个阶段？&#34;&gt;1.10 Bean的生命周期有几个阶段？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;实例化（Instantiation）：Spring 根据配置文件或注解等方式创建 Bean 的实例。&lt;/li&gt;
&lt;li&gt;属性赋值（Populate）：Spring 将实例化后的 Bean 的属性值设置到对应的属性中。&lt;/li&gt;
&lt;li&gt;初始化（Initialization）：如果 Bean 实现了 &lt;code&gt;InitializingBean&lt;/code&gt; 接口或在配置文件中通过 &lt;code&gt;init-method&lt;/code&gt; 指定了初始化方法，则在 Bean 初始化完成后调用该方法。&lt;/li&gt;
&lt;li&gt;销毁（Destruction）：如果 Bean 实现了 &lt;code&gt;DisposableBean&lt;/code&gt; 接口或在配置文件中通过 &lt;code&gt;destroy-method&lt;/code&gt; 指定了销毁方法，则在容器关闭时会调用该方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-11-什么是AOP？&#34;&gt;1.11 什么是AOP？&lt;/h2&gt;
&lt;p&gt;AOP（Aspect Oriented Programming），即&lt;strong&gt;面向切面编程&lt;/strong&gt;，是一种通过预编译方式和运行期动态代理实现程序功能的统一维护的技术。它是 OOP（面向对象编程）的延续，也是 Spring 框架中的一个重要内容，是函数式编程的一种衍生范型。&lt;/p&gt;
&lt;p&gt;AOP 的主要目标是将业务处理逻辑与系统服务分离开来，然后通过声明性的方式将系统服务应用到业务处理逻辑中。简单来说，AOP 就是把我们程序重复的代码抽取出来，在需要执行的时候使用动态代理技术在不修改源码的基础上，对我们的已有方法进行增强。&lt;/p&gt;
&lt;p&gt;AOP 的主要术语包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;切面（Aspect）：切面是一个横切关注点的模块化，一个切面能够包含同一个类型的不同增强方法，比如说事务处理和日志处理可以理解为两个切面。&lt;/li&gt;
&lt;li&gt;连接点（JoinPoint）：程序执行过程中明确的点，如方法的调用或特定的异常被抛出。&lt;/li&gt;
&lt;li&gt;切入点（PointCut）：切入点是对连接点进行拦截的条件定义。&lt;/li&gt;
&lt;li&gt;通知（Advice）：通知是指拦截到连接点之后要执行的代码，包括了 &lt;code&gt;around&lt;/code&gt;、&lt;code&gt;before&lt;/code&gt; 和 &lt;code&gt;after&lt;/code&gt; 等不同类型的通知。&lt;/li&gt;
&lt;li&gt;目标对象（Target）：目标对象指将要被增强的对象，即包含主业务逻辑的类对象。&lt;/li&gt;
&lt;li&gt;织入（Weaving）：织入是将切面和业务逻辑对象连接起来，并创建通知代理的过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-12-AOP的实现方式有哪些？&#34;&gt;1.12 AOP的实现方式有哪些？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;通过 Spring API 实现：这种方式的核心是通过编写增强类来继承 Spring API 提供的接口。例如，你可以编写业务接口和实现类，然后编写增强类，并实现 Spring API 相关接口的方法。然后在 &lt;code&gt;resource&lt;/code&gt; 目录下新建 &lt;code&gt;applicationContext&lt;/code&gt; 文件，实现 Java 类的创建和 AOP 的织入，最后编写测试类。&lt;/li&gt;
&lt;li&gt;通过自定义类来实现：这种方式比较推荐。你可以自定义切入类，然后在 Spring 中配置，最后编写测试类。&lt;/li&gt;
&lt;li&gt;使用注解实现：你可以自定义增强类（注解实现），然后在 Spring 配置文件中，注册 Bean，并增加支持注解的配置，最后编写测试类。&lt;/li&gt;
&lt;li&gt;使用 JDK 提供的代理方式：这种方式不依赖于 Spring。你可以使用 JDK 提供的代理方式来实现 AOP，包括静态和动态两种方式。&lt;/li&gt;
&lt;li&gt;使用 Spring 纯配置实现：你可以通过 Spring 的配置文件来实现 AOP。&lt;/li&gt;
&lt;li&gt;使用 Spring 注解：你可以通过 Spring 的注解来实现 AOP。&lt;/li&gt;
&lt;li&gt;动态代理和字节码增强：Spring AOP 的实现主要基于动态代理和字节码增强两种技术。动态代理是一种在运行时生成代理对象的技术，在代理对象中可以添加额外的逻辑，比如切面逻辑。Spring AOP 通过 JDK 动态代理和 CGLIB 动态代理两种方式实现代理对象的生成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-13-Spring框架中用到了哪些设计模式？&#34;&gt;1.13 Spring框架中用到了哪些设计模式？&lt;/h2&gt;
&lt;p&gt;（1）单例模式（Singleton）：Spring 中的 Bean 默认都是单例的，这就是单例模式的应用。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppConfig&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; MyService &lt;span class=&#34;title function_&#34;&gt;myService&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MyServiceImpl&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中，&lt;code&gt;myService&lt;/code&gt; Bean 在整个应用中只有一个实例。在单例模式中，Spring容器会确保每个由 &lt;code&gt;@Bean&lt;/code&gt; 注解定义的 Bean 在整个应用中只有一个实例。&lt;/p&gt;
&lt;p&gt;（2）工厂模式（Factory）：Spring 使用工厂模式来创建 Bean。同单例模式的示例代码所示，在这个例子中，&lt;code&gt;AppConfig&lt;/code&gt; 类就像一个工厂，&lt;code&gt;myService()&lt;/code&gt; 方法就是工厂方法，用来创建 &lt;code&gt;MyService&lt;/code&gt; 的实例。Spring 的 &lt;code&gt;@Bean&lt;/code&gt; 注解同时实现了这两种模式。&lt;/p&gt;
&lt;p&gt;（3）模板方法模式（Template Method）：Spring 的 &lt;code&gt;JdbcTemplate&lt;/code&gt; 和 &lt;code&gt;HibernateTemplate&lt;/code&gt; 等都是模板方法模式的应用。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;JdbcTemplate&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;jdbcTemplate&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;JdbcTemplate&lt;/span&gt;(dataSource);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;jdbcTemplate.execute(&lt;span class=&#34;string&#34;&gt;&amp;quot;CREATE TABLE CUSTOMERS (ID INTEGER, NAME VARCHAR(100))&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（4）代理模式（Proxy）：Spring AOP 就是通过代理模式实现的。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Aspect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LoggingAspect&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Before(&amp;quot;execution(* com.example.myapp.MyService.*(..))&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;logBefore&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(JoinPoint joinPoint)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Before method: &amp;quot;&lt;/span&gt; + joinPoint.getSignature());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中，&lt;code&gt;LoggingAspect&lt;/code&gt; 创建了一个代理，它在 &lt;code&gt;MyService&lt;/code&gt; 的所有方法执行前打印日志。&lt;/p&gt;
&lt;p&gt;（5）观察者模式（Observer）：Spring 事件处理就是观察者模式的一个例子。当一个事件被发布时，所有注册的监听器都会收到通知。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MyEventListener&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ApplicationListener&lt;/span&gt;&amp;lt;MyEvent&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;onApplicationEvent&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(MyEvent event)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Received: &amp;quot;&lt;/span&gt; + event.getData());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1&gt;2. Spring MVC&lt;/h1&gt;
&lt;h2 id=&#34;2-1-什么是Spring-MVC？工作原理是什么？&#34;&gt;2.1 什么是Spring MVC？工作原理是什么？&lt;/h2&gt;
&lt;p&gt;Spring MVC 是 Spring 框架的一部分，它是一个基于 Java 的全功能 MVC Web 应用程序框架。MVC（Model-View-Controller）代表模型-视图-控制器，这是一种&lt;strong&gt;设计模式&lt;/strong&gt;，用于将应用程序的数据访问、用户界面和业务逻辑分离开来。&lt;/p&gt;
&lt;p&gt;Spring MVC 的工作原理如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户发送请求：用户通过浏览器发送一个 HTTP 请求，直接请求到 &lt;code&gt;DispatcherServlet&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DispatcherServlet&lt;/code&gt;（前端控制器）：请求被 Spring MVC 的 &lt;code&gt;DispatcherServlet&lt;/code&gt; 捕获。&lt;code&gt;DispatcherServlet&lt;/code&gt; 的作用类似于一个中央处理器，它会负责调用其他组件来处理请求。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HandlerMapping&lt;/code&gt;（控制器映射器）：&lt;code&gt;DispatcherServlet&lt;/code&gt; 会调用 &lt;code&gt;HandlerMapping&lt;/code&gt; 解析请求对应的 &lt;code&gt;Handler&lt;/code&gt;，即找出处理这个请求的 &lt;code&gt;Controller&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Controller&lt;/code&gt;（控制器）：找到合适的 &lt;code&gt;Controller&lt;/code&gt; 后，&lt;code&gt;DispatcherServlet&lt;/code&gt; 会将请求交给它。&lt;code&gt;Controller&lt;/code&gt; 是真正处理请求的地方，它会处理用户的请求，并返回一个 &lt;code&gt;ModelAndView&lt;/code&gt; 对象。&lt;code&gt;ModelAndView&lt;/code&gt; 包含了模型（Model）数据和视图（View）名称。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ViewResolver&lt;/code&gt;（视图解析器）：&lt;code&gt;DispatcherServlet&lt;/code&gt; 会把 &lt;code&gt;ModelAndView&lt;/code&gt; 对象传给 &lt;code&gt;ViewResolver&lt;/code&gt;。&lt;code&gt;ViewResolver&lt;/code&gt; 会根据视图名称解析出真正的视图。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;View&lt;/code&gt;（视图）：最后，&lt;code&gt;DispatcherServlet&lt;/code&gt; 会渲染视图，并把模型数据填充进去。这个视图就是最终呈现给用户的页面。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-2-介绍一下Spring-MVC的核心组件&#34;&gt;2.2 介绍一下Spring MVC的核心组件&lt;/h2&gt;
&lt;p&gt;Spring MVC 的核心组件主要包括以下几个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DispatcherServlet&lt;/code&gt;（前端控制器）：这是 Spring MVC 框架的核心，负责将请求路由到其他组件。它处理所有的 HTTP 请求和响应。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HandlerMapping&lt;/code&gt;（控制器映射器）：它的任务是根据请求的 URL 找到正确的 &lt;code&gt;Controller&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Controller&lt;/code&gt;（控制器）：这是应用程序的实际控制器，负责处理用户请求并返回一个模型和视图。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HandlerAdapter&lt;/code&gt;（控制器适配器）：它负责调用 &lt;code&gt;Controller&lt;/code&gt; 中的方法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ViewResolver&lt;/code&gt;（视图解析器）：它负责解析视图名并返回一个具体的视图对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;View&lt;/code&gt;（视图）：这是最终呈现给用户的页面。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除此之外，Spring MVC 还有一些其他的组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HandlerExceptionResolver&lt;/code&gt;（处理器异常解析器）：它负责处理在 &lt;code&gt;Controller&lt;/code&gt; 执行过程中抛出的异常。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LocaleResolver&lt;/code&gt;（区域解析器）：它用于确定用户的区域，这对于国际化和本地化非常重要。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MultipartResolver&lt;/code&gt;（多部分解析器）：它用于处理 &lt;code&gt;multipart&lt;/code&gt; 请求，例如文件上传。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ThemeResolver&lt;/code&gt;（主题解析器）：它用于确定应用程序的主题，这对于个性化布局非常有用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RequestToViewNameTranslator&lt;/code&gt;（请求到视图名转换器）：它用于在 &lt;code&gt;Controller&lt;/code&gt; 没有明确返回视图名时，提供一个默认的视图名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FlashMapManager&lt;/code&gt;（Flash 映射管理器）：它用于存储和检索 FlashMap 模型，FlashMap 模型用于在重定向场景中存储属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;3. Spring注解&lt;/h1&gt;
&lt;h2 id=&#34;3-1-Spring中常用的注解有哪些？&#34;&gt;3.1 Spring中常用的注解有哪些？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Component&lt;/code&gt;：标注一个普通的 Spring Bean 类。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Controller&lt;/code&gt;：标注一个控制器组件类。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Service&lt;/code&gt;：标注一个业务逻辑层组件类。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Repository&lt;/code&gt;：标注一个数据访问层组件类。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Autowired&lt;/code&gt;：由 Spring 提供的注解，用于自动装配 Bean。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@RequestMapping&lt;/code&gt;：用于映射 Web 请求，包括访问路径和参数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@ResponseBody&lt;/code&gt;：支持将返回值放在 &lt;code&gt;response&lt;/code&gt; 内，而不是一个页面，通常用户返回 JSON 数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@RestController&lt;/code&gt;：该注解为一个组合注解，相当于 &lt;code&gt;@Controller&lt;/code&gt; 和 &lt;code&gt;@ResponseBody&lt;/code&gt; 的组合，注解在类上，意味着，该 &lt;code&gt;Controller&lt;/code&gt; 的所有方法都默认加上了 &lt;code&gt;@ResponseBody&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@ExceptionHandler&lt;/code&gt;：用于全局处理控制器里的异常。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@PathVariable&lt;/code&gt;：用于接收路径参数，比如 &lt;code&gt;@RequestMapping(&amp;quot;/hello/&amp;#123;name&amp;#125;&amp;quot;)&lt;/code&gt; 申明的路径，将注解放在参数中前，即可获取该路径的 &lt;code&gt;name&lt;/code&gt; 值，通常作为 RESTful 的接口实现方法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@EnableAsync&lt;/code&gt;：在配置类中，通过此注解开启对异步任务的支持。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Async&lt;/code&gt;：在实际执行的 Bean 方法使用该注解来申明其是一个异步任务。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@EnableScheduling&lt;/code&gt;：在配置类上使用，开启计划任务的支持。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Scheduled&lt;/code&gt;：来申明这是一个任务，包括 &lt;code&gt;cron&lt;/code&gt;、&lt;code&gt;fixDelay&lt;/code&gt;、&lt;code&gt;fixRate&lt;/code&gt; 等类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-2-Controller和-RestController有什么区别？&#34;&gt;3.2 @Controller和@RestController有什么区别？&lt;/h2&gt;
&lt;p&gt;（1）&lt;code&gt;@Controller&lt;/code&gt;：&lt;code&gt;@Controller&lt;/code&gt; 注解表示该类是一个 Web 控制器，通常与 &lt;code&gt;@RequestMapping&lt;/code&gt; 注解一起使用，用于处理 HTTP 请求。在 &lt;code&gt;@Controller&lt;/code&gt; 中，我们可以返回一个视图（View），这在 Spring Web MVC 中非常常见。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Controller&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RequestMapping(&amp;quot;/books&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BookController&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@GetMapping(&amp;quot;/&amp;#123;id&amp;#125;&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;meta&#34;&gt;@ResponseBody&lt;/span&gt; Book &lt;span class=&#34;title function_&#34;&gt;getBook&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;meta&#34;&gt;@PathVariable&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; id)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; findBookById(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Book &lt;span class=&#34;title function_&#34;&gt;findBookById&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; id)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中，&lt;code&gt;BookController&lt;/code&gt; 类被标记为一个控制器，&lt;code&gt;/books&lt;/code&gt; 是它的请求映射路径。&lt;code&gt;getBook()&lt;/code&gt; 方法用于处理对 &lt;code&gt;/books/&amp;#123;id&amp;#125;&lt;/code&gt; 路径的 GET 请求，其中 &lt;code&gt;&amp;#123;id&amp;#125;&lt;/code&gt; 是路径变量。&lt;/p&gt;
&lt;p&gt;（2）&lt;code&gt;@RestController&lt;/code&gt;：&lt;code&gt;@RestController&lt;/code&gt; 是 &lt;code&gt;@Controller&lt;/code&gt; 的特化，它包含了 &lt;code&gt;@Controller&lt;/code&gt; 和 &lt;code&gt;@ResponseBody&lt;/code&gt; 两个注解。这意味着，当一个类被 &lt;code&gt;@RestController&lt;/code&gt; 注解标记后，该类的所有方法都会默认添加 &lt;code&gt;@ResponseBody&lt;/code&gt; 注解。因此通常用于创建 RESTful Web 服务。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RestController&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RequestMapping(&amp;quot;/books&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BookRestController&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@GetMapping(&amp;quot;/&amp;#123;id&amp;#125;&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Book &lt;span class=&#34;title function_&#34;&gt;getBook&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;meta&#34;&gt;@PathVariable&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; id)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; findBookById(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Book &lt;span class=&#34;title function_&#34;&gt;findBookById&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; id)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中，&lt;code&gt;BookRestController&lt;/code&gt; 类被 &lt;code&gt;@RestController&lt;/code&gt; 注解标记，因此不需要再每个请求处理方法上都添加 &lt;code&gt;@ResponseBody&lt;/code&gt; 注解。&lt;/p&gt;
&lt;p&gt;总的来说二者的主要区别在于，&lt;code&gt;@Controller&lt;/code&gt; 通常用于处理返回视图的请求，而 &lt;code&gt;@RestController&lt;/code&gt; 通常用于处理返回 JSON 或 XML 响应的请求。&lt;/p&gt;
&lt;h2 id=&#34;3-3-GetMapping、-PostMapping和-RequestMapping有什么区别？&#34;&gt;3.3 @GetMapping、@PostMapping和@RequestMapping有什么区别？&lt;/h2&gt;
&lt;p&gt;（1）&lt;code&gt;@RequestMapping&lt;/code&gt;：这是一个通用的注解，可以处理所有类型的 HTTP 请求。你可以通过 &lt;code&gt;method&lt;/code&gt; 属性来指定处理的 HTTP 方法类型（如 GET、POST 等）。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RequestMapping(value = &amp;quot;/users&amp;quot;, method = RequestMethod.GET)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Users &lt;span class=&#34;title function_&#34;&gt;getUsers&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RequestMapping(value = &amp;quot;/users&amp;quot;, method = RequestMethod.POST)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; User &lt;span class=&#34;title function_&#34;&gt;createUser&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(User user)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（2）&lt;code&gt;@GetMapping&lt;/code&gt;：这是 &lt;code&gt;@RequestMapping&lt;/code&gt; 的一个特化版本，用于处理 GET 请求，等价于 &lt;code&gt;@RequestMapping(method = RequestMethod.GET)&lt;/code&gt;。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@GetMapping(&amp;quot;/users&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Users &lt;span class=&#34;title function_&#34;&gt;getUsers&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（3）&lt;code&gt;@PostMapping&lt;/code&gt;：同样是 &lt;code&gt;@RequestMapping&lt;/code&gt; 的一个特化版本，用于处理 POST 请求，等价于 &lt;code&gt;@RequestMapping(method = RequestMethod.POST)&lt;/code&gt;。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@PostMapping(&amp;quot;/users&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; User &lt;span class=&#34;title function_&#34;&gt;createUser&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(User user)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;3-4-RequestParam和-PathVariable有什么区别？&#34;&gt;3.4 @RequestParam和@PathVariable有什么区别？&lt;/h2&gt;
&lt;p&gt;（1）&lt;code&gt;@RequestParam&lt;/code&gt;：用于从请求参数中提取值。例如，对于 URL：&lt;code&gt;http://localhost:8080/books?id=1&lt;/code&gt;，你可以使用 &lt;code&gt;@RequestParam&lt;/code&gt; 来获取 &lt;code&gt;id&lt;/code&gt; 参数的值：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@GetMapping(&amp;quot;/books&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title function_&#34;&gt;getBook&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;meta&#34;&gt;@RequestParam(&amp;quot;id&amp;quot;)&lt;/span&gt; String id)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（2）&lt;code&gt;@PathVariable&lt;/code&gt;：用于从 URI 路径中提取值。例如，对于 URL：&lt;code&gt;http://localhost:8080/books/1&lt;/code&gt;，你可以使用 &lt;code&gt;@PathVariable&lt;/code&gt; 来获取 &lt;code&gt;id&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@GetMapping(&amp;quot;/books/&amp;#123;id&amp;#125;&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title function_&#34;&gt;getBook&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;meta&#34;&gt;@PathVariable(&amp;quot;id&amp;quot;)&lt;/span&gt; String id)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;3-5-详细讲一下-Autowired有什么用？&#34;&gt;3.5 详细讲一下@Autowired有什么用？&lt;/h2&gt;
&lt;p&gt;在 Spring 框架中，&lt;code&gt;@Autowired&lt;/code&gt; 注解用于实现自动依赖注入。这意味着你不需要在代码中明确指定依赖关系，Spring 会自动为你完成这个工作，从而简化了代码并提高了可维护性。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@Autowired&lt;/code&gt; 注解可以应用于字段、构造器和方法：&lt;/p&gt;
&lt;p&gt;（1）字段上的 &lt;code&gt;@Autowired&lt;/code&gt;：当 &lt;code&gt;@Autowired&lt;/code&gt; 注解应用于字段时，Spring 会在创建 Bean 时自动注入相应的依赖。在下面这个例子中，&lt;code&gt;myService&lt;/code&gt; 字段会被自动注入一个 &lt;code&gt;MyService&lt;/code&gt; 类型的 Bean：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; MyService myService;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（2）构造器上的 &lt;code&gt;@Autowired&lt;/code&gt;：当 &lt;code&gt;@Autowired&lt;/code&gt; 注解应用于构造器时，Spring 会在创建 Bean 时自动注入构造器的参数。在下面这个例子中，&lt;code&gt;MyClass&lt;/code&gt; 的构造器会被自动注入一个 &lt;code&gt;MyService&lt;/code&gt; 类型的 Bean：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MyClass&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; MyService myService;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;MyClass&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(MyService myService)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.myService = myService;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（3）方法上的 &lt;code&gt;@Autowired&lt;/code&gt;：当 &lt;code&gt;@Autowired&lt;/code&gt; 注解应用于方法时，Spring 会在创建 Bean 时自动注入方法的参数。这通常用于 Setter 方法，但也可以用于其他任何方法。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;setMyService&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(MyService myService)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.myService = myService;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1&gt;4. Spring Boot&lt;/h1&gt;
&lt;h2 id=&#34;4-1-为什么要用Spring-Boot？&#34;&gt;4.1 为什么要用Spring Boot？&lt;/h2&gt;
&lt;p&gt;Spring Boot 是 Spring 框架的一个扩展，它的目标是简化 Spring 应用程序的配置和部署，Spring Boot 具有以下优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速开发：Spring Boot 提供了许多默认配置，这使得开发人员可以快速开始开发。例如，使用 Spring MVC 需要大量的 XML Bean 定义和自定义 &lt;code&gt;servlet&lt;/code&gt; 类，但使用 Spring Boot 只需要添加一个 &lt;code&gt;starter&lt;/code&gt; 依赖即可，无需任何代码生成或 XML 配置。&lt;/li&gt;
&lt;li&gt;有用的 Starters：Spring Boot Starters 是包含库和一些自动配置的 Maven 描述符。这些 Starters 可以为 Spring Boot 应用程序提供功能。例如，你想设置数据库连接，或者你想与消息队列进行通信或发送电子邮件，Spring Boot 都可以覆盖。&lt;/li&gt;
&lt;li&gt;嵌入式 Web 服务器：Spring Boot 提供了对嵌入式 Tomcat、Jetty 和 Undertow 服务器的开箱即用支持。这样，开发人员不必担心在传统的应用服务器中部署 Web 应用程序。&lt;/li&gt;
&lt;li&gt;丰富的 IDE 支持：所有主要的 IDE 都为 Spring Boot 提供了代码辅助支持。&lt;/li&gt;
&lt;li&gt;生产就绪的功能：Spring Boot 提供了开箱即用的监控、度量和日志记录功能。这些功能使开发人员可以避免额外的配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-2-Spring-Boot中如何实现对不同环境的属性配置文件的支持？&#34;&gt;4.2 Spring Boot中如何实现对不同环境的属性配置文件的支持？&lt;/h2&gt;
&lt;p&gt;在 Spring Boot 中，你可以使用 Spring 的 Profile 功能来支持不同环境的属性配置文件。你可以为每个环境创建一个单独的配置文件，然后在运行应用程序时指定要使用的配置文件。&lt;/p&gt;
&lt;p&gt;例如，假设你有开发环境（dev）、质量保证环境（qa）和生产环境（prod）。你可以在与 &lt;code&gt;application.properties&lt;/code&gt; 文件相同的位置创建三个文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;application-dev.properties&lt;/code&gt;：用于开发环境。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;application-qa.properties&lt;/code&gt;：用于质量保证环境。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;application-prod.properties&lt;/code&gt;：用于生产环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后，你只需要在 &lt;code&gt;application.properties&lt;/code&gt; 文件中设置 &lt;code&gt;spring.profiles.active&lt;/code&gt; 属性，来指定当前的环境。例如，如果你想使用质量保证环境，你可以设置 &lt;code&gt;spring.profiles.active=qa&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;此外，你还可以通过 JVM 参数来指定活动的配置文件。例如，你可以在启动应用程序时设置 &lt;code&gt;-Dspring.profiles.active=dev&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;4-3-如何理解Spring-Boot中的Starters？&#34;&gt;4.3 如何理解Spring Boot中的Starters？&lt;/h2&gt;
&lt;p&gt;在 Spring Boot 中，Starters 可以理解为启动器，它包含了一系列可以集成到应用里面的依赖包。你可以一站式集成 Spring 及其他技术，快速地添加和管理项目的依赖，而不需要到处找示例代码和依赖包。&lt;/p&gt;
&lt;p&gt;例如，如果你想使用 Spring JPA 访问数据库，只要加入 &lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt; 启动器依赖就能使用了。同样，如果你想创建一个 RESTful 的 Web 应用，你可以添加 &lt;code&gt;spring-boot-starter-web&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;4-4-Spring-Boot-Starters的工作原理是什么？&#34;&gt;4.4 Spring Boot Starters的工作原理是什么？&lt;/h2&gt;
&lt;p&gt;Spring Boot Starters 的工作原理主要包括以下几个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引入模块所需的相关 Jar 包：Spring Boot Starter 会将具备某种功能的 Jar 包打包到一起，可以简化依赖导入的过程。例如，我们导入 &lt;code&gt;spring-boot-starter-web&lt;/code&gt; 这个 Starter，则和 Web 开发相关的 Jar 包都一起导入到项目中了。&lt;/li&gt;
&lt;li&gt;自动配置各个模块所需的属性：Spring Boot 在启动时会去依赖的 Starter 包中寻找 &lt;code&gt;resources/META-INF/spring.factories&lt;/code&gt; 文件，然后根据文件中配置的 Jar 包去扫描项目所依赖的 Jar 包。接着根据 &lt;code&gt;spring.factories&lt;/code&gt; 配置加载 &lt;code&gt;AutoConfigure&lt;/code&gt; 类。根据 &lt;code&gt;@Conditional&lt;/code&gt; 注解的条件，进行自动配置并将 Bean 注入 Spring Context。&lt;/li&gt;
&lt;li&gt;Bean 的发现和加载：Spring Boot 默认扫描启动类所在的包下的主类与子类的所有组件，但并没有包括依赖包中的类，那么依赖包中的 Bean 是如何被发现和加载的？Spring Boot 在启动类上我们一般会加入 &lt;code&gt;@SpringBootApplication&lt;/code&gt; 注解，此注解的源码中的 &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; 注解引入了 &lt;code&gt;@Import&lt;/code&gt; 这个注解，该注解导入自动配置功能类 &lt;code&gt;AutoConfigurationImportSelector&lt;/code&gt;，主要方法 &lt;code&gt;getCandidateConfigurations()&lt;/code&gt; 使用了 &lt;code&gt;SpringFactoriesLoader.loadFactoryNames()&lt;/code&gt; 方法加载 &lt;code&gt;META-INF/spring.factories&lt;/code&gt; 的文件（&lt;code&gt;spring.factories&lt;/code&gt; 声明具体自动配置）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-5-Spring-Boot的核心注解是什么？主要由哪几个注解组成？&#34;&gt;4.5 Spring Boot的核心注解是什么？主要由哪几个注解组成？&lt;/h2&gt;
&lt;p&gt;Spring Boot 的核心注解是 &lt;code&gt;@SpringBootApplication&lt;/code&gt;。这个注解实际上是以下三个注解的组合：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@SpringBootConfiguration&lt;/code&gt;：组合了 &lt;code&gt;@Configuration&lt;/code&gt; 注解，实现配置文件的功能。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@EnableAutoConfiguration&lt;/code&gt;：打开自动配置的功能，也可以关闭某个自动配置的选项。如关闭数据源的自动配置功能：&lt;code&gt;@SpringBootApplication(exclude = &amp;#123; DataSourceAutoConfiguration.class &amp;#125;)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@ComponentScan&lt;/code&gt;：Spring 组件扫描功能，让 Spring Boot 扫描到 &lt;code&gt;Configuration&lt;/code&gt; 类并把它加入到程序上下文。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-6-Spring-Boot中如何使用Bean&#34;&gt;4.6 Spring Boot中如何使用Bean&lt;/h2&gt;
&lt;p&gt;在 Spring Boot 中，你可以通过使用 &lt;code&gt;@Bean&lt;/code&gt; 注解来声明一个 Bean。&lt;code&gt;@Bean&lt;/code&gt; 注解告诉 Spring 一个方法会返回一个对象，这个对象应该被注册为 Spring 应用上下文中的 Bean。默认情况下，Bean 的名称是由方法名决定的，但你也可以在 &lt;code&gt;@Bean&lt;/code&gt; 注解中通过 &lt;code&gt;name&lt;/code&gt; 属性来设置 Bean 的名称。&lt;/p&gt;
&lt;p&gt;例如，以下是一个简单的 &lt;code&gt;@Bean&lt;/code&gt; 注解的使用示例：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AppConfig&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; MyBean &lt;span class=&#34;title function_&#34;&gt;myBean&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MyBean&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中，&lt;code&gt;myBean()&lt;/code&gt; 方法被注解为 &lt;code&gt;@Bean&lt;/code&gt;，所以它会返回一个新的 &lt;code&gt;MyBean&lt;/code&gt; 实例，这个实例将被注册为 Spring 应用上下文中的 Bean。&lt;/p&gt;
&lt;p&gt;总的来说，你不需要在 Spring Boot 中手动配置 Bean，你只需要使用 &lt;code&gt;@Bean&lt;/code&gt; 注解，Spring Boot 就会自动为你创建和管理 Bean。&lt;/p&gt;
&lt;h1&gt;5. Spring Cloud&lt;/h1&gt;
&lt;h2 id=&#34;5-1-什么是Spring-Cloud？&#34;&gt;5.1 什么是Spring Cloud？&lt;/h2&gt;
&lt;p&gt;Spring Cloud 是一系列框架的有序集合，它利用 Spring Boot 的开发便利性巧妙地简化了分布式系统基础设施的开发。Spring Cloud 为开发人员提供了快速构建分布式系统中一些常见模式的工具（例如配置管理、服务发现、断路器、智能路由、微代理、控制总线）。分布式系统的协调导致了样板模式，使用 Spring Cloud 开发人员可以快速地支持实现这些模式的服务和应用程序。&lt;/p&gt;
&lt;p&gt;Spring Cloud 并不重复造轮子，而是将市面上开发得比较好的模块集成进去，进行封装，从而减少了各模块的开发成本。&lt;/p&gt;
&lt;p&gt;总的来说，Spring Cloud 是微服务系统架构的一站式解决方案，是各个微服务架构落地技术的集合体，俗称微服务全家桶。&lt;/p&gt;
&lt;h2 id=&#34;5-2-详细介绍一下分布式项目与微服务架构&#34;&gt;5.2 详细介绍一下分布式项目与微服务架构&lt;/h2&gt;
&lt;p&gt;分布式项目是指将一个大型的项目切割成多个小项目，每个小项目都是一套&lt;strong&gt;独立的&lt;/strong&gt;系统。这些小项目被打成 Jar 包，然后通过互相引用（以 Jar 包的形式）来组装成原来的完整项目。每个子业务都是一套独立的系统，子业务之间相互协作，最终完成整体的大业务。这种方式可以提高系统的&lt;strong&gt;可扩展性&lt;/strong&gt;和&lt;strong&gt;高可用性&lt;/strong&gt;，解决&lt;strong&gt;高并发&lt;/strong&gt;的问题，并且可以利用分布式存储将数据分片到多个节点上，不仅可以提高性能，同时也可以使用多个节点对同一份数据进行备份。&lt;/p&gt;
&lt;p&gt;微服务架构是一种软件开发框架，它将一个大型的应用程序划分为许多小的、独立的服务。每个服务都有自己的技术栈，包括数据库和数据管理模型。这些服务通常通过 REST API、事件流和消息代理进行通信，并按照业务能力进行组织。&lt;/p&gt;
&lt;p&gt;微服务架构的主要优点包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码更容易更新：可以直接添加新特性或功能，而不必更新整个应用。&lt;/li&gt;
&lt;li&gt;团队可以对不同的组件使用不同的技术栈和不同的编程语言。&lt;/li&gt;
&lt;li&gt;组件可以相互独立地扩展，从而减少与必须扩展整个应用相关的浪费和成本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然而，微服务架构也带来了一些挑战，例如管理复杂性的增加、日志记录数据的增加、新版本可能导致的向后兼容性问题、应用涉及更多网络连接可能导致的延迟和连接问题等。尽管如此，微服务架构仍然被广泛采用，因为它可以提高开发效率，使组织能够更快地响应业务需求。&lt;/p&gt;
&lt;p&gt;微服务架构和分布式系统是两个不同的概念，它们的主要区别在于设计目标和实现方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分布式系统：分布式系统的核心就是&lt;strong&gt;拆分&lt;/strong&gt;，只要是将一个项目拆分成了多个模块，并将这些模块分开部署，那就算是分布式。分布式解决的是系统性能问题，即解决系统部署上单点的问题，尽量让组成系统的子系统分散在不同的机器上进而提高系统的吞吐能力。分布式是&lt;strong&gt;部署层面&lt;/strong&gt;的东西，即强调物理层面的组成，系统的各子系统部署在不同计算机上。&lt;/li&gt;
&lt;li&gt;微服务架构：微服务架构通过&lt;strong&gt;更细粒度的服务切分&lt;/strong&gt;，使得整个系统的迭代速度和并行程度更高，但是运维的复杂度和性能会随着服务的粒度更细而增加。微服务重在&lt;strong&gt;解耦合&lt;/strong&gt;，使每个模块都独立。微服务是&lt;strong&gt;设计层面&lt;/strong&gt;的东西，一般考虑如何将系统从&lt;strong&gt;逻辑上&lt;/strong&gt;进行拆分，也就是垂直拆分。微服务可以是分布式的，即可以将不同服务部署在不同计算机上，当然如果量小也可以部署在单机上。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总的来说，分布式系统和微服务架构都是为了提高系统的可扩展性和可维护性，但它们的关注点和实现方式有所不同。&lt;/p&gt;
&lt;h2 id=&#34;5-3-使用Spring-Cloud有什么优势？&#34;&gt;5.3 使用Spring Cloud有什么优势？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;约定优于配置：Spring Cloud 提供了一套默认的配置，使得开发人员可以更专注于业务逻辑的开发。&lt;/li&gt;
&lt;li&gt;适用于各种环境：无论是开发环境、部署 PC Server，还是各种云环境（例如阿里云、AWS 等），Spring Cloud 都可以适用。&lt;/li&gt;
&lt;li&gt;隐藏了组件的复杂性：Spring Cloud 提供了声明式、无 XML 的配置方式，隐藏了组件的复杂性。&lt;/li&gt;
&lt;li&gt;开箱即用、快速启动：Spring Cloud 提供了一套完整的微服务解决方案，使得开发人员可以快速启动项目。&lt;/li&gt;
&lt;li&gt;轻量级的组件：Spring Cloud 整合的组件大多比较轻量。&lt;/li&gt;
&lt;li&gt;组件丰富、选型中立、功能齐全：Spring Cloud 为微服务架构提供了非常完整的支持，有丰富的组件选择，开发人员可以根据需求选择合适的组件。&lt;/li&gt;
&lt;li&gt;灵活：Spring Cloud 的组成部分是解耦合的，开发人员可以按需灵活挑选技术选型。&lt;/li&gt;
&lt;li&gt;服务拆分粒度更细：有利于资源重复利用，提高开发效率。&lt;/li&gt;
&lt;li&gt;采用去中心化思想：服务之间采用轻量级通讯，适合互联网时代，产品迭代周期更短。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-4-服务注册和发现是什么意思？Spring-Cloud如何实现？&#34;&gt;5.4 服务注册和发现是什么意思？Spring Cloud如何实现？&lt;/h2&gt;
&lt;p&gt;服务注册是指将服务的元数据（例如服务名、IP 地址、端口号等）注册到注册中心中，以便其他服务可以发现它。例如，一个微服务启动后，会将自己的信息（通常是这个服务的 IP 和端口）注册到一个公共的组件上去（比如 ZooKeeper、Consul）。&lt;/p&gt;
&lt;p&gt;服务发现是指客户端从注册中心中查找和选择可用的服务实例，并通过负载均衡策略来分配请求。也就是说，新注册的这个服务模块能够及时的被其他调用者发现。不管是服务新增和服务删减都能实现自动发现。&lt;/p&gt;
&lt;p&gt;Spring Cloud 实现服务注册和发现的方式主要有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Eureka：Eureka 是 Netflix 开源的一款提供服务注册和发现的产品。Spring Cloud 封装了 Netflix 公司开发的 Eureka 模块来实现服务治理。在微服务应用启动后，Eureka Client 会向 Eureka Server 发送心跳。如果 Eureka Server 在多个心跳周期内没有接收到某个节点的心跳，则会将该节点移除。&lt;/li&gt;
&lt;li&gt;Consul：Consul 是一种服务网格解决方案，提供了包括服务发现、配置和分段功能。这些功能中的每一个都可以根据需要独立使用，也可以一起使用以构建全堆栈服务网格。Consul 是适用于底层服务发现和配置的工具。&lt;/li&gt;
&lt;li&gt;ZooKeeper：ZooKeeper 是一个开源的分布式应用程序协调服务，是 Google 的 Chubby 一个开源的实现，是 Hadoop 和 Hbase 的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-5-负载均衡有什么作用？&#34;&gt;5.5 负载均衡有什么作用？&lt;/h2&gt;
&lt;p&gt;负载均衡是一种重要的网络技术，它可以有效地提高网络服务的性能、可用性和安全性。负载均衡的主要作用包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决并发压力：通过将客户端的请求分发到多个服务器，负载均衡可以有效地解决并发压力，提高应用处理性能，增加吞吐量，加强网络处理能力。&lt;/li&gt;
&lt;li&gt;提供故障转移：负载均衡可以检测后端服务的运行状况，自动检测异常实例，并快速实施故障转移；当实例恢复正常时，它将自动恢复负载。这样，即使某个服务器出现故障，负载均衡也可以保证服务的高可用性。&lt;/li&gt;
&lt;li&gt;提供网站伸缩性（扩展性）：当业务压力增加时，可以通过将主机添加到后端服务器池来提高性能。当压力降低时，可以减少宿主。这样，负载均衡可以根据业务需求动态地添加或减少服务器数量，提供网站的伸缩性。&lt;/li&gt;
&lt;li&gt;安全防护：负载均衡设备上可以做一些过滤，黑白名单等处理，提供安全防护。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-6-Spring-Cloud和Dubbo有什么区别？&#34;&gt;5.6 Spring Cloud和Dubbo有什么区别？&lt;/h2&gt;
&lt;p&gt;Spring Cloud 和 Dubbo 都是现在主流的微服务框架，但它们之间存在一些主要的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始定位不同：Spring Cloud 定位为微服务架构下的一站式解决方案，而 Dubbo 是 SOA（Service-Oriented Architecture，面向服务的架构）时代的产物，它的关注点主要在于服务的调用和治理。&lt;/li&gt;
&lt;li&gt;生态环境不同：Spring Cloud 依托于 Spring 平台，具备更加完善的生态体系；而 Dubbo 一开始只是做 RPC（Remote Procedure Call，远程过程调用）通信协议的远程调用，生态相对匮乏，现在才逐渐丰富起来。&lt;/li&gt;
&lt;li&gt;调用方式不同：Spring Cloud 是采用 HTTP 协议做远程调用，接口一般是 REST 风格，比较灵活；Dubbo 是采用 Dubbo 协议，接口一般是 Java 的 Service 接口，格式固定。&lt;/li&gt;
&lt;li&gt;服务网关：Dubbo 没有服务网关，而 Spring Cloud 使用的是 Spring Cloud Netflix Zuul。&lt;/li&gt;
&lt;li&gt;分布式配置：Dubbo 没有分布式配置，而 Spring Cloud 使用的是 Spring Cloud Config。&lt;/li&gt;
&lt;li&gt;服务跟踪：Dubbo 没有服务跟踪，而 Spring Cloud 使用的是 Spring Cloud Sleuth。&lt;/li&gt;
&lt;li&gt;消息总线：Dubbo 没有消息总线，而 Spring Cloud 使用的是 Spring Cloud Bus。&lt;/li&gt;
&lt;li&gt;数据流：Dubbo 没有数据流，而 Spring Cloud 使用的是 Spring Cloud Stream。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-7-Sping-Cloud微服务之间如何通讯？&#34;&gt;5.7 Sping Cloud微服务之间如何通讯？&lt;/h2&gt;
&lt;p&gt;在 Spring Cloud 中，微服务之间的通信主要有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步通信：Dubbo 通过 RPC 远程过程调用，而 Spring Cloud 通过 REST 接口 JSON 调用等（HTTP 通信）。&lt;/li&gt;
&lt;li&gt;异步通信：消息队列，如：RabbitMq、ActiveMq、Kafka 等。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Interview" />
        <updated>2023-11-24T09:09:00.000Z</updated>
    </entry>
    <entry>
        <id>https://asanosaki.github.io/posts/53737.html</id>
        <title>Java进阶面试题总结</title>
        <link rel="alternate" href="https://asanosaki.github.io/posts/53737.html"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;Java 进阶面试题总结，涉及集合、JVM、并发等内容，文章将不断更新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h1&gt;1. Java集合&lt;/h1&gt;
&lt;h2 id=&#34;1-1-Java中常见的集合有哪些？&#34;&gt;1.1 Java中常见的集合有哪些？&lt;/h2&gt;
&lt;p&gt;Java 中的集合主要可以分为四个部分：&lt;code&gt;List&lt;/code&gt;、&lt;code&gt;Set&lt;/code&gt;、&lt;code&gt;Map&lt;/code&gt; 和工具类（如 &lt;code&gt;Iterator&lt;/code&gt; 迭代器、&lt;code&gt;Enumeration&lt;/code&gt; 枚举类、&lt;code&gt;Arrays&lt;/code&gt; 和 &lt;code&gt;Collections&lt;/code&gt;）。这些集合类主要由两个接口派生而来，即 &lt;code&gt;Collection&lt;/code&gt;（包含 &lt;code&gt;List&lt;/code&gt;、&lt;code&gt;Set&lt;/code&gt;、&lt;code&gt;Queue&lt;/code&gt;）和 &lt;code&gt;Map&lt;/code&gt;，它们是集合框架的根接口。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;List&lt;/code&gt;：一种有序列表的集合，例如，按索引排列的元素的 &lt;code&gt;List&lt;/code&gt;。常见的实现类有 &lt;code&gt;ArrayList&lt;/code&gt;、&lt;code&gt;LinkedList&lt;/code&gt; 和 &lt;code&gt;Vector&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Set&lt;/code&gt;：一种保证没有重复元素的集合。常见的实现类有 &lt;code&gt;HashSet&lt;/code&gt;、&lt;code&gt;LinkedHashSet&lt;/code&gt; 和 &lt;code&gt;TreeSet&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Map&lt;/code&gt;：一种通过键值（Key-Value）查找的映射表集合。常见的实现类有 &lt;code&gt;HashMap&lt;/code&gt; 和 &lt;code&gt;TreeMap&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-2-线程安全的集合有哪些？&#34;&gt;1.2 线程安全的集合有哪些？&lt;/h2&gt;
&lt;p&gt;Java 中的线程安全集合主要包括以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Vector&lt;/code&gt;：这是一个线程安全的动态数组，它提供了与 &lt;code&gt;ArrayList&lt;/code&gt; 类似的功能，但每个方法都是同步的，这意味着在多线程环境下，它的性能会比 &lt;code&gt;ArrayList&lt;/code&gt; 差。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Hashtable&lt;/code&gt;：这是一个线程安全的哈希表实现，类似于 &lt;code&gt;HashMap&lt;/code&gt;，但是 &lt;code&gt;Hashtable&lt;/code&gt; 的方法都是同步的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stack&lt;/code&gt;：这是一个线程安全的栈实现，它继承自 &lt;code&gt;Vector&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ConcurrentLinkedQueue&lt;/code&gt;：这是一个线程安全的队列实现，使用了非阻塞算法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BlockingQueue&lt;/code&gt; 接口的实现类，如 &lt;code&gt;ArrayBlockingQueue&lt;/code&gt;，&lt;code&gt;LinkedBlockingQueue&lt;/code&gt; 等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CopyOnWriteArrayList&lt;/code&gt; 和 &lt;code&gt;CopyOnWriteArraySet&lt;/code&gt;：这是两个线程安全的集合，它们会在修改操作时复制一份数据，避免了修改时的并发问题。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ConcurrentHashMap&lt;/code&gt;：这是一个线程安全的 &lt;code&gt;HashMap&lt;/code&gt;，它通过将数据分段，从而达到并发控制，性能要优于 &lt;code&gt;Hashtable&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ConcurrentSkipListMap&lt;/code&gt;：线程安全且排序的哈希表。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;值得注意的是，为了保证集合是线程安全的，相应的效率也比较低；线程不安全的集合效率相对会高一些。如果你的代码只在一个线程中运行，或者多个线程只是读取集合而不修改集合，那么你可以选择线程不安全的集合，因为它们的性能通常会更好。&lt;/p&gt;
&lt;h2 id=&#34;1-3-ArrayList和LinkedList的异同点？&#34;&gt;1.3 ArrayList和LinkedList的异同点？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ArrayList&lt;/code&gt; 和 &lt;code&gt;LinkedList&lt;/code&gt; 都是 Java 中常用的 &lt;code&gt;List&lt;/code&gt; 实现类，它们有一些共同点，也有一些不同点。&lt;/p&gt;
&lt;p&gt;共同点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ArrayList&lt;/code&gt; 和 &lt;code&gt;LinkedList&lt;/code&gt; 都是单列集合中 &lt;code&gt;List&lt;/code&gt; 接口的实现类，它们都是存取允许重复，且有序的元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不同点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部实现：&lt;code&gt;ArrayList&lt;/code&gt; 是基于动态数组实现的，底层使用数组来存储元素。而 &lt;code&gt;LinkedList&lt;/code&gt; 是基于链表实现的，底层使用双向链表来存储元素。&lt;/li&gt;
&lt;li&gt;随机访问：对于随机访问 &lt;code&gt;get&lt;/code&gt; 和 &lt;code&gt;set&lt;/code&gt; 方法，&lt;code&gt;ArrayList&lt;/code&gt; 的速度通常优于 &lt;code&gt;LinkedList&lt;/code&gt;，因为 &lt;code&gt;ArrayList&lt;/code&gt; 可以根据下标以 &lt;code&gt;O(1)&lt;/code&gt; 的时间复杂度对元素进行随机访问，而 &lt;code&gt;LinkedList&lt;/code&gt; 的每一个元素都依靠地址指针和它后一个元素连接在一起，查找某个元素的时间复杂度是 &lt;code&gt;O(n)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;插入和删除操作：对于插入和删除操作，&lt;code&gt;LinkedList&lt;/code&gt; 的速度通常优于 &lt;code&gt;ArrayList&lt;/code&gt;，因为当元素被添加到 &lt;code&gt;LinkedList&lt;/code&gt; 任意位置的时候，不需要像 &lt;code&gt;ArrayList&lt;/code&gt; 那样重新计算大小或者是更新索引。&lt;/li&gt;
&lt;li&gt;内存占用：&lt;code&gt;LinkedList&lt;/code&gt; 比 &lt;code&gt;ArrayList&lt;/code&gt; 更占内存，因为 &lt;code&gt;LinkedList&lt;/code&gt; 的节点除了存储数据，还存储了两个引用，一个指向前一个元素，一个指向后一个元素。而 &lt;code&gt;ArrayList&lt;/code&gt; 使用数组来存储元素，因此插入和删除元素时需要移动其他元素占用内存，所以在频繁进行插入和删除操作时，&lt;code&gt;ArrayList&lt;/code&gt; 的性能会比较低，且可能会造成内存浪费。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-4-ArrayList的扩容机制是什么？&#34;&gt;1.4 ArrayList的扩容机制是什么？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ArrayList&lt;/code&gt; 的扩容机制是其核心特性之一。在 &lt;code&gt;ArrayList&lt;/code&gt; 中添加元素时，如果当前的数组已经满了，那么 &lt;code&gt;ArrayList&lt;/code&gt; 会创建一个新的、更大的数组，并将原有数组的元素复制到新的数组中，这个过程就叫做扩容。&lt;/p&gt;
&lt;p&gt;具体来说，&lt;code&gt;ArrayList&lt;/code&gt; 的扩容机制如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当向 &lt;code&gt;ArrayList&lt;/code&gt; 中添加元素时，首先会检查 &lt;code&gt;ArrayList&lt;/code&gt; 的当前大小（也就是它内部的数组大小）是否能够容纳新的元素。如果可以，那么新元素就直接被添加到 &lt;code&gt;ArrayList&lt;/code&gt; 中。&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;ArrayList&lt;/code&gt; 的当前大小不足以容纳新的元素，那么 &lt;code&gt;ArrayList&lt;/code&gt; 就需要进行扩容操作。在扩容操作中，&lt;code&gt;ArrayList&lt;/code&gt; 会创建一个新的数组，新数组的大小是原数组大小的1.5倍，这个值是在 JDK 的源码中定义的。&lt;/li&gt;
&lt;li&gt;接着，&lt;code&gt;ArrayList&lt;/code&gt; 会使用 &lt;code&gt;System.arraycopy&lt;/code&gt; 方法，将原有数组中的所有元素复制到新的数组中。&lt;/li&gt;
&lt;li&gt;最后，新的数组会替代原有的数组，成为 &lt;code&gt;ArrayList&lt;/code&gt; 的内部数组。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;值得注意的是，&lt;code&gt;ArrayList&lt;/code&gt; 的扩容操作需要重新分配内存空间，并将原来的元素复制到新的数组中，这可能会导致性能问题。因此，在实例化 &lt;code&gt;ArrayList&lt;/code&gt; 时设置足够的初始容量，并且尽可能减少数组扩容的次数，可以帮助提高性能：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ArrayList&amp;lt;Integer&amp;gt; list = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;1-5-HashMap的底层数据结构是什么？&#34;&gt;1.5 HashMap的底层数据结构是什么？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;HashMap&lt;/code&gt; 的底层数据结构主要包括哈希表（数组）、链表和红黑树。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;哈希表（数组）：&lt;code&gt;HashMap&lt;/code&gt; 主要依赖于哈希表来存储数据。哈希表中的每个元素被称为 &lt;code&gt;bucket&lt;/code&gt;。数组的每个位置都可以存放一个元素（键值对），数组的索引是通过&lt;strong&gt;键的哈希码&lt;/strong&gt;经过&lt;strong&gt;哈希函数&lt;/strong&gt;计算得来的。这样我们就可以通过键快速定位到数组的某个位置，取出相应的值，这就是 &lt;code&gt;HashMap&lt;/code&gt; 快速获取数据的原理。&lt;/li&gt;
&lt;li&gt;链表：在理想的情况下，哈希函数将每个键均匀地散列到哈希表的各个位置。但在实际中，我们可能会遇到两个不同的键计算出相同的哈希值，这就是所谓的&lt;strong&gt;哈希冲突&lt;/strong&gt;。&lt;code&gt;HashMap&lt;/code&gt; 通过使用链表来解决这个问题。当哈希冲突发生时，&lt;code&gt;HashMap&lt;/code&gt; 会在冲突的 &lt;code&gt;bucket&lt;/code&gt; 位置增加一个链表，新的元素会被添加到链表的末尾。每个链表中的元素都包含了相同哈希值的键值对。&lt;/li&gt;
&lt;li&gt;红黑树：从 Java 8 开始，如果链表的长度超过一定的阈值（默认为8），那么链表会被转换为红黑树。红黑树是一种自平衡的二叉查找树，通过保持树的平衡，可以提高查找效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-6-为什么在解决Hash冲突的时候，不直接用红黑树，而是先用链表，再转红黑树？&#34;&gt;1.6 为什么在解决Hash冲突的时候，不直接用红黑树，而是先用链表，再转红黑树？&lt;/h2&gt;
&lt;p&gt;在解决 Hash 冲突的时候，&lt;code&gt;HashMap&lt;/code&gt; 在链表长度大于8的时候才会将链表转换为红黑树，而不是直接使用红黑树，这主要有以下几个原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询效率：红黑树的平均查找长度是 &lt;code&gt;log(n)&lt;/code&gt;，当链表长度为8时，查找长度为 &lt;code&gt;log(8) = 3&lt;/code&gt;，而链表的平均查找长度为 &lt;code&gt;n/2&lt;/code&gt;，当长度为8时，平均查找长度为 &lt;code&gt;8 / 2 = 4&lt;/code&gt;。因此，当链表长度小于等于8时，使用链表的查询效率其实并不比红黑树差。&lt;/li&gt;
&lt;li&gt;插入效率和空间效率：链表的插入操作比红黑树快，且链表的空间占用也比红黑树小。因此，在元素数量较少时，使用链表比红黑树更高效1。&lt;/li&gt;
&lt;li&gt;防止频繁转换：如果链表长度在8左右徘徊，且频繁地进行插入和删除操作，可能会导致链表和红黑树之间频繁地转换，这会降低效率。因此，&lt;code&gt;HashMap&lt;/code&gt; 设计了两个阈值，链表长度超过8时转为红黑树，少于6时转回链表，这样可以减少转换的频率。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总的来说，这种设计是为了在保证查询效率的同时，尽可能地提高插入效率和空间效率，以及减少因频繁转换而带来的开销。&lt;/p&gt;
&lt;h2 id=&#34;1-7-什么是负载因子？为什么HashMap的默认负载因子为0-75？&#34;&gt;1.7 什么是负载因子？为什么HashMap的默认负载因子为0.75？&lt;/h2&gt;
&lt;p&gt;负载因子是用于表示哈希表中元素填满的程度的一个参数。在哈希表（如 Java 的 &lt;code&gt;HashMap&lt;/code&gt;）中，负载因子是和扩容机制有关的，当哈希表中的元素个数超过了容量乘以负载因子时，就会进行扩容。例如，如果当前的容器容量是16，负载因子是0.75，&lt;code&gt;16 * 0.75 = 12&lt;/code&gt;，也就是说，当容量达到了12的时候就会进行扩容操作。&lt;/p&gt;
&lt;p&gt;负载因子的大小对哈希表的性能有重要影响。如果负载因子过大，那么哈希表中的冲突会更频繁，导致&lt;strong&gt;查找效率降低&lt;/strong&gt;。反之，如果负载因子过小，那么哈希表的空间利用率就会降低，导致&lt;strong&gt;内存浪费&lt;/strong&gt;。因此，选择一个合适的负载因子，可以在时间效率和空间效率之间达到一个平衡。在 Java 的 &lt;code&gt;HashMap&lt;/code&gt; 中，负载因子的默认值是0.75，这是一个在时间和空间效率之间的折衷选择。&lt;/p&gt;
</content>
        <category term="Interview" />
        <updated>2023-11-24T02:32:00.000Z</updated>
    </entry>
    <entry>
        <id>https://asanosaki.github.io/posts/36915.html</id>
        <title>Java基础面试题总结</title>
        <link rel="alternate" href="https://asanosaki.github.io/posts/36915.html"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;Java 基础常见面试题总结，涉及 Java 基本概念、OOP、反射等内容，文章将不断更新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h1&gt;1. Java基本概念&lt;/h1&gt;
&lt;h2 id=&#34;1-1-Java语言有哪些特点？&#34;&gt;1.1 Java语言有哪些特点？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;面向对象（封装、继承、多态）：Java 是一种面向对象的语言，它对类、对象、继承、封装、多态、接口、包等内容均有很好的支持。为了简单起见，Java 只支持类之间的单继承，但是可以使用接口来实现多继承。&lt;/li&gt;
&lt;li&gt;平台无关性：Java是“一次编写，到处运行”（Write Once, Run Anywhere）的语言，因此采用 Java 语言编写的程序具有很好的&lt;strong&gt;可移植性&lt;/strong&gt;，而保证这一点的正是 Java 的虚拟机机制，在引入虚拟机之后，Java 语言在不同的平台上运行不需要重新编译。&lt;/li&gt;
&lt;li&gt;可靠性、安全性：Java 是被设计成编写高可靠和稳健软件的。Java 消除了某些编程错误，使得用它写可靠软件相当容易。&lt;/li&gt;
&lt;li&gt;支持多线程：C++ 没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 具备内置的多线程功能，可以将一个程序的不同程序段设置为不同的线程，使各线程并发、独立执行，提高系统的运行效率。&lt;/li&gt;
&lt;li&gt;支持网络编程：Java 诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便。&lt;/li&gt;
&lt;li&gt;编译与解释并存：Java 是一种先编译后解释的语言，Java 程序在 Java 平台运行时会被编译成字节码文件，然后可以在有 Java 环境的操作系统上运行。&lt;/li&gt;
&lt;li&gt;动态性：Java 语言设计成适应于变化的环境，它是一个动态的语言。例如，Java 中的类是根据需要载入的，甚至有些是通过网络获取的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-2-Java和C-有什么联系和区别？&#34;&gt;1.2 Java和C++有什么联系和区别？&lt;/h2&gt;
&lt;p&gt;联系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;面向对象：Java 和 C++ 都支持面向对象编程，包括类、对象、继承、封装和多态。&lt;/li&gt;
&lt;li&gt;语法：Java 的语法在很大程度上受到了 C++ 的影响，因此这两种语言在语法上有很多相似之处。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存管理：Java 有垃圾回收机制，可以自动回收不再使用的内存，而 C++ 需要程序员手动管理内存。&lt;/li&gt;
&lt;li&gt;指针和引用：C++ 支持指针，但 Java 没有指针的概念。相反，Java 使用引用来实现某些相似的功能。&lt;/li&gt;
&lt;li&gt;继承：C++ 支持多重继承，而 Java 不支持多重继承，但允许一个类实现多个接口。&lt;/li&gt;
&lt;li&gt;运行环境：Java 程序在 Java 平台上运行，可以在任何安装了 Java 虚拟机的系统上运行，而 C++ 程序是直接编译成特定操作系统的机器码。&lt;/li&gt;
&lt;li&gt;异常处理：Java 有一套完整的异常处理机制，而 C++ 的异常处理机制相对较弱。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-3-JVM、JRE和JDK的关系是什么？&#34;&gt;1.3 JVM、JRE和JDK的关系是什么？&lt;/h2&gt;
&lt;p&gt;JVM、JRE 和 JDK 是 Java 开发和运行的三个核心组件，它们之间的关系可以概括为：JDK 包含 JRE，而 JRE 包含 JVM。下面是对这三者的详细介绍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JVM（Java Virtual Machine）：Java 虚拟机，是 Java 能够实现跨平台的核心机制。JVM 只认识 &lt;code&gt;.class&lt;/code&gt; 后缀的文件，它能将 &lt;code&gt;class&lt;/code&gt; 文件中的字节码指令进行识别并调用操作系统向上的 API 完成动作。&lt;/li&gt;
&lt;li&gt;JRE（Java Runtime Environment）：Java 运行环境，包括 Java 虚拟机（JVM）和 Java 程序所需的核心类库等。如果想要运行一个开发好的 Java 程序，计算机中只需要安装 JRE 即可。&lt;/li&gt;
&lt;li&gt;JDK（Java Development Kit）：Java 的开发工具包，是提供给 Java 开发人员使用的，其中包含了 Java 的开发工具和 JRE。其中的开发工具包括：运行工具（&lt;code&gt;java.exe&lt;/code&gt;）、编译工具（&lt;code&gt;javac.exe&lt;/code&gt;）、打包工具（&lt;code&gt;jar.exe&lt;/code&gt;）等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，简单来说，JDK 是用于开发 Java 应用的，JRE 是用于运行 Java 应用的，而 JVM 则是使 Java 能够跨平台的核心。&lt;/p&gt;
&lt;h2 id=&#34;1-4-什么是字节码？采用字节码的好处是什么？&#34;&gt;1.4 什么是字节码？采用字节码的好处是什么？&lt;/h2&gt;
&lt;p&gt;字节码是一种中间状态的&lt;strong&gt;二进制文件&lt;/strong&gt;，是由源码编译过来的，可读性没有源码的高。CPU 并不能直接读取字节码，在 Java 中，字节码需要经过 JVM 转译成机器码之后，CPU 才能读取并运行。采用字节码的好处主要有以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跨平台性：字节码可以在不同的平台上运行，只需要有一个能够识别并解释字节码的解释器即可。&lt;/li&gt;
&lt;li&gt;高效率：字节码可以在运行时动态编译为机器代码，这样就可以在保证程序执行效率的同时避免了额外的编译步骤。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点，所以 Java 程序运行时比较高效。&lt;/li&gt;
&lt;li&gt;可调试性：字节码是可读的，因此可以方便地进行调试和分析。&lt;/li&gt;
&lt;li&gt;可扩展性：字节码可以被扩展以支持新的特性，而不需要更改现有的机器代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-5-Java有哪些数据类型？&#34;&gt;1.5 Java有哪些数据类型？&lt;/h2&gt;
&lt;p&gt;Java 的数据类型可以分为两大类：基本数据类型和引用数据类型。&lt;/p&gt;
&lt;p&gt;基本数据类型包括以下八种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;byte&lt;/code&gt;：8位有符号二进制整数，取值范围为 &lt;code&gt;-128~127&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;short&lt;/code&gt;：16位有符号二进制整数，取值范围为 &lt;code&gt;-32768~32767&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt;：32位有符号二进制整数，取值范围为 &lt;code&gt;-2147483648~2147483647&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;long&lt;/code&gt;：64位有符号二进制整数，取值范围为 &lt;code&gt;-9223372036854775808~9223372036854775807&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt;：32位单精度浮点数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;double&lt;/code&gt;：64位双精度浮点数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean&lt;/code&gt;：布尔值，只有两个取值：&lt;code&gt;true&lt;/code&gt; 和 &lt;code&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;char&lt;/code&gt;：单个16位 Unicode 字符，取值范围为 &lt;code&gt;\u0000~\uffff&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;引用数据类型包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类（Class）：由程序员定义的一种数据类型，它将数据和对数据的操作封装在一起。&lt;/li&gt;
&lt;li&gt;接口（Interface）：一种引用类型，类似于类，由完全抽象的方法和常量组成。&lt;/li&gt;
&lt;li&gt;数组（Array）：可以保存多个同类型变量的容器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;2. 面向对象&lt;/h1&gt;
&lt;h2 id=&#34;2-1-面向对象的三大特性是什么？&#34;&gt;2.1 面向对象的三大特性是什么？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;封装：封装是指利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体。数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系。&lt;/li&gt;
&lt;li&gt;继承：继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承我们能够非常方便地复用以前的代码。&lt;/li&gt;
&lt;li&gt;多态：多态是指允许不同类的对象对同一消息做出响应。也就是说，同一个接口可以具有多种实现方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-2-访问修饰符的区别？&#34;&gt;2.2 访问修饰符的区别？&lt;/h2&gt;
&lt;p&gt;Java 有四种访问修饰符，它们分别是 &lt;code&gt;public&lt;/code&gt;、&lt;code&gt;protected&lt;/code&gt;、&lt;code&gt;default&lt;/code&gt;（默认，无修饰符）和 &lt;code&gt;private&lt;/code&gt;。以下是它们的详细介绍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt;：公共访问修饰符，被声明为 &lt;code&gt;public&lt;/code&gt; 的类、方法、构造方法和接口能够被任何其他类访问。如果几个相互访问的 &lt;code&gt;public&lt;/code&gt; 类分布在不同的包中，则需要导入相应 &lt;code&gt;public&lt;/code&gt; 类所在的包。由于类的继承性，类所有的公有方法和变量都能被其子类继承。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protected&lt;/code&gt;：受保护的访问修饰符，被声明为 &lt;code&gt;protected&lt;/code&gt; 的变量、方法和构造器能被同一个包中的任何其他类访问；同时，被 &lt;code&gt;protected&lt;/code&gt; 所修饰的成员也能被该类的所有子类继承下来，无论子类和基类是否在同一包中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default&lt;/code&gt;（默认，无修饰符）：包私有访问修饰符，表示只能在当前包中的类访问该成员。被 &lt;code&gt;default&lt;/code&gt; 所修饰的成员只能被该类所在同一个包中的子类所继承下来。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt;：私有访问修饰符，表示只能在当前类中访问该成员，除了当前类都不能访问。私有访问修饰符是最严格的访问级别，所有被声明为 &lt;code&gt;private&lt;/code&gt; 的方法、变量和构造方法只能被所属类访问，并且类和接口不能声明为 &lt;code&gt;private&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-3-Java语言是如何实现多态的？&#34;&gt;2.3 Java语言是如何实现多态的？&lt;/h2&gt;
&lt;p&gt;我们通常所说的多态指的都是运行时多态，也就是编译时不确定究竟调用哪个具体方法，一直延迟到运行时才能确定，这也是为什么有时候多态方法又被称为延迟方法的原因。Java 语言实现多态主要依赖于以下三个条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;继承：必须存在子类继承父类的继承关系，只有在存在继承关系的前提下，子类才能继承父类的属性和方法，从而实现多态。&lt;/li&gt;
&lt;li&gt;重写：子类需要对父类中的一些方法进行重写，当调用这些方法时，会调用子类重写的方法，而不是原本父类的方法。&lt;/li&gt;
&lt;li&gt;向上转型：在多态中需要将子类的引用赋给父类对象，只有这样，该引用才能够具备调用父类的方法和子类的方法的能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-4-重载和重写的区别？&#34;&gt;2.4 重载和重写的区别？&lt;/h2&gt;
&lt;p&gt;Java 中的重载和重写都是实现多态的方式，但它们的实现方式和使用场景有所不同：&lt;/p&gt;
&lt;p&gt;重载（Overload）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载。&lt;/li&gt;
&lt;li&gt;重载的方法可以改变返回类型；可以相同也可以不同，但不能通过返回类型是否相同来判断重载。&lt;/li&gt;
&lt;li&gt;重载是编译时的多态性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重写（Override）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的参数列表，有兼容的返回类型。&lt;/li&gt;
&lt;li&gt;重写的方法不能抛出新的检查异常或者比被重写方法申明更加宽泛的检查型异常。&lt;/li&gt;
&lt;li&gt;重写是运行时的多态性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：构造器不能被继承，因此不能被重写，但可以被重载。每一个类必须有自己的构造函数，负责构造自己这部分的构造内容。子类不会覆盖父类的构造函数，相反必须在构造函数的一开始就调用父类的构造函数。&lt;/p&gt;
&lt;h2 id=&#34;2-5-抽象类和接口的区别？&#34;&gt;2.5 抽象类和接口的区别？&lt;/h2&gt;
&lt;p&gt;语法层面上的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接口只能定义抽象方法不能实现方法，抽象类既可以定义抽象方法，也可以实现方法。&lt;/li&gt;
&lt;li&gt;抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 &lt;code&gt;public static final&lt;/code&gt; 类型的。&lt;/li&gt;
&lt;li&gt;接口中不能含有静态代码块以及静态方法，而抽象类可以有静态代码块和静态方法。&lt;/li&gt;
&lt;li&gt;抽象类是单继承，而接口是多继承。一个类只能继承一个抽象类，但可以实现多个接口。&lt;/li&gt;
&lt;li&gt;抽象类的方法访问控制符无限制，只是抽象类中的 &lt;code&gt;abstract&lt;/code&gt; 方法不能被 &lt;code&gt;private&lt;/code&gt; 修饰；而接口有限制，接口默认为 &lt;code&gt;public&lt;/code&gt; 控制符。&lt;/li&gt;
&lt;li&gt;抽象类可以有构造方法，接口中不能有构造方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设计层面上的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抽象类是对一种事物的抽象，即对类抽象，而接口是对行为的抽象。抽象类是对整个类整体进行抽象，包括属性、行为，但是接口却是对类局部（只有行为）进行抽象。&lt;/li&gt;
&lt;li&gt;二者的设计层面不同，抽象类作为很多子类的父类，它是一种模板式设计。而接口是一种行为规范，它是一种辐射式设计。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-6-什么是不可变对象？有什么好处？&#34;&gt;2.6 什么是不可变对象？有什么好处？&lt;/h2&gt;
&lt;p&gt;在 Java 中，不可变对象（Immutable Object）是指一旦被创建后，对象所有的状态及属性在其生命周期内不会发生任何变化。也就是说，一个对象在创建后，不能对该对象进行任何更改。如 &lt;code&gt;String&lt;/code&gt;、&lt;code&gt;Integer&lt;/code&gt; 以及其它包装类。不可变对象有很多优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构造、测试和使用都很简单：由于对象状态不会改变，所以可以避免了很多复杂的状态检查和同步。&lt;/li&gt;
&lt;li&gt;线程安全且没有同步问题：线程安全是最大的好处，在并发环境下，不可变对象无需进行额外的同步操作，因此可以极大地简化并发编程。&lt;/li&gt;
&lt;li&gt;不需要担心数据会被其它线程修改：这是因为对象的状态不会改变，所以不会出现一个线程正在读取对象状态，而另一个线程同时修改该状态的情况。&lt;/li&gt;
&lt;li&gt;当用作类的属性时不需要保护性拷贝：如果类的属性是可变的，那么在返回属性值或者接收新的属性值时，需要进行保护性拷贝以防止属性被外部代码修改。而对于不可变对象，由于其状态不能被修改，所以无需进行保护性拷贝。&lt;/li&gt;
&lt;li&gt;可以很好的用作 &lt;code&gt;Map&lt;/code&gt; 键值和 &lt;code&gt;Set&lt;/code&gt; 元素：由于不可变对象一旦创建就不能改变，所以它们是值得信赖的键值，可以确保在对象被用作键值的过程中始终保持一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然而，不可变对象也有一些缺点，最大的缺点就是创建对象的开销，因为每一步修改操作都会产生一个新的对象。&lt;/p&gt;
&lt;h2 id=&#34;2-7-equals方法和-的区别？&#34;&gt;2.7 equals方法和==的区别？&lt;/h2&gt;
&lt;p&gt;在 Java 中，&lt;code&gt;==&lt;/code&gt; 和 &lt;code&gt;equals()&lt;/code&gt; 方法都可以用来比较两个对象，但它们的比较方式和使用场景有所不同：&lt;/p&gt;
&lt;p&gt;首先 &lt;code&gt;==&lt;/code&gt; 是一个运算符，而 &lt;code&gt;equals()&lt;/code&gt; 是一个方法，二者比较的内容有以下不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt;：如果比较的是&lt;strong&gt;基本数据类型&lt;/strong&gt;，则比较的是&lt;strong&gt;数值&lt;/strong&gt;是否相等；如果比较的是&lt;strong&gt;引用数据类型&lt;/strong&gt;，则比较的是两个对象的&lt;strong&gt;内存地址&lt;/strong&gt;是否相等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;equals()&lt;/code&gt;：默认情况下，比较的是两个对象的&lt;strong&gt;内存地址&lt;/strong&gt;。但是，许多类（如 &lt;code&gt;String&lt;/code&gt;、&lt;code&gt;Integer&lt;/code&gt; 等）已经&lt;strong&gt;重写&lt;/strong&gt;了 &lt;code&gt;equals()&lt;/code&gt; 方法，使其能够比较两个对象的&lt;strong&gt;内容&lt;/strong&gt;是否相等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二者的一般使用场景如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt;：通常用于比较基本数据类型，或者比较两个对象是否指向同一内存地址。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;equals()&lt;/code&gt;：通常用于比较两个对象的内容是否相等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-8-String、StringBuffer、StringBuilder的区别是什么？&#34;&gt;2.8 String、StringBuffer、StringBuilder的区别是什么？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可变性：&lt;code&gt;String&lt;/code&gt; 是不可变的，也就是说，一旦 &lt;code&gt;String&lt;/code&gt; 对象被创建，其值就不能被改变。如果需要修改 &lt;code&gt;String&lt;/code&gt;，Java 会创建一个新的 &lt;code&gt;String&lt;/code&gt; 对象。&lt;code&gt;StringBuffer&lt;/code&gt; 和 &lt;code&gt;StringBuilder&lt;/code&gt; 是可变的，也就是说，它们可以在原地修改字符串，而不需要创建新的对象。&lt;/li&gt;
&lt;li&gt;线程安全性：&lt;code&gt;StringBuffer&lt;/code&gt; 是线程安全的，因为它的所有公共方法都是同步的。这意味着在多线程环境下，&lt;code&gt;StringBuffer&lt;/code&gt; 可以安全地使用。&lt;code&gt;StringBuilder&lt;/code&gt; 不是线程安全的。因此，如果你的代码只在单线程环境下运行，使用 &lt;code&gt;StringBuilder&lt;/code&gt; 通常会比 &lt;code&gt;StringBuffer&lt;/code&gt; 更快。&lt;/li&gt;
&lt;li&gt;性能：对于需要频繁修改字符串的情况，使用 &lt;code&gt;StringBuffer&lt;/code&gt; 或 &lt;code&gt;StringBuilder&lt;/code&gt; 通常比使用 &lt;code&gt;String&lt;/code&gt; 更高效。这是因为每次修改 &lt;code&gt;String&lt;/code&gt; 时，都会创建一个新的对象，这会对性能产生影响。在大部分情况下，&lt;code&gt;StringBuilder&lt;/code&gt; 的性能优于 &lt;code&gt;StringBuffer&lt;/code&gt;，这主要是因为 &lt;code&gt;StringBuilder&lt;/code&gt; 不需要考虑线程安全。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-9-为什么Java中的String要设计成不可变的？&#34;&gt;2.9 为什么Java中的String要设计成不可变的？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;安全性：不可变对象本身是线程安全的，可以在多线程环境下安全使用，无需额外的同步。此外，&lt;code&gt;String&lt;/code&gt; 经常被用作许多 Java 类的参数，例如网络连接和文件路径，如果是可变的，那么它的值可能在你不知情的情况下被改变，这可能会导致安全问题。&lt;/li&gt;
&lt;li&gt;哈希码缓存：由于 &lt;code&gt;String&lt;/code&gt; 是不可变的，所以它的哈希码是固定的，可以被缓存，这对于哈希映射（如 &lt;code&gt;HashMap&lt;/code&gt;）来说非常有用，可以提高查找效率。&lt;/li&gt;
&lt;li&gt;字符串池：在 Java 中，相同的字符串字面量只会在内存中存在一份，这被称为字符串池（String Pool）。这种设计可以节省内存，提高效率。如果 &lt;code&gt;String&lt;/code&gt; 是可变的那么字符串池就无法实现了。&lt;/li&gt;
&lt;li&gt;类加载器安全：&lt;code&gt;String&lt;/code&gt; 是 Java 类加载器使用的关键类，如果是可变的那么可能会影响到类加载器的安全性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-10-基本类型和包装类型有什么区别？什么是自动装箱-拆箱？&#34;&gt;2.10 基本类型和包装类型有什么区别？什么是自动装箱/拆箱？&lt;/h2&gt;
&lt;p&gt;基本类型和包装类型的主要区别如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始值：基本类型有初始值，而包装类型的默认值是 &lt;code&gt;null&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;null&lt;/code&gt; 值：包装类型可以为 &lt;code&gt;null&lt;/code&gt;，而基本类型不可以。&lt;/li&gt;
&lt;li&gt;存储位置：如果一个基本类型是成员变量就存储在堆内存里，如果是局部变量就存储在栈内存里；而包装类型则存储的是堆中的引用。&lt;/li&gt;
&lt;li&gt;泛型：包装类型可用于泛型，而基本类型不可以。&lt;/li&gt;
&lt;li&gt;比较：在使用 &lt;code&gt;==&lt;/code&gt; 进行判断的时候，基本类型使用 &lt;code&gt;==&lt;/code&gt; 直接判断其值是否相等，而包装类型判断的是其指向的地址是否相等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自动装箱和自动拆箱是 Java 语言的特性，使得基本类型和包装类型之间的转换更加方便：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动装箱：就是将基本数据类型自动转换为对应的包装类。例如，&lt;code&gt;Integer i = 10;&lt;/code&gt;，这里的10是一个 &lt;code&gt;int&lt;/code&gt; 类型，但 Java 会自动将其转换（装箱）为 &lt;code&gt;Integer&lt;/code&gt; 类型。&lt;/li&gt;
&lt;li&gt;自动拆箱：就是将包装类自动转换为基本数据类型。例如，&lt;code&gt;int a = i;&lt;/code&gt;，这里的 &lt;code&gt;i&lt;/code&gt; 是 &lt;code&gt;Integer&lt;/code&gt; 类型，但 Java 会自动将其转换（拆箱）为 &lt;code&gt;int&lt;/code&gt; 类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些特性使得我们在编写 Java 代码时可以更自然地混合使用基本类型和包装类型，而不需要关心它们之间的转换细节。&lt;/p&gt;
&lt;h2 id=&#34;2-11-B-S和C-S架构分别是什么？&#34;&gt;2.11 B/S和C/S架构分别是什么？&lt;/h2&gt;
&lt;p&gt;B/S 架构和 C/S 架构是两种常见的软件系统体系结构。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B/S 架构，全称为 Browser/Server，即浏览器/服务器结构。它是 Web 兴起后的一种网络结构模式，Web 浏览器是客户端最主要的应用软件。这种模式统一了客户端，将系统功能实现的核心部分集中到服务器上，简化了系统的开发、维护和使用。客户端只需要安装一个浏览器，通过 Web 服务器与数据库服务器进行数据交互。B/S 架构利用了 Web 浏览器技术和 Internet 协议，实现了异构系统的连接和信息的共享。&lt;/li&gt;
&lt;li&gt;C/S 架构，全称是 Client/Server，即客户端/服务器体系结构，主要应用于局域网内。它是一种网络体系结构，通常采取两层结构，服务器负责数据的管理，客户端负责完成与用户的交互任务。即客户端是用户运行应用程序的 PC 端或者工作站，客户端要依靠服务器来获取资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;3. 反射&lt;/h1&gt;
&lt;h2 id=&#34;3-1-什么是反射？&#34;&gt;3.1 什么是反射？&lt;/h2&gt;
&lt;p&gt;在 Java 中，反射是一种强大的工具，它允许程序在&lt;strong&gt;运行时&lt;/strong&gt;访问类或对象的信息，并&lt;strong&gt;动态地&lt;/strong&gt;操作它们。以下是反射的一些主要特性和用途：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动态创建对象：反射可以在运行时动态地创建任意一个类的对象。&lt;/li&gt;
&lt;li&gt;获取类的信息：反射可以获取任意一个类的所有属性和方法，包括私有的。&lt;/li&gt;
&lt;li&gt;动态调用方法和属性：反射可以在运行时动态地调用任意一个对象的任意方法和属性。&lt;/li&gt;
&lt;li&gt;动态修改属性：反射可以改变对象的属性，甚至可以打破封装性，导致 Java 对象的属性不安全。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;反射在许多 Java 框架中都有应用，例如 Spring 和 Hibernate，它们使用反射来实现依赖注入和对象关系映射。然而，反射也有其缺点，例如可能会消耗更多的系统资源，如果不需要动态地创建一个对象，那么就不需要用反射。此外，反射调用方法时可以忽略权限检查，因此可能会破坏封装性而导致安全问题。&lt;/p&gt;
&lt;h2 id=&#34;3-2-举一下反射使用的例子？&#34;&gt;3.2 举一下反射使用的例子？&lt;/h2&gt;
&lt;p&gt;（1）获取 &lt;code&gt;Class&lt;/code&gt; 对象：我们可以通过三种方式获取 &lt;code&gt;Class&lt;/code&gt; 对象：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 1. 通过类名.class的方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Class&amp;lt;String&amp;gt; c1 = String.class;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 2. 通过对象的getClass()方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Class&amp;lt;? &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;String&lt;/span&gt;&amp;gt; c2 = s.getClass();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 3. 通过Class类的静态方法forName(String className)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Class&amp;lt;?&amp;gt; c3 = Class.forName(&lt;span class=&#34;string&#34;&gt;&amp;quot;java.lang.String&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（2）创建对象：我们可以通过 &lt;code&gt;Class&lt;/code&gt; 对象的 &lt;code&gt;newInstance()&lt;/code&gt; 方法来创建对应类的对象：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Class&amp;lt;?&amp;gt; c = Class.forName(&lt;span class=&#34;string&#34;&gt;&amp;quot;java.lang.String&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (String) c.newInstance();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（3）获取方法并调用：我们可以通过 &lt;code&gt;Class&lt;/code&gt; 对象的 &lt;code&gt;getMethod()&lt;/code&gt; 方法来获取一个类的方法，然后通过 &lt;code&gt;Method&lt;/code&gt; 对象的 &lt;code&gt;invoke()&lt;/code&gt; 方法来调用这个方法：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Class&amp;lt;?&amp;gt; c = Class.forName(&lt;span class=&#34;string&#34;&gt;&amp;quot;java.lang.String&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; c.getMethod(&lt;span class=&#34;string&#34;&gt;&amp;quot;substring&amp;quot;&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;.class, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (String) method.invoke(&lt;span class=&#34;string&#34;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// Hello&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（4）获取和设置字段：我们可以通过 &lt;code&gt;Class&lt;/code&gt; 对象的 &lt;code&gt;getField()&lt;/code&gt; 方法来获取一个类的公有字段，然后通过 &lt;code&gt;Field&lt;/code&gt; 对象的 &lt;code&gt;get()&lt;/code&gt; 和 &lt;code&gt;set()&lt;/code&gt; 方法来获取和设置这个字段的值：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Class&amp;lt;?&amp;gt; c = Class.forName(&lt;span class=&#34;string&#34;&gt;&amp;quot;java.awt.Dimension&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; c.newInstance();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Field&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; c.getField(&lt;span class=&#34;string&#34;&gt;&amp;quot;width&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;f.set(o, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(f.getInt(o));  &lt;span class=&#34;comment&#34;&gt;// 100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;3-3-介绍一下反射在JDBC和Spring中的应用&#34;&gt;3.3 介绍一下反射在JDBC和Spring中的应用&lt;/h2&gt;
&lt;p&gt;（1）在 JDBC 中的应用：我们在使用 JDBC 连接数据库时，会使用 &lt;code&gt;Class.forName()&lt;/code&gt; 通过反射加载数据库的驱动程序。例如，假设我们有 &lt;code&gt;com.mysql.cj.jdbc.Driver&lt;/code&gt; 这个类，如果我们使用 MySQL 数据库，那么就传入 MySQL 的驱动类：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 加载并注册JDBC驱动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Class.forName(&lt;span class=&#34;string&#34;&gt;&amp;quot;com.mysql.cj.jdbc.Driver&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 创建数据库连接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;Connection&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;conn&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; DriverManager.getConnection(&lt;span class=&#34;string&#34;&gt;&amp;quot;jdbc:mysql://localhost:3306/&amp;lt;DatabaseName&amp;gt;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;lt;username&amp;gt;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;lt;password&amp;gt;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（2）在 Spring 中的应用：Spring 通过配置文件配置各种各样的 &lt;code&gt;bean&lt;/code&gt;，你需要用到哪些 &lt;code&gt;bean&lt;/code&gt; 就配哪些，Spring 容器就会根据你的需求去动态加载。Spring 的 IoC 容器可以动态地加载和管理 &lt;code&gt;bean&lt;/code&gt;，创建对象。这是通过反射实现的，Spring 会读取配置文件中的类全名，然后通过反射来创建对象：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;lt;!-- Spring配置文件 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;myBean&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;com.example.MyClass&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;myProperty&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 从Spring IoC容器中获取bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;context&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ClassPathXmlApplicationContext&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;beans.xml&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;MyClass&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;myBean&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (MyClass) context.getBean(&lt;span class=&#34;string&#34;&gt;&amp;quot;myBean&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 输出：Hello World&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(myBean.getMyProperty());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;3-4-反射机制的原理是什么？&#34;&gt;3.4 反射机制的原理是什么？&lt;/h2&gt;
&lt;p&gt;Java 反射机制的核心是在程序运行时动态加载类并获取类的详细信息，从而操作类或对象的属性和方法。本质上，当 JVM 得到 &lt;code&gt;Class&lt;/code&gt; 对象之后，再通过 &lt;code&gt;Class&lt;/code&gt; 对象进行反编译，从而获取对象的各种信息。Java 属于先编译再运行的语言，程序中对象的类型在编译期就确定下来了，而当程序在运行时可能需要动态加载某些类，这些类因为之前用不到，所以没有被加载到 JVM。通过反射，可以在运行时动态地创建对象并调用其属性，不需要提前在编译期知道运行的对象是谁。&lt;/p&gt;
&lt;p&gt;反射的原理可以通过以下步骤来理解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加载：首先，将 &lt;code&gt;.class&lt;/code&gt; 文件读入内存，并为之创建一个 &lt;code&gt;Class&lt;/code&gt; 对象。&lt;/li&gt;
&lt;li&gt;反编译：然后，通过 &lt;code&gt;Class&lt;/code&gt; 对象进行反编译，从而获取对象的各种信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;反射机制的优点是在运行时获得类的各种内容，进行反编译，对于 Java 这种先编译再运行的语言，能够让我们很方便的创建灵活的代码，这些代码可以在运行时装配，无需在组件之间进行源代码的链接，更加容易实现面向对象。&lt;/p&gt;
</content>
        <category term="Interview" />
        <updated>2023-11-23T08:13:00.000Z</updated>
    </entry>
    <entry>
        <id>https://asanosaki.github.io/posts/48028.html</id>
        <title>MySQL面试题总结</title>
        <link rel="alternate" href="https://asanosaki.github.io/posts/48028.html"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;MySQL 常见面试题总结，文章将不断更新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h1&gt;1. 基础&lt;/h1&gt;
&lt;h2 id=&#34;1-1-数据库的三范式是什么？&#34;&gt;1.1 数据库的三范式是什么？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;第一范式（1NF）：强调的是列的原子性，即数据库表的每一列都是不可分割的原子数据项。&lt;/li&gt;
&lt;li&gt;第二范式（2NF）：要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性。&lt;/li&gt;
&lt;li&gt;第三范式（3NF）：任何非主属性不依赖于其它非主属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-2-MySQL支持哪些存储引擎？&#34;&gt;1.2 MySQL支持哪些存储引擎？&lt;/h2&gt;
&lt;p&gt;MySQL 支持多种存储引擎，比如 InnoDB、MyISAM、Memory、Archive 等等。在大多数的情况下，直接选择使用 InnoDB 引擎都是最合适的，InnoDB 也是 MySQL 的默认存储引擎。&lt;/p&gt;
&lt;p&gt;MyISAM 和 InnoDB 的区别有哪些：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;InnoDB 支持&lt;strong&gt;事务&lt;/strong&gt;，MyISAM 不支持。&lt;/li&gt;
&lt;li&gt;InnoDB 支持&lt;strong&gt;外键&lt;/strong&gt;，MyISAM 不支持。&lt;/li&gt;
&lt;li&gt;InnoDB 是&lt;strong&gt;聚集索引&lt;/strong&gt;，数据文件是和索引绑在一起的，必须要有主键，通过主键索引效率很高；MyISAM 是&lt;strong&gt;非聚集索引&lt;/strong&gt;，数据文件是分离的，索引保存的是数据文件的指针，主键索引和辅助索引是独立的。&lt;/li&gt;
&lt;li&gt;InnoDB 不支持&lt;strong&gt;全文索引&lt;/strong&gt;，MyISAM 支持全文索引，查询效率上 MyISAM 更高。&lt;/li&gt;
&lt;li&gt;InnoDB 不保存表的具体行数，MyISAM 用一个变量保存了整个表的行数。&lt;/li&gt;
&lt;li&gt;MyISAM 采用&lt;strong&gt;表级锁&lt;/strong&gt;（table-level locking）；InnoDB 支持&lt;strong&gt;行级锁&lt;/strong&gt;（row-level locking）和表级锁，默认为行级锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-3-超键、候选键、主键、外键分别是什么？&#34;&gt;1.3 超键、候选键、主键、外键分别是什么？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;超键：在关系中能唯一标识元组的属性集称为关系模式的超键。一个属性可以为作为一个超键，多个属性组合在一起也可以作为一个超键。&lt;strong&gt;超键包含候选键和主键&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;候选键：是&lt;strong&gt;最小超键&lt;/strong&gt;，即没有冗余元素的超键。&lt;/li&gt;
&lt;li&gt;主键：数据库表中对储存数据对象予以唯一和完整标识的数据列或属性的组合。一个数据列只能有一个主键，且主键的取值不能缺失，即不能为空值（NULL）。&lt;/li&gt;
&lt;li&gt;外键：在一个表中存在的另一个表的主键称此表的外键。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-4-SQL约束有哪几种？&#34;&gt;1.4 SQL约束有哪几种？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NOT NULL&lt;/code&gt;：用于控制字段的内容一定不能为空（NULL）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UNIQUE&lt;/code&gt;：控制字段内容不能重复，一个表允许有多个 &lt;code&gt;UNIQUE&lt;/code&gt; 约束。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PRIMARY KEY&lt;/code&gt;：也是用于控制字段内容不能重复，但它在一个表只允许出现一个。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FOREIGN KEY&lt;/code&gt;：用于预防破坏表之间连接的动作，也能防止非法数据插入外键列，因为它必须是它指向的那个表中的值之一。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CHECK&lt;/code&gt;：用于控制字段的值范围。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-5-MySQL中的varchar和char有什么区别？&#34;&gt;1.5 MySQL中的varchar和char有什么区别？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;char&lt;/code&gt; 是一个&lt;strong&gt;定长&lt;/strong&gt;字段，假如申请了 &lt;code&gt;char(10)&lt;/code&gt; 的空间，那么无论实际存储多少内容，该字段都占用10个字符；而 &lt;code&gt;varchar&lt;/code&gt; 是&lt;strong&gt;变长&lt;/strong&gt;的，也就是说申请的只是&lt;strong&gt;最大长度&lt;/strong&gt;，占用的空间为实际字符长度 + 1，最后一个字符存储使用了多长的空间。&lt;/p&gt;
&lt;p&gt;在检索效率上来讲，&lt;code&gt;char &amp;gt; varchar&lt;/code&gt;，因此在使用中，如果确定某个字段的值的长度，可以使用 &lt;code&gt;char&lt;/code&gt;，否则应该尽量使用 &lt;code&gt;varchar&lt;/code&gt;，例如存储用户 MD5 加密后的密码，则可以使用 &lt;code&gt;char&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;1-6-MySQL中in和exists区别？&#34;&gt;1.6 MySQL中in和exists区别？&lt;/h2&gt;
&lt;p&gt;MySQL 中的 &lt;code&gt;in&lt;/code&gt; 语句是把外表和内表作 Hash 连接，而 &lt;code&gt;exists&lt;/code&gt; 语句是对外表作 Loop 循环，每次 Loop 循环再对内表进行查询。一直大家都认为 &lt;code&gt;exists&lt;/code&gt; 比 &lt;code&gt;in&lt;/code&gt; 语句的效率要高，这种说法其实是不准确的。这个是要区分环境的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果查询的两个表大小相当，那么用 &lt;code&gt;in&lt;/code&gt; 和 &lt;code&gt;exists&lt;/code&gt; 差别不大。&lt;/li&gt;
&lt;li&gt;如果两个表中一个较小，一个是大表，则子查询表大的用 &lt;code&gt;exists&lt;/code&gt;，子查询表小的用 &lt;code&gt;in&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;not in&lt;/code&gt; 和 &lt;code&gt;not exists&lt;/code&gt;：如果查询语句使用了 &lt;code&gt;not in&lt;/code&gt;，那么内外表都进行全表扫描，没有用到索引；而 &lt;code&gt;not extsts&lt;/code&gt; 的子查询依然能用到表上的索引。所以无论哪个表大，用 &lt;code&gt;not exists&lt;/code&gt; 都比 &lt;code&gt;not in&lt;/code&gt; 要快。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-7-drop、delete与truncate的区别？&#34;&gt;1.7 drop、delete与truncate的区别？&lt;/h2&gt;
&lt;p&gt;三者都表示删除，但是三者有一些差别：&lt;/p&gt;
&lt;table&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;&lt;/th&gt;
            &lt;th&gt;delete&lt;/th&gt;
            &lt;th&gt;truncate&lt;/th&gt;
            &lt;th&gt;drop&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;类型&lt;/td&gt;
            &lt;td&gt;属于 DML&lt;/td&gt;
            &lt;td&gt;属于 DDL&lt;/td&gt;
            &lt;td&gt;属于 DDL&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;回滚&lt;/td&gt;
            &lt;td&gt;可回滚&lt;/td&gt;
            &lt;td&gt;不可回滚&lt;/td&gt;
            &lt;td&gt;不可回滚&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;删除内容&lt;/td&gt;
            &lt;td&gt;表结构还在，删除表的全部或者一部分数据&lt;/td&gt;
            &lt;td&gt;表结构还在，删除表中的所有数据&lt;/td&gt;
            &lt;td&gt;从数据库中删除表，所有的数据行、索引和权限也会被删除&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;删除速度&lt;/td&gt;
            &lt;td&gt;删除速度慢，需要逐行删除&lt;/td&gt;
            &lt;td&gt;删除速度快&lt;/td&gt;
            &lt;td&gt;删除速度最快&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;1-8-什么是存储过程？有哪些优缺点？&#34;&gt;1.8 什么是存储过程？有哪些优缺点？&lt;/h2&gt;
&lt;p&gt;存储过程是一些预编译的 SQL 语句。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;更加直白的理解：存储过程可以说是一个记录集，它是由一些 T-SQL 语句组成的代码块，这些 T-SQL 语句代码像一个方法一样实现一些功能（对单表或多表的增删改查），然后再给这个代码块取一个名字，在用到这个功能的时候调用它就行了。&lt;/li&gt;
&lt;li&gt;存储过程是一个预编译的代码块，执行效率比较高，一个存储过程替代大量 T-SQL 语句，可以降低网络通信量，提高通信速率，可以一定程度上确保数据安全。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但是，在互联网项目中，其实是不太推荐存储过程的，比较出名的就是阿里的《Java 开发手册》中禁止使用存储过程，我个人的理解是，在互联网项目中，迭代太快，项目的生命周期也比较短，人员流动相比于传统的项目也更加频繁，在这样的情况下，存储过程的管理确实是没有那么方便，同时，复用性也没有写在服务层那么好。&lt;/p&gt;
&lt;h2 id=&#34;1-9-MySQL执行查询的过程？&#34;&gt;1.9 MySQL执行查询的过程？&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;客户端通过 TCP 连接发送连接请求到 MySQL 连接器，连接器会对该请求进行权限验证及连接资源分配。&lt;/li&gt;
&lt;li&gt;查缓存（当判断缓存是否命中时，MySQL 不会进行解析查询语句，而是直接使用 SQL 语句和客户端发送过来的其他原始信息。所以，任何字符上的不同，例如空格、注解等都会导致缓存的不命中）。&lt;/li&gt;
&lt;li&gt;语法分析（SQL 语法是否写错了）：如何把语句给到预处理器，检查数据表和数据列是否存在，解析别名看是否存在歧义。&lt;/li&gt;
&lt;li&gt;优化：是否使用索引，生成执行计划。&lt;/li&gt;
&lt;li&gt;交给执行器，将数据保存到结果集中，同时会逐步将数据缓存到查询缓存中，最终将结果集返回给客户端。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;更新语句执行会复杂一点，需要检查表是否有排它锁，写 &lt;code&gt;binlog&lt;/code&gt;、刷盘、是否执行 &lt;code&gt;commit&lt;/code&gt;。&lt;/p&gt;
&lt;h1&gt;2. 事务&lt;/h1&gt;
&lt;h2 id=&#34;2-1-什么是数据库事务？&#34;&gt;2.1 什么是数据库事务？&lt;/h2&gt;
&lt;p&gt;事务是一个&lt;strong&gt;不可分割&lt;/strong&gt;的数据库操作序列，也是数据库&lt;strong&gt;并发控制的基本单位&lt;/strong&gt;，其执行的结果必须使数据库从一种一致性状态变到另一种一致性状态。事务是逻辑上的一组操作，要么都执行，要么都不执行。&lt;/p&gt;
&lt;p&gt;事务最经典也经常被拿出来说例子就是转账了。&lt;/p&gt;
&lt;p&gt;假如小明要给小红转账1000元，这个转账会涉及到两个关键操作就是：将小明的余额减少1000元，将小红的余额增加1000元。万一在这两个操作之间突然出现错误比如银行系统崩溃，导致小明余额减少而小红的余额没有增加，这样就不对了。事务就是保证这两个关键操作要么都成功，要么都要失败。&lt;/p&gt;
&lt;h2 id=&#34;2-2-事务具有的四个特征？&#34;&gt;2.2 事务具有的四个特征？&lt;/h2&gt;
&lt;p&gt;事务就是一组&lt;strong&gt;原子性&lt;/strong&gt;的操作，这些操作要么全部发生，要么全部不发生。事务把数据库从一种一致性状态转换成另一种一致性状态。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原子性（Atomicity）：事务是数据库的逻辑工作单位，事务中包含的各操作要么都做，要么都不做。&lt;/li&gt;
&lt;li&gt;一致性（Consistency）：事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。因此当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。如果数据库系统运行中发生故障，有些事务尚未完成就被迫中断，这些未完成事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是不一致的状态。&lt;/li&gt;
&lt;li&gt;隔离性（Isolation）：一个事务的执行不能被其它事务干扰。即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。&lt;/li&gt;
&lt;li&gt;持续性（Durability）：也称永久性，指一个事务一旦提交，它对数据库中的数据的改变就应该是永久性的。接下来的其它操作或故障不应该对其执行结果有任何影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-3-MySQL的四种隔离级别？&#34;&gt;2.3 MySQL的四种隔离级别？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Read Uncommitted（读取未提交内容）&lt;br&gt;
在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为&lt;strong&gt;脏读&lt;/strong&gt;（Dirty Read）。&lt;/li&gt;
&lt;li&gt;Read Committed（读取提交内容）&lt;br&gt;
这是大多数数据库系统的默认隔离级别（但不是 MySQL 默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交的事务所做的改变。这种隔离级别也支持所谓的&lt;strong&gt;不可重复读&lt;/strong&gt;（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的 &lt;code&gt;commit&lt;/code&gt;，所以同一 &lt;code&gt;select&lt;/code&gt; 可能返回不同结果。&lt;/li&gt;
&lt;li&gt;Repeatable Read（可重读）&lt;br&gt;
这是 MySQL 的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：&lt;strong&gt;幻读&lt;/strong&gt;（Phantom Read）。&lt;/li&gt;
&lt;li&gt;Serializable（可串行化）&lt;br&gt;
通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;隔离级别&lt;/th&gt;
            &lt;th&gt;脏读&lt;/th&gt;
            &lt;th&gt;不可重复读&lt;/th&gt;
            &lt;th&gt;幻影读&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Read Uncommitted&lt;/td&gt;
            &lt;td&gt;有&lt;/td&gt;
            &lt;td&gt;有&lt;/td&gt;
            &lt;td&gt;有&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Read Committed&lt;/td&gt;
            &lt;td&gt;无&lt;/td&gt;
            &lt;td&gt;有&lt;/td&gt;
            &lt;td&gt;有&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Repeatable Read&lt;/td&gt;
            &lt;td&gt;无&lt;/td&gt;
            &lt;td&gt;无&lt;/td&gt;
            &lt;td&gt;有&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Serializable&lt;/td&gt;
            &lt;td&gt;无&lt;/td&gt;
            &lt;td&gt;无&lt;/td&gt;
            &lt;td&gt;无&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;MySQL 默认采用的是 &lt;code&gt;REPEATABLE-READ&lt;/code&gt; 隔离级别，Oracle 默认采用的是 &lt;code&gt;READ-COMMITTED&lt;/code&gt; 隔离级别。&lt;/p&gt;
&lt;p&gt;事务隔离机制的实现基于锁机制和并发调度。其中并发调度使用的是 MVVC（多版本并发控制），通过保存修改的旧版本信息来支持并发一致性读和回滚等特性。&lt;/p&gt;
&lt;p&gt;因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是 &lt;code&gt;READ-COMMITTED&lt;/code&gt;（读取提交内容），但是你要知道的是 InnoDB 存储引擎默认使用 &lt;code&gt;REPEATABLE-READ&lt;/code&gt;（可重读）并不会有任何性能损失。&lt;/p&gt;
&lt;p&gt;InnoDB 存储引擎在分布式事务的情况下一般会用到 &lt;code&gt;SERIALIZABLE&lt;/code&gt;（可串行化）隔离级别。&lt;/p&gt;
&lt;h2 id=&#34;2-4-什么是脏读、不可重复读与幻读？&#34;&gt;2.4 什么是脏读、不可重复读与幻读？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;脏读：事务 A 读取了事务 B 更新的数据，然后 B 回滚操作，那么 A 读取到的数据是脏数据。&lt;/li&gt;
&lt;li&gt;不可重复读：事务 A 多次读取同一数据，事务 B 在事务 A 多次读取的过程中，对数据作了更新并提交，导致事务 A 多次读取同一数据时，结果不一致。&lt;/li&gt;
&lt;li&gt;幻读：系统管理员 A 将数据库中所有学生的成绩从具体分数改为 ABCDE 等级，但是系统管理员 B 就在这个时候插入了一条具体分数的记录，当系统管理员 A 改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总结：不可重复读侧重于修改，幻读侧重于新增或删除（多了或少了行），脏读是一个事务回滚影响另外一个事务。&lt;/p&gt;
&lt;h2 id=&#34;2-5-事务的实现原理？&#34;&gt;2.5 事务的实现原理？&lt;/h2&gt;
&lt;p&gt;事务是基于重做日志文件（redo log）和回滚日志（undo log）实现的。&lt;/p&gt;
&lt;p&gt;每提交一个事务必须先将该事务的所有日志写入到重做日志文件进行持久化，数据库就可以通过重做日志来保证事务的原子性和持久性。&lt;/p&gt;
&lt;p&gt;每当有修改事务时，还会产生 undo log，如果需要回滚，则根据 undo log 的反向语句进行逻辑操作，比如 &lt;code&gt;insert&lt;/code&gt; 一条记录就 &lt;code&gt;delete&lt;/code&gt; 一条记录。undo log 主要实现数据库的一致性。&lt;/p&gt;
&lt;h2 id=&#34;2-6-介绍一下MySQL事务日志？&#34;&gt;2.6 介绍一下MySQL事务日志？&lt;/h2&gt;
&lt;p&gt;InnoDB 事务日志包括 redo log 和 undo log。&lt;/p&gt;
&lt;p&gt;undo log 指事务开始之前，在操作任何数据之前，首先将需操作的数据备份到一个地方。redo log 指事务中操作的任何数据，将最新的数据备份到一个地方。&lt;/p&gt;
&lt;p&gt;事务日志的目的：实例或者介质失败，事务日志文件就能派上用场。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redu log&lt;br&gt;
redo log 不是随着事务的提交才写入的，而是在事务的执行过程中，便开始写入 redo log 中。具体的落盘策略可以进行配置。防止在发生故障的时间点，尚有脏页未写入磁盘，在重启 MySQL 服务的时候，根据 redo log 进行重做，从而达到事务的未入磁盘数据进行持久化这一特性。redo log 是为了实现事务的持久性而出现的产物。&lt;/li&gt;
&lt;li&gt;undo log&lt;br&gt;
undo log 用来回滚行记录到某个版本。事务未提交之前，undo log 保存了未提交之前的版本数据，undo log 中的数据可作为数据旧版本快照供其他并发事务进行快照读。是为了实现事务的原子性而出现的产物，在 MySQL InnoDB 存储引擎中用来实现多版本并发控制。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-7-什么是MySQL的binlog？&#34;&gt;2.7 什么是MySQL的binlog？&lt;/h2&gt;
&lt;p&gt;MySQL 的 binlog 是记录所有数据库&lt;strong&gt;表结构变更&lt;/strong&gt;（例如 &lt;code&gt;CREATE&lt;/code&gt;、&lt;code&gt;ALTER TABLE&lt;/code&gt;）以及&lt;strong&gt;表数据修改&lt;/strong&gt;（例如 &lt;code&gt;INSERT&lt;/code&gt;、&lt;code&gt;UPDATE&lt;/code&gt;、&lt;code&gt;DELETE&lt;/code&gt;）的二进制日志。binlog 不会记录 &lt;code&gt;SELECT&lt;/code&gt; 和 &lt;code&gt;SHOW&lt;/code&gt; 这类操作，因为这类操作对数据本身并没有修改，但你可以通过查询通用日志来查看 MySQL 执行过的所有语句。&lt;/p&gt;
&lt;p&gt;MySQL binlog 以事件形式记录，还包含语句执行所消耗的时间，MySQL 的二进制日志是事务安全型的。binlog 的主要目的是复制和恢复。&lt;/p&gt;
&lt;p&gt;binlog 有三种格式，各有优缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;statement&lt;/code&gt;：基于 SQL 语句的模式，某些语句和函数如 &lt;code&gt;UUID&lt;/code&gt;、&lt;code&gt;LOAD DATA INFILE&lt;/code&gt; 等在复制过程中可能导致数据不一致甚至出错。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;row&lt;/code&gt;：基于行的模式，记录的是行的变化，很安全。但是 binlog 会比其他两种模式大很多，在一些大表中清除大量数据时在 binlog 中会生成很多条语句，可能导致从库延迟变大。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mixed&lt;/code&gt;：混合模式，根据语句来选用是 &lt;code&gt;statement&lt;/code&gt; 还是 &lt;code&gt;row&lt;/code&gt; 模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-8-在事务中可以混合使用存储引擎吗？&#34;&gt;2.8 在事务中可以混合使用存储引擎吗？&lt;/h2&gt;
&lt;p&gt;尽量不要在同一个事务中使用多种存储引擎，MySQL 服务器层不管理事务，事务是由下层的存储引擎实现的。&lt;/p&gt;
&lt;p&gt;如果在事务中混合使用了事务型和非事务型的表（例如 InnoDB 和 MyISAM 表），在正常提交的情况下不会有什么问题。&lt;/p&gt;
&lt;p&gt;但如果该事务需要回滚，非事务型的表上的变更就无法撤销，这会导致数据库处于不一致的状态，这种情况很难修复，事务的最终结果将无法确定。所以，为每张表选择合适的存储引擎非常重要。&lt;/p&gt;
&lt;h2 id=&#34;2-9-什么是MVCC？&#34;&gt;2.9 什么是MVCC？&lt;/h2&gt;
&lt;p&gt;MVCC，即多版木并发控制。MVCC 的实现，是通过保存数据在某个时间点的快照来实现的。根据事务开始的时间不同，每个事务对同一张表，同一时刻看到的数据可能是不一样的。&lt;/p&gt;
&lt;h2 id=&#34;2-10-MVCC的实现&#34;&gt;2.10 MVCC的实现&lt;/h2&gt;
&lt;p&gt;对于 InnoDB，聚簇索引记录中包含3个隐藏的列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ROW ID：隐藏的自增 ID，如果表没有主键，InnoDB 会自动按 ROW ID 产生一个聚集索引树。&lt;/li&gt;
&lt;li&gt;事务 ID：记录最后一次修改该记录的事务 ID。&lt;/li&gt;
&lt;li&gt;回滚指针：指向这条记录的上一个版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们举个例子，假如现在有两个事务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事务1：&lt;code&gt;insert into t1(a, b) values (1, 1);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;事务2：&lt;code&gt;update t1 set b = 666 where a = 1;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如图，首先 &lt;code&gt;insert&lt;/code&gt; 语句向表 &lt;code&gt;t1&lt;/code&gt; 中插入了一条数据，&lt;code&gt;a&lt;/code&gt; 字段为1，&lt;code&gt;b&lt;/code&gt; 字段为1，ROW ID 也为1，事务 ID 假设为1，回滚指针假设为 &lt;code&gt;null&lt;/code&gt;。当执行 &lt;code&gt;update t1 set b = 666 where a = 1&lt;/code&gt; 时，大致步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据库会先对满足 &lt;code&gt;a = 1&lt;/code&gt; 的行加排他锁；&lt;/li&gt;
&lt;li&gt;然后将原记录复制到 undo 表空间中；&lt;/li&gt;
&lt;li&gt;修改 &lt;code&gt;b&lt;/code&gt; 字段的值为666，修改事务 ID 为2；&lt;/li&gt;
&lt;li&gt;并通过隐藏的回滚指针指向 undo log 中的历史记录；&lt;/li&gt;
&lt;li&gt;事务提交，释放前面对满足 &lt;code&gt;a = 1&lt;/code&gt; 的行所加的排他锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此可以总结出 MVCC 实现的原理大致是：&lt;/p&gt;
&lt;p&gt;InnoDB 每一行数据都有一个隐藏的回滚指针，用于指向该行修改前的最后一个历史版本，这个历史版本存放在 undo log 中。如果要执行更新操作，会将原记录放入 undo log 中，并通过隐藏的回滚指针指向 undo log 中的原记录。其它事务此时需要查询时，就是查询 undo log 中这行数据的最后一个历史版本。&lt;/p&gt;
&lt;p&gt;MVCC 最大的好处是读不加锁，读写不冲突，极大地增加了 MySQL 的并发性。通过 MVCC，保证了事务 ACID 中的隔离性。&lt;/p&gt;
&lt;h1&gt;3. 锁&lt;/h1&gt;
&lt;h2 id=&#34;3-1-为什么要加锁？&#34;&gt;3.1 为什么要加锁？&lt;/h2&gt;
&lt;p&gt;当多个用户并发地存取数据时，在数据库中就会产生多个事务同时存取同一数据的情况。若对并发操作不加控制就可能读取和存储不正确的数据，破坏数据库的一致性。因此需要加锁使得在多用户环境下保证数据库的完整性和一致性。&lt;/p&gt;
&lt;h2 id=&#34;3-2-按照锁的粒度分数据库锁有哪些？&#34;&gt;3.2 按照锁的粒度分数据库锁有哪些？&lt;/h2&gt;
&lt;p&gt;在关系型数据库中，可以按照锁的粒度把数据库锁分为行级锁（InnoDB 引擎）、表级锁(MyISAM 引擎）和页级锁（BDB引擎）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;行级锁
&lt;ul&gt;
&lt;li&gt;行级锁是 MySQL 中锁定粒度最细的一种锁，表示只针对当前操作的行进行加锁。行级锁能大大减少数据库操作的冲突。其加锁粒度最小，但加锁的开销也最大。行级锁分为共享锁和排他锁。&lt;/li&gt;
&lt;li&gt;开销大，加锁慢，会出现死锁，锁定粒度最小，发生锁冲突的概率最低，并发度也最高。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;表级锁
&lt;ul&gt;
&lt;li&gt;表级锁是 MySQL 中锁定粒度最大的一种锁，表示对当前操作的整张表加锁，它实现简单，资源消耗较少，被大部分 MySQL 引擎支持。最常使用的 MyISAM 与 InnoDB 都支持表级锁定。表级锁定分为表共享读锁（共享锁）与表独占写锁（排他锁）。&lt;/li&gt;
&lt;li&gt;开销小，加锁快，不会出现死锁，锁定粒度大，发生锁冲突的概率最高，并发度最低。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;页级锁
&lt;ul&gt;
&lt;li&gt;页级锁是 MySQL 中锁定粒度介于行级锁和表级锁之间的一种锁。表级锁速度快，但冲突多，行级锁冲突少，但速度慢。所以取了折衷的页级锁，一次锁定相邻的一组记录。BDB 支持页级锁。&lt;/li&gt;
&lt;li&gt;开销和加锁时间界于表锁和行锁之间，会出现死锁，锁定粒度界于表锁和行锁之间，并发度一般。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MyISAM 和 InnoDB 存储引擎使用的锁：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MyISAM 采用表级锁（table-level locking）。&lt;/li&gt;
&lt;li&gt;InnoDB 支持行级锁（row-level locking）和表级锁，默认为行级锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-3-从锁的类别上分MySQL都有哪些锁呢？&#34;&gt;3.3 从锁的类别上分MySQL都有哪些锁呢？&lt;/h2&gt;
&lt;p&gt;从锁的类别上来讲，有共享锁和排他锁。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;共享锁：又叫做读锁，当用户要进行数据的读取时，对数据加上共享锁。共享锁可以同时加上多个。&lt;/li&gt;
&lt;li&gt;排他锁：又叫做写锁，当用户要进行数据的写入时，对数据加上排他锁。排他锁只可以加一个，它和其它的排他锁，共享锁都相斥。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用上面的例子来说就是用户的行为有两种，一种是来看房，多个用户一起看房是可以接受的。一种是真正的入住一晚，在这期间，无论是想入住的还是想看房的都不可以。&lt;/p&gt;
&lt;p&gt;锁的粒度取决于具体的存储引擎，InnoDB 实现了行级锁，页级锁，表级锁。他们的加锁开销从大到小，并发能力也是从大到小。&lt;/p&gt;
&lt;h2 id=&#34;3-4-数据库的乐观锁和悲观锁是什么？怎么实现的？&#34;&gt;3.4 数据库的乐观锁和悲观锁是什么？怎么实现的？&lt;/h2&gt;
&lt;p&gt;数据库管理系统（DBMS）中的并发控制的任务是确保在多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性以及数据库的统一性。乐观并发控制（乐观锁）和悲观并发控制（悲观锁）是并发控制主要采用的技术手段。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作。在查询完数据的时候就把事务锁起来，直到提交事务。实现方式：使用数据库中的锁机制。&lt;/li&gt;
&lt;li&gt;乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。在修改数据的时候把事务锁起来，通过 version 的方式来进行锁定。实现方式：乐观锁一般会使用版本号机制或 CAS 算法实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两种锁的使用场景：&lt;/p&gt;
&lt;p&gt;从上面对两种锁的介绍，我们知道两种锁各有优缺点，不可认为一种好于另一种，像乐观锁适用于写比较少的情况下（多读场景），即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。&lt;/p&gt;
&lt;p&gt;但如果是多写的情况，一般会经常产生冲突，这就会导致上层应用会不断的进行 &lt;code&gt;retry&lt;/code&gt;，这样反倒是降低了性能，所以一般多写的场景下用悲观锁就比较合适。&lt;/p&gt;
&lt;h2 id=&#34;3-5-InnoDB引擎的行锁是怎么实现的？&#34;&gt;3.5 InnoDB引擎的行锁是怎么实现的？&lt;/h2&gt;
&lt;p&gt;InnoDB 是基于索引来完成行锁的。&lt;/p&gt;
&lt;p&gt;例如：&lt;code&gt;select * from tab_with_index where id = 1 for update;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;for update&lt;/code&gt; 可以根据条件来完成行锁锁定，并且 &lt;code&gt;id&lt;/code&gt; 是有索引键的列，如果 &lt;code&gt;id&lt;/code&gt; 不是索引键那么 InnoDB 将完成表锁，并发将无从谈起。&lt;/p&gt;
&lt;h2 id=&#34;3-6-什么是死锁？怎么解决？&#34;&gt;3.6 什么是死锁？怎么解决？&lt;/h2&gt;
&lt;p&gt;死锁是指两个或多个事务在同一资源上相互占用，并请求锁定对方的资源，从而导致恶性循环的现象。常见的解决死锁的方法有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果不同程序会并发存取多个表，尽量约定以相同的顺序访问表，可以大大降低死锁机会。&lt;/li&gt;
&lt;li&gt;在同一个事务中，尽可能做到一次锁定所需要的所有资源，减少死锁产生概率。&lt;/li&gt;
&lt;li&gt;对于非常容易产生死锁的业务部分，可以尝试使用升级锁定颗粒度，通过表级锁定来减少死锁产生的概率。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果业务处理不好可以用分布式事务锁或者使用乐观锁。&lt;/p&gt;
&lt;h2 id=&#34;3-7-隔离级别与锁的关系？&#34;&gt;3.7 隔离级别与锁的关系？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在 Read Uncommitted 级别下，读取数据不需要加共享锁，这样就不会跟被修改的数据上的排他锁冲突。&lt;/li&gt;
&lt;li&gt;在 Read Committed 级别下，读操作需要加共享锁，但是在语句执行完以后释放共享锁。&lt;/li&gt;
&lt;li&gt;在 Repeatable Read 级别下，读操作需要加共享锁，但是在事务提交之前并不释放共享锁，也就是必须等待事务执行完毕以后才释放共享锁。&lt;/li&gt;
&lt;li&gt;SERIALIZABLE 是限制性最强的隔离级别，因为该级别锁定整个范围的键，并一直持有锁，直到事务完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-8-优化锁方面的意见？&#34;&gt;3.8 优化锁方面的意见？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用较低的隔离级别。&lt;/li&gt;
&lt;li&gt;设计索引，尽量使用索引去访问数据，加锁更加精确，从而减少锁冲突。&lt;/li&gt;
&lt;li&gt;选择合理的事务大小，给记录显示加锁时，最好一次性请求足够级别的锁。例如，修改数据的话最好申请排他锁，而不是先申请共享锁，修改时再申请排他锁，这样会导致死锁。&lt;/li&gt;
&lt;li&gt;不同的程序访问一组表的时候，应尽量约定一个相同的顺序访问各表，对于一个表而言，尽可能固定顺序地获取表中的行，这样将大大减少死锁的机会。&lt;/li&gt;
&lt;li&gt;尽量使用相等条件访问数据，这样可以避免间隙锁对并发插入的影响。&lt;/li&gt;
&lt;li&gt;不要申请超过实际需要的锁级别。&lt;/li&gt;
&lt;li&gt;数据查询的时候不是必要，不要使用加锁。MySQL 的 MVCC 可以实现事务中的查询不用加锁，优化事务性能：MVCC 只在 Read Committed（读提交）和 Repeatable Read（可重复读）两种隔离级别。&lt;/li&gt;
&lt;li&gt;对于特定的事务，可以使用表锁来提高处理速度或者减少死锁的可能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;4. 索引&lt;/h1&gt;
&lt;h2 id=&#34;4-1-索引是什么？&#34;&gt;4.1 索引是什么？&lt;/h2&gt;
&lt;p&gt;索引是一种特殊的文件（InnoDB 数据表上的索引是表空间的一个组成部分），它们包含着对数据表里所有记录的引用指针。&lt;/p&gt;
&lt;p&gt;索引是一种数据结构。数据库索引，是数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据库表中数据。索引的实现通常使用 B 树及其变种 B+ 树。更通俗地说，索引就相当于目录。为了方便查找书中的内容，通过对内容建立索引形成目录。而且索引是一个文件，它是要占据物理空间的。&lt;/p&gt;
&lt;p&gt;MySQL 索引的建立对于 MySQL 的高效运行是很重要的，索引可以大大提高 MySQL 的检索速度。比如我们在查字典的时候，前面都有检索的拼音和偏旁、笔画等，然后找到对应字典页码，打开字典的页数就可以知道我们要搜索的某一个 key 的全部值的信息了。&lt;/p&gt;
&lt;h2 id=&#34;4-2-索引有哪些优缺点？&#34;&gt;4.2 索引有哪些优缺点？&lt;/h2&gt;
&lt;p&gt;索引的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以大大加快数据的检索速度，这也是创建索引的最主要的原因。&lt;/li&gt;
&lt;li&gt;通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;索引的缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间方面：创建索引和维护索引要耗费时间，具体地，当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，会降低增删改的执行效率。&lt;/li&gt;
&lt;li&gt;空间方面：索引需要占用物理空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-3-MySQL有哪几种索引类型？&#34;&gt;4.3 MySQL有哪几种索引类型？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;从存储结构上来划分：BTree 索引（B-Tree 或 B+Tree 索引）、Hash 索引、full-index 全文索引、R-Tree 索引。这里所描述的是索引存储时保存的形式。&lt;/li&gt;
&lt;li&gt;从应用层次来分：普通索引、唯一索引、复合索引。
&lt;ul&gt;
&lt;li&gt;普通索引：即一个索引只包含单个列，一个表可以有多个单列索引。&lt;/li&gt;
&lt;li&gt;唯一索引：索引列的值必须唯一，但允许有空值。&lt;/li&gt;
&lt;li&gt;复合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并。&lt;/li&gt;
&lt;li&gt;聚簇索引（聚集索引）：并不是一种单独的索引类型，而是一种数据存储方式。具体细节取决于不同的实现，InnoDB 的聚簇索引其实就是在同一个结构中保存了 B-Tree 索引（技术上来说是 B+Tree）和数据行。&lt;/li&gt;
&lt;li&gt;非聚簇索引：不是聚簇索引，就是非聚簇索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;根据表中数据的物理顺序与键值的逻辑（索引）顺序关系：聚集索引，非聚集索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-4-说一说索引的底层实现？&#34;&gt;4.4 说一说索引的底层实现？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Hash 索引：基于哈希表实现，只有精确匹配索引所有列的查询才有效，对于每一行数据，存储引擎都会对所有的索引列计算一个哈希码（hash code），并且 Hash 索引将所有的哈希码存储在索引中，同时在索引表中保存指向每个数据行的指针。&lt;/li&gt;
&lt;li&gt;B-Tree 索引（MySQL 使用 B+Tree）：B-Tree 能加快数据的访问速度，因为存储引擎不再需要进行全表扫描来获取数据，数据分布在各个节点之中。&lt;/li&gt;
&lt;li&gt;B+Tree 索引：B-Tree 的改进版本，同时也是数据库索引所采用的存储结构。数据都在叶子节点上，并且增加了顺序访问指针，每个叶子节点都指向相邻的叶子节点的地址。相比 B-Tree 来说，进行范围查找时只需要查找两个节点，进行遍历即可。而 B-Tree 需要获取所有节点，相比之下 B+Tree 效率更高。&lt;br&gt;
B+Tree 性质：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; 棵子树的节点包含 &lt;code&gt;n&lt;/code&gt; 个关键字，不用来保存数据而是保存数据的索引。&lt;/li&gt;
&lt;li&gt;所有的叶子结点中包含了全部关键字的信息，及指向含这些关键字记录的指针，且叶子结点本身根据关键字的大小自小而大顺序链接。&lt;/li&gt;
&lt;li&gt;所有的非终端结点可以看成是索引部分，结点中仅含其子树中的最大（或最小）关键字。&lt;/li&gt;
&lt;li&gt;B+ 树中，数据对象的插入和删除仅在叶节点上进行。&lt;/li&gt;
&lt;li&gt;B+ 树有2个头指针，一个是树的根节点，一个是最小关键码的叶节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-5-为什么索引结构默认使用B-Tree，而不是B-Tree，Hash，二叉树，红黑树？&#34;&gt;4.5 为什么索引结构默认使用B+Tree，而不是B-Tree，Hash，二叉树，红黑树？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;B-tree：从两个方面来回答：
&lt;ul&gt;
&lt;li&gt;B+ 树的磁盘读写代价更低：B+ 树的内部节点并没有指向关键字具体信息的指针，因此其内部节点相对 B 树更小，如果把所有同一内部节点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多，一次性读入内存的需要查找的关键字也就越多，相对 IO 读写次数就降低了。&lt;/li&gt;
&lt;li&gt;由于 B+ 树的数据都存储在叶子结点中，分支结点均为索引，方便扫库，只需要扫一遍叶子结点即可，但是 B 树因为其分支结点同样存储着数据，我们要找到具体的数据，需要进行一次中序遍历按序来扫，所以 B+ 树更加适合区间查询的情况，所以通常 B+ 树用于数据库索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hash：
&lt;ul&gt;
&lt;li&gt;虽然可以快速定位，但是没有顺序，IO 复杂度高；&lt;/li&gt;
&lt;li&gt;基于 Hash 表实现，只有 Memory 存储引擎显式支持哈希索引；&lt;/li&gt;
&lt;li&gt;适合&lt;strong&gt;等值查询&lt;/strong&gt;，如 &lt;code&gt;=&lt;/code&gt;、&lt;code&gt;in()&lt;/code&gt;、&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;，不支持范围查询；&lt;/li&gt;
&lt;li&gt;因为不是按照索引值顺序存储的，就不能像 B+Tree 索引一样利用索引完成排序；&lt;/li&gt;
&lt;li&gt;Hash 索引在查询等值时非常快；&lt;/li&gt;
&lt;li&gt;因为 Hash 索引始终索引&lt;strong&gt;所有列的全部内容&lt;/strong&gt;，所以不支持部分索引列的匹配查找；&lt;/li&gt;
&lt;li&gt;如果有大量重复键值的情况下，哈希索引的效率会很低，因为存在&lt;strong&gt;哈希碰撞&lt;/strong&gt;问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;二叉树：树的高度不均匀，不能自平衡，查找效率跟数据有关（树的高度），并且 IO 代价高。&lt;/li&gt;
&lt;li&gt;红黑树：树的高度随着数据量增加而增加，IO 代价高。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-6-讲一讲聚簇索引与非聚簇索引？&#34;&gt;4.6 讲一讲聚簇索引与非聚簇索引？&lt;/h2&gt;
&lt;p&gt;在 InnoDB 里，索引 B+Tree 的叶子节点存储了整行数据为主键索引，也被称之为聚簇索引，即将数据存储与索引放到了一块，找到索引也就找到了数据。&lt;/p&gt;
&lt;p&gt;而索引 B+Tree 的叶子节点存储了主键的值为非主键索引，也被称之为非聚簇索引、二级索引。&lt;/p&gt;
&lt;p&gt;聚簇索引与非聚簇索引的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非聚簇索引与聚簇索引的区别在于非聚簇索引的叶子节点不存储表中的数据，而是存储该列对应的主键（行号）。&lt;/li&gt;
&lt;li&gt;对于 InnoDB 来说，想要查找数据我们还需要根据主键再去聚簇索引中进行查找，这个再根据聚簇索引查找数据的过程，我们称为&lt;strong&gt;回表&lt;/strong&gt;。第一次索引一般是顺序 IO，回表的操作属于随机 IO。需要回表的次数越多，即随机 IO 次数越多，我们就越倾向于使用全表扫描。&lt;/li&gt;
&lt;li&gt;通常情况下，主键索引（聚簇索引）查询只会查一次，而非主键索引（非聚簇索引）需要回表查询多次。当然，如果是覆盖索引的话，查一次即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：MyISAM 无论主键索引还是二级索引都是非聚簇索引，而 InnoDB 的主键索引是聚簇索引，二级索引是非聚簇索引。我们自己建立的索引基本都是非聚簇索引。&lt;/p&gt;
&lt;h2 id=&#34;4-7-非聚簇索引一定会回表查询吗？&#34;&gt;4.7 非聚簇索引一定会回表查询吗？&lt;/h2&gt;
&lt;p&gt;不一定，这涉及到查询语句所要求的字段是否全部命中了索引，如果全部命中了索引，那么就不必再进行回表查询。一个索引包含（覆盖）所有需要查询字段的值，被称之为“覆盖索引”。举个简单的例子，假设我们在员工表的年龄上建立了索引，那么当进行 &lt;code&gt;select score from stuaent where score &amp;gt; 90&lt;/code&gt; 的查询时，在索引的叶子节点上，已经包含了 &lt;code&gt;score&lt;/code&gt; 信息，不会再次进行回表查询。&lt;/p&gt;
&lt;h2 id=&#34;4-8-联合索引是什么？为什么需要注意联合索引中的顺序？&#34;&gt;4.8 联合索引是什么？为什么需要注意联合索引中的顺序？&lt;/h2&gt;
&lt;p&gt;MySQL 可以&lt;strong&gt;使用多个字段同时建立一个索引&lt;/strong&gt;，叫做联合索引。在联合索引中，如果想要命中索引，需要按照建立索引时的字段顺序挨个使用，否则无法命中索引。具体原因为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL 使用索引时需要索引有序，假设现在建立了 &lt;code&gt;name, age, school&lt;/code&gt; 的联合索引，那么索引的排序为：先按照 &lt;code&gt;name&lt;/code&gt; 排序，如果 &lt;code&gt;name&lt;/code&gt; 相同，则按照 &lt;code&gt;age&lt;/code&gt; 排序，如果 &lt;code&gt;age&lt;/code&gt; 的值也相等，则按照 &lt;code&gt;school&lt;/code&gt; 进行排序。&lt;/li&gt;
&lt;li&gt;当进行查询时，此时索引仅仅按照 &lt;code&gt;name&lt;/code&gt; 严格有序，因此必须首先使用 &lt;code&gt;name&lt;/code&gt; 字段进行&lt;strong&gt;等值查询&lt;/strong&gt;，之后对于匹配到的列而言，其按照 &lt;code&gt;age&lt;/code&gt; 字段严格有序，此时可以使用 &lt;code&gt;age&lt;/code&gt; 字段用做索引查找，以此类推。因此在建立联合索引的时候应该注意索引列的顺序，一般情况下，将查询需求频繁或者字段选择性高的列放在前面。此外可以根据特例的查询或者表结构进行单独的调整。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-9-MySQL的最左前缀原则是什么？&#34;&gt;4.9 MySQL的最左前缀原则是什么？&lt;/h2&gt;
&lt;p&gt;最左前缀原则就是&lt;strong&gt;最左优先&lt;/strong&gt;，在创建多列索引时，要根据业务需求，&lt;code&gt;where&lt;/code&gt; 子句中使用&lt;strong&gt;最频繁&lt;/strong&gt;的一列放在最左边。MySQL 会一直向右匹配直到遇到&lt;strong&gt;范围查询&lt;/strong&gt;（&lt;code&gt;&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;&lt;/code&gt;、&lt;code&gt;between&lt;/code&gt;、&lt;code&gt;like&lt;/code&gt;）就停止匹配，比如：对于 &lt;code&gt;a = 1 and b = 2 and c &amp;gt; 3 and d = 4&lt;/code&gt;，如果建立 &lt;code&gt;(a, b, c)&lt;/code&gt; 顺序的索引，&lt;code&gt;d&lt;/code&gt; 是用不到索引的，如果建立 &lt;code&gt;(a, b, d, c)&lt;/code&gt; 的索引则都可以用到，&lt;code&gt;a, b, d&lt;/code&gt; 的顺序可以任意调整。&lt;code&gt;=&lt;/code&gt; 和 &lt;code&gt;in&lt;/code&gt; 可以&lt;strong&gt;乱序&lt;/strong&gt;，比如 &lt;code&gt;a = 1 and b = 2 and c = 3&lt;/code&gt; 建立 &lt;code&gt;(a, b, c)&lt;/code&gt; 索引可以任意顺序，MySQL 的查询优化器会帮你优化成索引可以识别的形式。&lt;/p&gt;
&lt;h2 id=&#34;4-10-前缀索引是什么？&#34;&gt;4.10 前缀索引是什么？&lt;/h2&gt;
&lt;p&gt;因为可能我们索引的字段非常长，这既占内存空间，也不利于维护。所以我们就想，如果只把很长字段的前面的公共部分作为一个索引，就会产生超级加倍的效果。但是，我们需要注意，&lt;code&gt;order by&lt;/code&gt; 不支持前缀索引。&lt;/p&gt;
&lt;p&gt;创建前缀索引的流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先计算完整列的选择性：&lt;code&gt;select count(distinct col_1)/count(1) from table_1&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;再计算不同前缀长度的选择性：&lt;code&gt;select count(distinct left(col_1, 4))/count(1) from table_1&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;找到最优长度之后，创建前缀索引：&lt;code&gt;create index idx_front on table_1 (col_1(4))&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-11-如何创建索引？&#34;&gt;4.11 如何创建索引？&lt;/h2&gt;
&lt;p&gt;创建索引有以下三种方式：&lt;/p&gt;
&lt;p&gt;（1）在执行 &lt;code&gt;CREATE TABLE&lt;/code&gt; 时创建索引：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;TABLE&lt;/span&gt; table_name (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    id &lt;span class=&#34;type&#34;&gt;INT&lt;/span&gt; auto_increment &lt;span class=&#34;keyword&#34;&gt;PRIMARY&lt;/span&gt; KEY,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    first_name &lt;span class=&#34;type&#34;&gt;VARCHAR&lt;/span&gt; (&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    last_name &lt;span class=&#34;type&#34;&gt;VARCHAR&lt;/span&gt; (&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    id_card &lt;span class=&#34;type&#34;&gt;VARCHAR&lt;/span&gt; (&lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    information text,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    KEY name (first_name, last_name),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    FULLTEXT KEY (information) ,  &lt;span class=&#34;comment&#34;&gt;-- 在information字段上建立全文索引&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;UNIQUE&lt;/span&gt; KEY (id_card)  &lt;span class=&#34;comment&#34;&gt;-- 在id_card字段上建立唯一索引&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（2）使用 &lt;code&gt;ALTER TABLE&lt;/code&gt; 命令添加索引：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;ALTER&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;TABLE&lt;/span&gt; table_name &lt;span class=&#34;keyword&#34;&gt;ADD&lt;/span&gt; INDEX index_name (column_list);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;ALTER TABLE&lt;/code&gt; 用来创建普通索引、&lt;code&gt;UNIQUE&lt;/code&gt; 索引或 &lt;code&gt;PRIMARY KEY&lt;/code&gt; 索引。&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;table_name&lt;/code&gt; 是要增加索引的表名，&lt;code&gt;column_list&lt;/code&gt; 指出对哪些列进行索引，如果索引多列则各列之间用逗号分隔。&lt;/p&gt;
&lt;p&gt;索引名 &lt;code&gt;index_name&lt;/code&gt; 可自己命名，缺省时，MySQL 将根据第一个索引列赋一个名称。另外，&lt;code&gt;ALTER TABLE&lt;/code&gt; 允许在单个语句中更改多个表，因此可以同时创建多个索引。&lt;/p&gt;
&lt;p&gt;（3）使用 &lt;code&gt;CREATE INDEX&lt;/code&gt; 命令创建索引：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;CREATE&lt;/span&gt; INDEX index_name &lt;span class=&#34;keyword&#34;&gt;ON&lt;/span&gt; table_name (column_list);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;4-12-创建索引时需要注意什么？&#34;&gt;4.12 创建索引时需要注意什么？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;非空字段：应该指定列为 &lt;code&gt;NOT NULL&lt;/code&gt;，除非你想存储 &lt;code&gt;NULL&lt;/code&gt;。在 MySQL 中，含有空值的列很难进行查询优化，因为它们使得索引、索引的统计信息以及比较运算更加复杂。你应该用0或者一个特殊的值或者一个空串代替空值；&lt;/li&gt;
&lt;li&gt;取值离散（变量各个取值之间的差异程度）大的字段的列放到联合索引的前面，可以通过 &lt;code&gt;count()&lt;/code&gt; 函数查看字段的差异值，返回值越大说明字段的唯一值越多，字段的离散程度高；&lt;/li&gt;
&lt;li&gt;索引字段越小越好：数据库的数据存储以页为单位，一页存储的数据越多则一次 I/O 操作获取的数据越多，效率越高。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Interview" />
        <updated>2022-12-04T09:13:00.000Z</updated>
    </entry>
    <entry>
        <id>https://asanosaki.github.io/posts/54431.html</id>
        <title>计算机网络面试题总结</title>
        <link rel="alternate" href="https://asanosaki.github.io/posts/54431.html"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;计算机网络常见面试题总结，文章将不断更新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h1&gt;1. 概述&lt;/h1&gt;
&lt;h2 id=&#34;1-1-计算机网络的各层协议及作用？&#34;&gt;1.1 计算机网络的各层协议及作用？&lt;/h2&gt;
&lt;p&gt;计算机网络体系可以大致分为三种：OSI 七层模型、TCP/IP 四层模型和五层模型。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OSI 七层模型：大而全，但是比较复杂、而且是先有了理论模型，没有实际应用。&lt;/li&gt;
&lt;li&gt;TCP/IP 四层模型：是由实际应用发展总结出来的，从实质上讲，TCP/IP 只有最上面两层，最下面一层没有什么具体内容，TCP/IP 参考模型没有真正描述这一层的实现。&lt;/li&gt;
&lt;li&gt;TCP/IP 五层模型：五层模型只出现在计算机网络教学过程中，这是对七层模型和四层模型的一个折中，既简洁又能将概念阐述清楚。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;七层网络体系结构各层的主要功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用层：为应用程序提供交互服务。在互联网中的应用层协议有很多，如域名系统 DNS，支持万维网应用的 HTTP 协议，支持电子邮件的 SMTP 协议等。&lt;/li&gt;
&lt;li&gt;表示层：主要负责数据格式的转换，如加密解密、转换翻译、压缩解压缩等。&lt;/li&gt;
&lt;li&gt;会话层：负责在网络中的两节点之间建立、维持和终止通信，如服务器验证用户登录便是由会话层完成的。&lt;/li&gt;
&lt;li&gt;运输层：有时也译为传输层，向主机进程提供通用的数据传输服务。该层主要有以下两种协议：
&lt;ul&gt;
&lt;li&gt;TCP：提供面向连接的、可靠的数据传输服务。&lt;/li&gt;
&lt;li&gt;UDP：提供无连接的、尽最大努力的数据传输服务，但不保证数据传输的可靠性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;网络层：选择合适的路由和交换结点，确保数据及时传送。主要包括 IP 协议。&lt;/li&gt;
&lt;li&gt;数据链路层：数据链路层通常简称为链路层。将网络层传下来的 IP 数据包组装成帧，并在相邻节点的链路上传送帧。&lt;/li&gt;
&lt;li&gt;物理层：实现相邻节点间比特流的透明传输，尽可能屏蔽传输介质和通信手段的差异。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;2. TCP/IP&lt;/h1&gt;
&lt;h2 id=&#34;2-1-TCP和UDP的区别？&#34;&gt;2.1 TCP和UDP的区别？&lt;/h2&gt;
&lt;table&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;&lt;/th&gt;
            &lt;th&gt;TCP&lt;/th&gt;
            &lt;th&gt;UDP&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;是否连接&lt;/td&gt;
            &lt;td&gt;面向连接&lt;/td&gt;
            &lt;td&gt;无连接&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;是否可靠&lt;/td&gt;
            &lt;td&gt;可靠传输，使用流量控制和拥塞控制&lt;/td&gt;
            &lt;td&gt;不可靠传输，不使用流量控制和拥塞控制&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;是否有序&lt;/td&gt;
            &lt;td&gt;有序，消息在传输过程中可能会乱序，TCP 会重新排序&lt;/td&gt;
            &lt;td&gt;无序&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;传输速度&lt;/td&gt;
            &lt;td&gt;慢&lt;/td&gt;
            &lt;td&gt;快&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;连接对象个数&lt;/td&gt;
            &lt;td&gt;只能一对一通信&lt;/td&gt;
            &lt;td&gt;支持一对一、一对多、多对一和多对多交互通信&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;传输方式&lt;/td&gt;
            &lt;td&gt;面向字节流&lt;/td&gt;
            &lt;td&gt;面向报文&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;首部开销&lt;/td&gt;
            &lt;td&gt;首部开销大，最小20字节，最大60字节&lt;/td&gt;
            &lt;td&gt;首部开销小，仅8字节&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;适用场景&lt;/td&gt;
            &lt;td&gt;适用于要求可靠传输的应用，例如文件传输&lt;/td&gt;
            &lt;td&gt;适用于实时应用例如 IP 电话、视频会议、直播等&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;总结：TCP 用于在传输层有必要实现可靠传输的情况，UDP 用于对高速传输和实时性有较高要求的通信。TCP 和 UDP 应该根据应用目的按需使用。&lt;/p&gt;
&lt;h2 id=&#34;2-2-TCP和UDP对应的应用场景是什么？&#34;&gt;2.2 TCP和UDP对应的应用场景是什么？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TCP 是面向连接的，能保证数据的可靠性交付，因此经常用于：
&lt;ul&gt;
&lt;li&gt;FTP 文件传输。&lt;/li&gt;
&lt;li&gt;HTTP/HTTPS。&lt;/li&gt;
&lt;li&gt;SMTP 简单邮件传输。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UDP 是无连接的，它可以随时发送数据，再加上 UDP 本身的处理既简单又高效，因此经常用于：
&lt;ul&gt;
&lt;li&gt;包总量较少的通信，如 DNS、SNMP 等。&lt;/li&gt;
&lt;li&gt;视频、音频等多媒体通信。&lt;/li&gt;
&lt;li&gt;广播通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-3-TCP的三次握手机制？&#34;&gt;2.3 TCP的三次握手机制？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;第一次握手：客户端请求建立连接，向服务端发送一个同步报文（&lt;code&gt;SYN = 1&lt;/code&gt;），同时选择一个随机数 &lt;code&gt;seq = x&lt;/code&gt; 作为初始序列号，并进入 &lt;code&gt;SYN_SENT&lt;/code&gt;（同步已发送）状态，等待服务器确认。&lt;/li&gt;
&lt;li&gt;第二次握手：服务端收到连接请求报文后，如果同意建立连接，则向客户端发送同步确认报文（&lt;code&gt;SYN = 1, ACK = 1&lt;/code&gt;），确认号为 &lt;code&gt;ack = x + 1&lt;/code&gt;，同时选择一个随机数 &lt;code&gt;seq = y&lt;/code&gt; 作为初始序列号，此时服务器进入 &lt;code&gt;SYN_RECV&lt;/code&gt;（同步收到）状态。&lt;/li&gt;
&lt;li&gt;第三次握手：客户端收到服务端的确认后，向服务端发送一个确认报文（&lt;code&gt;ACK = 1&lt;/code&gt;），确认号为 &lt;code&gt;ack = y + 1&lt;/code&gt;，序列号为 &lt;code&gt;seq = x + 1&lt;/code&gt;，客户端和服务器进入 &lt;code&gt;ESTABLISHED&lt;/code&gt;（已建立连接）状态，完成三次握手。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;理想状态下，TCP 连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。&lt;/p&gt;
&lt;h2 id=&#34;2-4-为什么需要三次握手，而不是两次？&#34;&gt;2.4 为什么需要三次握手，而不是两次？&lt;/h2&gt;
&lt;p&gt;主要有三个原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;防止已过期的连接请求报文突然又传送到服务器，因而产生错误和资源浪费。&lt;br&gt;
在双方两次握手即可建立连接的情况下，假设客户端发送报文段A请求建立连接，由于网络原因造成A暂时无法到达服务器，服务器接收不到请求报文段就不会返回确认报文段。&lt;br&gt;
客户端在长时间得不到应答的情况下重新发送请求报文段B，这次B顺利到达服务器，服务器随即返回确认报文并进入 &lt;code&gt;ESTABLISHED&lt;/code&gt; 状态，客户端在收到确认报文后也进入 &lt;code&gt;ESTABLISHED&lt;/code&gt; 状态，双方建立连接并传输数据，之后正常断开连接。&lt;br&gt;
此时姗姗来迟的报文段A才到达服务器，服务器随即返回确认报文并进入 &lt;code&gt;ESTABLISHED&lt;/code&gt; 状态，但是已经进入 &lt;code&gt;CLOSED&lt;/code&gt; 状态的客户端无法再接受确认报文段，更无法进入 &lt;code&gt;ESTABLISHED&lt;/code&gt; 状态，这将导致服务器长时间单方面等待，造成资源浪费。&lt;/li&gt;
&lt;li&gt;三次握手才能让双方均确认自己和对方的发送和接收能力都正常。&lt;br&gt;
第一次握手：客户端只是发送处请求报文段，什么都无法确认，而服务器可以确认自己的接收能力和对方的发送能力正常。&lt;br&gt;
第二次握手：客户端可以确认自己发送能力和接收能力正常，对方发送能力和接收能力正常。&lt;br&gt;
第三次握手：服务器可以确认&lt;strong&gt;自己发送能力&lt;/strong&gt;和接收能力正常，&lt;strong&gt;对方&lt;/strong&gt;发送能力和&lt;strong&gt;接收能力&lt;/strong&gt;正常。&lt;br&gt;
可见三次握手才能让双方都确认自己和对方的发送和接收能力全部正常，这样就可以愉快地进行通信了。&lt;/li&gt;
&lt;li&gt;告知对方自己的初始序号值，并确认收到对方的初始序号值。&lt;br&gt;
TCP 实现了可靠的数据传输，原因之一就是 TCP 报文段中维护了序号字段和确认序号字段，通过这两个字段双方都可以知道在自己发出的数据中，哪些是已经被对方确认接收的。这两个字段的值会在初始序号值的基础上递增，如果是两次握手，只有发起方的初始序号可以得到确认，而另一方的初始序号则得不到确认。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-5-为什么需要三次握手，而不是四次？&#34;&gt;2.5 为什么需要三次握手，而不是四次？&lt;/h2&gt;
&lt;p&gt;因为三次握手已经可以确认双方的发送和接收能力正常，双方都知道彼此已经准备好，而且也可以完成对双方初始序号值的确认，也就无需第四次握手了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一次握手：服务端确认&lt;strong&gt;自己收、对方发&lt;/strong&gt;报文功能正常。&lt;/li&gt;
&lt;li&gt;第二次握手：客户端确认&lt;strong&gt;自己发、自己收、对方收、对方发&lt;/strong&gt;报文功能正常，客户端认为连接己建立。&lt;/li&gt;
&lt;li&gt;第三次握手：服务端确认&lt;strong&gt;自己发、对方收&lt;/strong&gt;报文功能正常，此时双方均建立连接，可以正常通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-6-什么是SYN洪泛攻击？如何防范？&#34;&gt;2.6 什么是SYN洪泛攻击？如何防范？&lt;/h2&gt;
&lt;p&gt;SYN 洪泛攻击属于 DOS 攻击的一种，它利用 TCP 协议缺陷，通过发送大量的&lt;strong&gt;半连接&lt;/strong&gt;请求，耗费 CPU 和内存资源。&lt;/p&gt;
&lt;p&gt;原理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在三次握手过程中，服务器发送 &lt;code&gt;[SYN/ACK]&lt;/code&gt; 包（即第二个包）之后、收到客户端的 &lt;code&gt;[ACK]&lt;/code&gt; 包（即第三个包）之前的 TCP 连接称为半连接（half-open connect），此时服务器处于 &lt;code&gt;SYN_RECV&lt;/code&gt;（等待客户端响应）状态。如果接收到客户端的 &lt;code&gt;[ACK]&lt;/code&gt;，则 TCP 连接成功，如果未接收到，则会不断重发请求直至成功。&lt;/li&gt;
&lt;li&gt;SYN 攻击的攻击者在短时间内伪造大量不存在的 IP 地址，向服务器不断地发送 &lt;code&gt;[SYN]&lt;/code&gt; 包，服务器回复 &lt;code&gt;[SYN/ACK]&lt;/code&gt; 包，并等待客户的确认。由于源地址是不存在的，服务器需要不断的重发直至超时。&lt;/li&gt;
&lt;li&gt;这些伪造的 &lt;code&gt;[SYN]&lt;/code&gt; 包将长时间占用未连接队列，影响了正常的 SYN，导致目标系统运行缓慢、网络堵塞甚至系统瘫痪。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;检测：当在服务器上看到大量的半连接状态时，特别是源 IP 地址是随机的，基本上可以断定这是一次 SYN 攻击。&lt;/p&gt;
&lt;p&gt;防范：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过防火墙、路由器等过滤网关防护。&lt;/li&gt;
&lt;li&gt;通过加固 TCP/IP 协议栈防范，如增加最大半连接数，缩短超时时间。&lt;/li&gt;
&lt;li&gt;SYN Cookies 技术。SYN Cookies 是对 TCP 服务器端的三次握手做一些修改，专门用来防范 SYN 洪泛攻击的一种手段。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-7-三次握手连接阶段，如果最后一次ACK包丢失，会发生什么？&#34;&gt;2.7 三次握手连接阶段，如果最后一次ACK包丢失，会发生什么？&lt;/h2&gt;
&lt;p&gt;服务端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第三次的 &lt;code&gt;ACK&lt;/code&gt; 包在网络中丢失，那么服务端该 TCP 连接的状态为 &lt;code&gt;SYN_RECV&lt;/code&gt;,并且会根据 TCP 的超时重传机制，会等待3秒、6秒、12秒后重新发送 &lt;code&gt;SYN + ACK&lt;/code&gt; 包，以便客户端重新发送 &lt;code&gt;ACK&lt;/code&gt; 包。&lt;/li&gt;
&lt;li&gt;如果重发指定次数之后，仍然未收到客户端的 ACK 应答，那么一段时间后，服务端自动关闭这个连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;客户端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端认为这个连接已经建立，如果客户端向服务端发送数据，服务端将以 &lt;code&gt;RST&lt;/code&gt; 包（Reset，表示复位，用于异常的关闭连接）响应。此时，客户端便知道第三次握手失败。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-8-TCP的四次挥手过程？&#34;&gt;2.8 TCP的四次挥手过程？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;第一次挥手：客户端向服务端发送连接释放报文（&lt;code&gt;FIN = 1, ACK = 1&lt;/code&gt;），主动关闭连接，同时等待服务端的确认，客户端进入 &lt;code&gt;FIN_WAIT_1&lt;/code&gt;（终止等待1）状态。序列号 &lt;code&gt;seq = u&lt;/code&gt;，为客户端上次发送的报文的最后一个字节的序号 + 1。&lt;/li&gt;
&lt;li&gt;第二次挥手：服务端收到连接释放报文后，立即发出确认报文（&lt;code&gt;ACK = 1&lt;/code&gt;），序列号 &lt;code&gt;seq = v&lt;/code&gt;，为服务端上次发送的报文的最后一个字节的序号 + 1，确认号 &lt;code&gt;ack = u + 1&lt;/code&gt;，服务端进入 &lt;code&gt;CLOSE_WAIT&lt;/code&gt;（关闭等待）状态。&lt;br&gt;
此时 TCP 连接处于&lt;strong&gt;半关闭&lt;/strong&gt;状态，即客户端到服务端的连接已经释放了，但是服务端到客户端的连接还未释放。这表示客户端已经没有数据发送了，但是服务端可能还要给客户端发送数据。&lt;/li&gt;
&lt;li&gt;第三次挥手：客户端收到服务端的确认后进入 &lt;code&gt;FIN_WAIT_2&lt;/code&gt;（终止等待2）状态，等待服务端发出连接释放报文段。服务端向客户端发送连接释放报文（&lt;code&gt;FIN = 1, ACK = 1&lt;/code&gt;），主动关闭连接，同时等待A的确认，服务端进入 &lt;code&gt;LAST_ACK&lt;/code&gt;（最后确认）状态。
&lt;ul&gt;
&lt;li&gt;序列号 &lt;code&gt;seq = w&lt;/code&gt;，即服务端上次发送的报文的最后一个字节的序号 + 1，可能在半关闭状态服务端又发送了一些数据。&lt;/li&gt;
&lt;li&gt;确认号 &lt;code&gt;ack = u + 1&lt;/code&gt;，与第二次挥手相同，因为这段时间客户端没有发送数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第四次挥手：客户端收到服务端的连接释放报文后，立即发出确认报文（&lt;code&gt;ACK = 1&lt;/code&gt;），序列号 &lt;code&gt;seq = u + 1&lt;/code&gt;，确认号为 &lt;code&gt;ack = w + 1&lt;/code&gt;。&lt;br&gt;
此时，客户端就进入了 &lt;code&gt;TIME_WAIT&lt;/code&gt;（时间等待）状态。注意此时客户端到 TCP 连接还没有释放，必须经过2 * MSL（最长报文段寿命）的时间后，才进入 &lt;code&gt;CLOSED&lt;/code&gt; 状态。而服务端只要收到客户端发出的确认，就立即进入 &lt;code&gt;CLOSED&lt;/code&gt; 状态。可以看到，服务端结束 TCP 连接的时间要比客户端早一些。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-9-为什么连接的时候是三次握手，关闭的时候却是四次握手？&#34;&gt;2.9 为什么连接的时候是三次握手，关闭的时候却是四次握手？&lt;/h2&gt;
&lt;p&gt;服务器在收到客户端的 &lt;code&gt;FIN&lt;/code&gt; 报文段后，可能还有一些数据要传输，所以不能马上关闭连接，但是会做出应答，返回 &lt;code&gt;ACK&lt;/code&gt; 报文段.&lt;/p&gt;
&lt;p&gt;接下来可能会继续发送数据，在数据发送完后，服务器会向客户单发送 &lt;code&gt;FIN&lt;/code&gt; 报文，表示数据已经发送完毕，请求关团连接。服务器的 &lt;code&gt;ACK&lt;/code&gt; 和 &lt;code&gt;FIN&lt;/code&gt; 一般都会分开发送，从而导致多了一次，因此一共需要四次挥手。&lt;/p&gt;
&lt;h2 id=&#34;2-10-为什么客户端的TIME-WAIT状态必须等待2MSL？&#34;&gt;2.10 为什么客户端的TIME_WAIT状态必须等待2MSL？&lt;/h2&gt;
&lt;p&gt;主要有两个原因:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确保最后一个 &lt;code&gt;ACK&lt;/code&gt; 报文段能够到达服务端，从而使服务端正常关闭连接。&lt;br&gt;
第四次挥手时，客户端第四次挥手的 &lt;code&gt;ACK&lt;/code&gt; 报文段不一定会到达服务端。服务端会超时重传 &lt;code&gt;FIN/ACK&lt;/code&gt; 报文段，此时如果客户端已经断开了连接，那么就无法响应服务端的二次请求，这样服务端迟迟收不到 &lt;code&gt;FIN/ACK&lt;/code&gt; 报文段的确认，就无法正常断开连接。&lt;br&gt;
MSL 是报文段在网络上存活的最长时间。客户端等待 2MSL 时间，即：客户端 &lt;code&gt;ACK&lt;/code&gt; 报文段 1MSL 超时 + 服务端 &lt;code&gt;FIN&lt;/code&gt; 报文段 1MSL 传输，就能够收到服务端重传的 &lt;code&gt;FIN/ACK&lt;/code&gt; 报文段，然后客户端重传一次 &lt;code&gt;ACK&lt;/code&gt; 报文段，并重新启动 2MSL 计时器。如此保证服务端能够正常关闭。&lt;br&gt;
如果服务端重发的 &lt;code&gt;FIN&lt;/code&gt; 报文段没有成功地在 2MSL 时间里传给客户端，服务端则会继续超时重试直到断开连接。&lt;/li&gt;
&lt;li&gt;防止已失效的连接请求报文段出现在之后的连接中。&lt;br&gt;
TCP 要求在 2MSL 内不使用相同的序列号。客户端在发送完最后一个 &lt;code&gt;ACK&lt;/code&gt; 报文段后，再经过时间 2MSL，就可以保证本连接持续的时间内产生的所有报文段都从网络中消失。这样就可以使下一个连接中不会出现这种旧的连接请求报文段。或者即使收到这些过时的报文，也可以不处理它。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-11-如果已经建立了连接，但是客户端出现故障了怎么办？&#34;&gt;2.11 如果已经建立了连接，但是客户端出现故障了怎么办？&lt;/h2&gt;
&lt;p&gt;通过&lt;strong&gt;定时器 + 超时重试机制&lt;/strong&gt;，尝试获取确认，直到最后会自动断开连接。&lt;/p&gt;
&lt;p&gt;具体而言，TCP 设有一个&lt;strong&gt;保活计时器&lt;/strong&gt;。服务器每收到一次客户端的数据，都会重新设置这个计时器，时间通常是设置为2小时。若2小时还没有收到客户端的任何数据，服务器就发送一个探测报文段，之后则每隔75秒钟发送一次，若一连发送10个探测报文段后客户端依然没有响应，那么服务器就认为客户端出现故障，接着就关闭这个连接。&lt;/p&gt;
&lt;h2 id=&#34;2-12-TIME-WAIT是服务器端还是客户端的状态&#34;&gt;2.12 TIME_WAIT是服务器端还是客户端的状态?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;TIME_WAIT&lt;/code&gt; 是&lt;strong&gt;主动断开连接&lt;/strong&gt;的一方会进入的状态，一般情况下，都是客户端所处的状态，服务器端一般设置不主动关闭连接。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TIME_WAIT&lt;/code&gt; 需要等待 2MSL，在大量短连接的情况下，&lt;code&gt;TIME_WAIT&lt;/code&gt; 会太多，这也会消耗很多系统资源。对于服务器来说，在 HTTP 协议里指定 KeepAlive（浏览器重用一个 TCP 连接来处理多个 HTTP 请求），由浏览器来主动断开连接，可以一定程度上减少服务器的这个问题。&lt;/p&gt;
&lt;h2 id=&#34;2-13-TCP协议如何保证可靠性，即如何实现可靠传输？&#34;&gt;2.13 TCP协议如何保证可靠性，即如何实现可靠传输？&lt;/h2&gt;
&lt;p&gt;TCP 主要提供了检验和、序列号/确认应答、超时重传、滑动窗口、拥塞控制和流量控制等方法实现了可靠性传输。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检验和：通过检验和的方式，接收端可以检测出来数据是否有差错和异常，假如有差错就会直接丢弃 TCP 报文段，重新发送。&lt;/li&gt;
&lt;li&gt;序列号/确认应答：序列号的作用不仅仅是应答的作用，有了序列号能够将接收到的数据根据序列号排序，并且去掉重复序列号的数据。&lt;br&gt;
TCP 传输的过程中，每次接收方收到数据后，都会对传输方进行确认应答。也就是发送 ACK 报文段，这个 ACK 报文段当中带有对应的确认序列号，告诉发送方，接收到了哪些数据，下一次的数据从哪里发。&lt;/li&gt;
&lt;li&gt;滑动窗口：滑动窗口既提高了报文传输的效率，也避免了发送方发送过多的数据而导致接收方无法正常处理的异常。&lt;/li&gt;
&lt;li&gt;超时重传：超时重传的时间是指发送出去的数据包到接收到确认包之间的时间，如果超过了这个时间会被认为是丢包了，需要重传。最大超时时间是动态计算的。&lt;/li&gt;
&lt;li&gt;拥塞控制：在数据传输过程中，可能由于网络状态的问题，造成网络拥堵，此时引入拥塞控制机制，在保证 TCP 可靠性的同时，提高性能。&lt;/li&gt;
&lt;li&gt;流量控制：如果主机A一直向主机B发送数据，不考虑主机B的接收能力，则可能导致主机B的接收缓冲区满了而无法再接收数据，从而会导致大量的数据丢包，引发重传机制。而在重传的过程中，若主机B的接收缓冲区情况仍未好转，则会将大量的时间浪费在重传数据上，降低传送数据的效率。所以引入流量控制机制，主机B通过告诉主机A自己接收缓冲区的大小，来使主机A控制发送的数据量。流量控制与 TCP 协议报头中的窗口大小有关。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-14-详细讲一下TCP的滑动窗口？&#34;&gt;2.14 详细讲一下TCP的滑动窗口？&lt;/h2&gt;
&lt;p&gt;在进行数据传输时，如果传输的数据比较大，就需要拆分为多个数据包进行发送。TCP 协议需要对数据进行确认后，才可以发送下一个数据包。这样一来，就会在等待确认应答包环节浪费时间。&lt;/p&gt;
&lt;p&gt;为了避免这种情况，TCP 引入了窗口概念。窗口大小指的是不需要等待确认应答包而可以继续发送数据包的最大值。&lt;/p&gt;
&lt;p&gt;滑动窗口里面也分为有三种类型的数据，第一种是已经发送且收到确认但是未按序到达，即没有在窗口尾部形成一段连续的序列；第二种是已经发送但是未被确认的数据；第三种是等待发送的数据。随着已发送的数据不断被确认，窗口内等待发送的数据也会不断被发送。整个窗口就会不断往前移动，让还没轮到的数据进入窗口内。&lt;/p&gt;
&lt;p&gt;可以看到滑动窗口起到了一个限流的作用，也就是说当前滑动窗口的大小决定了当前 TCP 发送包的速率，而滑动窗口的大小取决于拥塞控制窗口和流量控制窗口的两者间的最小值。&lt;/p&gt;
&lt;h2 id=&#34;2-15-详细讲一下拥塞控制？&#34;&gt;2.15 详细讲一下拥塞控制？&lt;/h2&gt;
&lt;p&gt;TCP 一共使用了四种算法来实现拥塞控制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;慢开始（slow-start）&lt;/li&gt;
&lt;li&gt;拥塞避免（congestion avoidance）&lt;/li&gt;
&lt;li&gt;快重传（fast retransmit）&lt;/li&gt;
&lt;li&gt;快恢复（fast recovery）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;发送方维持一个叫做拥塞窗口 cwnd（congestion window）的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;慢开始：不要一开始就发送大量的数据，&lt;strong&gt;由小到大逐渐增加拥塞窗口的大小&lt;/strong&gt;。&lt;br&gt;
例如一开始发送方先设置 cwnd = 1，发送第一个报文段，等发送方接收到对方的确认后把 cwnd 从1增大到2。此后每经过一个传输轮次，拥塞窗口 cwnd 就加倍。&lt;br&gt;
为了防止拥塞窗口 cwnd 增长过大引起网络拥塞，还需要设置一个慢开始门限 &lt;code&gt;ssthresh&lt;/code&gt; 状态变量。
&lt;ul&gt;
&lt;li&gt;当 &lt;code&gt;cwnd &amp;lt; ssthresh&lt;/code&gt; 时，使用慢开始算法。&lt;/li&gt;
&lt;li&gt;当 &lt;code&gt;cwnd &amp;gt; ssthresh&lt;/code&gt; 时，停止使用慢开始算法改用拥塞避免算法。&lt;/li&gt;
&lt;li&gt;当 &lt;code&gt;cwnd = ssthresh&lt;/code&gt; 时，即可使用慢开始算法，也可使用拥塞避免算法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;拥塞避免：拥塞避免算法让拥塞窗口缓慢增长，即每经过一个往返时间 RTT 就把发送方的拥塞窗口 cwnd 加一而不是加倍。这样拥塞窗口按线性规律缓慢增长。&lt;/li&gt;
&lt;li&gt;快重传：我们可以剔除一些不必要的拥塞报文，提高网络吞吐量。比如接收方在收到一个失序的报文段后就立即发出重复确认，而不要等到自己发送数据时捎带确认。快重传规定：发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。&lt;/li&gt;
&lt;li&gt;快恢复：主要是配合快重传，当发送方连续收到三个重复确认时，就执行&lt;strong&gt;乘法减小&lt;/strong&gt;算法，把 &lt;code&gt;ssthresh&lt;/code&gt; 门限减半（为了预防网络发生拥塞），但接下来并不执行慢开始算法，因为如果网络出现拥塞的话就不会收到好几个重复的确认，收到三个重复确认说明网络状况还可以。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;3. HTTP/HTTPS&lt;/h1&gt;
&lt;h2 id=&#34;3-1-HTTP常见的状态码有哪些？&#34;&gt;3.1 HTTP常见的状态码有哪些？&lt;/h2&gt;
&lt;p&gt;常见状态码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;200：服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。&lt;/li&gt;
&lt;li&gt;301：请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置（永久移动）。&lt;/li&gt;
&lt;li&gt;302：服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求（临时移动）。&lt;/li&gt;
&lt;li&gt;400：客户端请求有语法错误，不能被服务器所理解。&lt;/li&gt;
&lt;li&gt;403：服务器收到请求，但是拒绝提供服务。&lt;/li&gt;
&lt;li&gt;404：服务器找不到请求的网页。&lt;/li&gt;
&lt;li&gt;500：服务器遇到错误，无法完成请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;状态码开头代表类型：&lt;/p&gt;
&lt;table&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;&lt;/th&gt;
            &lt;th&gt;类别&lt;/th&gt;
            &lt;th&gt;原因短语&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;1XX&lt;/td&gt;
            &lt;td&gt;Informational（信息性状态码）&lt;/td&gt;
            &lt;td&gt;接收的请求正在处理&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;2XX&lt;/td&gt;
            &lt;td&gt;Success（成功状态码）&lt;/td&gt;
            &lt;td&gt;请求正常处理完毕&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;3XX&lt;/td&gt;
            &lt;td&gt;Redirection（重定向状态码）&lt;/td&gt;
            &lt;td&gt;需要进行附加操作以完成请求&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;4XX&lt;/td&gt;
            &lt;td&gt;Client Error（客户端错误状态码）&lt;/td&gt;
            &lt;td&gt;服务器无法处理请求&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;5XX&lt;/td&gt;
            &lt;td&gt;Server Error（服务器错误状态码）&lt;/td&gt;
            &lt;td&gt;服务器处理请求出错&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;3-2-状态码301和302的区别是什么？&#34;&gt;3.2 状态码301和302的区别是什么？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;共同点：301和302状态码都表示重定向，就是说浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的 URL 地址，这个地址可以从响应的 Location 首部中获取（用户看到的效果就是他输入的地址A瞬间变成了另一个地址B）。&lt;/li&gt;
&lt;li&gt;不同点：301表示旧地址A的资源已经被永久地移除了（这个资源不可访问了），搜索引擎在抓取新内容的同时也将旧的网址交换为重定向之后的网址。302表示旧地址A的资源还在（仍然可以访问），这个重定向只是临时地从旧地址A跳转到地址B，搜索引擎会抓取新的内容而保存旧的网址。SEO 中302好于301。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重定向原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网站调整（如改变网页目录结构）。&lt;/li&gt;
&lt;li&gt;网页被移到一个新地址。&lt;/li&gt;
&lt;li&gt;网页扩展名改变（如应用需要把 &lt;code&gt;.php&lt;/code&gt; 改成 &lt;code&gt;.html&lt;/code&gt; 或 &lt;code&gt;.shtml&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-3-HTTP常用的请求方式有哪些？&#34;&gt;3.3 HTTP常用的请求方式有哪些？&lt;/h2&gt;
&lt;table&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;方法&lt;/th&gt;
            &lt;th&gt;作用&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;GET&lt;/td&gt;
            &lt;td&gt;获取资源&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;POST&lt;/td&gt;
            &lt;td&gt;传输实体主体&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;PUT&lt;/td&gt;
            &lt;td&gt;上传文件&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;DELETE&lt;/td&gt;
            &lt;td&gt;删除文件&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;HEAD&lt;/td&gt;
            &lt;td&gt;和 GET 方法类似，但是只返回报文首部，不返回报文实体主体部分&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;PATCH&lt;/td&gt;
            &lt;td&gt;对资源进行部分修改&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OPTIONS&lt;/td&gt;
            &lt;td&gt;查询指定的 URL 支持的方法&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;CONNECT&lt;/td&gt;
            &lt;td&gt;要求用隧道协议连接代理&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;TRACE&lt;/td&gt;
            &lt;td&gt;服务器会将通信路径返回给客户端&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;为了方便记忆，可以将 PUT、DELETE、POST、GET 理解为客户端对服务端的增删改查：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PUT：上传文件，向服务器添加数据。&lt;/li&gt;
&lt;li&gt;DELETE：删除文件。&lt;/li&gt;
&lt;li&gt;POST：传输数据，向服务器提交数据，对服务器数据进行更新。&lt;/li&gt;
&lt;li&gt;GET：获取资源，查询服务器资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-4-GET请求和POST请求的区别？&#34;&gt;3.4 GET请求和POST请求的区别？&lt;/h2&gt;
&lt;p&gt;使用上的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作用：GET 用于获取资源，而 POST 用于传输实体。&lt;/li&gt;
&lt;li&gt;参数：GET 使用 URL 或 Cookie 传参，而 POST 将数据放在 Request Body 中，这个是因为 HTTP 协议用法的约定。&lt;/li&gt;
&lt;li&gt;缓存：GET 请求会被浏览器主动缓存，而 POST 不会，除非手动设置。&lt;/li&gt;
&lt;li&gt;请求长度：GET 方式提交的数据有长度限制，基本为2kb，而 POST 的数据则可以非常大，这个是因为它们使用的操作系统和浏览器设置的不同引起的区别。&lt;/li&gt;
&lt;li&gt;安全性：POST 比 GET 安全，因为数据在地址栏上不可见，而 GET 的参数直接暴露在 URL 上。这个说法没毛病，但依然不是 GET 和 POST 本身的区别。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本质区别：GET 和 POST 最大的区别主要是 GET 请求是幂等性的，POST 请求不是。这个是它们本质区别。（幂等性是指一次和多次请求某一个资源应该具有同样的副作用。简单来说意味着对同一 URL 的多个请求应该返回同样的结果）&lt;/p&gt;
&lt;h2 id=&#34;3-5-解释一下HTTP长连接和短连接？&#34;&gt;3.5 解释一下HTTP长连接和短连接？&lt;/h2&gt;
&lt;p&gt;在 &lt;strong&gt;HTTP/1.0&lt;/strong&gt; 中，默认使用的是短连接。也就是说，浏览器和服务器每进行一次 HTTP 操作，就建立一次连接，但任务结束就中断连接。如果客户端浏览器访问的某个 HTML 或其他类型的 Web 页中包含有其他的 Web 资源，如 JavaScript 文件、图像文件、CSS 文件等，当浏览器每遇到这样一个 Web 资源，就会建立一个 HTTP 会话。&lt;/p&gt;
&lt;p&gt;但从 &lt;strong&gt;HTTP/1.1&lt;/strong&gt; 起，默认使用长连接，用以保持连接特性。使用长连接的 HTTP 协议，会在响应头加入这行代码：&lt;code&gt;Connection:keep-alive&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输 HTTP 数据的 TCP 连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接。Keep-Alive 不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（例如 Apache）中设定这个时间。实现长连接要客户端和服务端都支持长连接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP 协议的长连接和短连接，实质上是 TCP 协议的长连接和短连接&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;3-6-HTTP1-0和HTTP1-1的区别？&#34;&gt;3.6 HTTP1.0和HTTP1.1的区别？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;长连接：HTTP1.1 支持长连接（Persistent Connection）和请求的流水线（Pipelining）处理，在一个 TCP 连接上可以传送多个 HTTP 请求和响应，减少了建立和关闭连接的消耗和延迟，在 HTTP1.1 中默认开启 &lt;code&gt;Connection: keep-alive&lt;/code&gt;，一定程度上弥补了 HTTP1.0 每次请求都要创建连接的缺点。&lt;/li&gt;
&lt;li&gt;缓存处理：在 HTTP1.0 中主要使用 header 里的 &lt;code&gt;If-Modified-Since, Expires&lt;/code&gt; 来做为缓存判断的标准，HTTP1.1 则引入了更多的缓存控制策略，可供选择的缓存头来控制缓存策略。&lt;/li&gt;
&lt;li&gt;带宽优化及网络连接的使用：HTTP1.0 中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1 则在请求头引入了 range 头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。&lt;/li&gt;
&lt;li&gt;错误通知的管理：在 HTTP1.1 中新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突，410（Gone）表示服务器上的某个资源被永久性的删除。&lt;/li&gt;
&lt;li&gt;Host 头处理：在 HTTP1.0 中认为每台服务器都绑定一个唯一的 IP 地址，因此，请求消息中的 URL 并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个 IP 地址。HTTP1.1 的请求消息和响应消息都应支持 Host 头域，且请求消息中如果没有 Host 头域会报告一个错误（400 Bad Request）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-7-HTTP1-1和HTTP2-0的区别？&#34;&gt;3.7 HTTP1.1和HTTP2.0的区别？&lt;/h2&gt;
&lt;p&gt;HTTP2.0 相比 HTTP1.1 支持的特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新的二进制格式：HTTP1.1 的解析是基于文本的。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑 HTTP2.0 的协议解析决定采用二进制格式，实现方便且健壮。&lt;/li&gt;
&lt;li&gt;多路复用：即连接共享，每一个 request 都是用作连接共享机制的。一个 request 对应一个 id，这样一个连接上可以有多个 request，每个连接的 request 可以随机的混杂在一起，接收方可以根据 request 的 id 将 request 再归属到各自不同的服务端请求里面。&lt;/li&gt;
&lt;li&gt;头部压缩：HTTP1.1 的头部（header）带有大量信息，而且每次都要重复发送。HTTP2.0 使用 encoder 来减少需要传输的 header 大小，通讯双方各自 cache 一份 header fields 表，既避免了重复 header 的传输，又减小了需要传输的大小。&lt;/li&gt;
&lt;li&gt;服务端推送：服务器除了对最初请求的响应外，服务器还可以额外地向客户端推送资源，而无需客户端明确的请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-8-HTTP和HTTPS的区别？&#34;&gt;3.8 HTTP和HTTPS的区别？&lt;/h2&gt;
&lt;table&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;&lt;/th&gt;
            &lt;th&gt;HTTP&lt;/th&gt;
            &lt;th&gt;HTTPS&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;端口&lt;/td&gt;
            &lt;td&gt;80&lt;/td&gt;
            &lt;td&gt;443&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;安全性&lt;/td&gt;
            &lt;td&gt;无加密，安全性较差&lt;/td&gt;
            &lt;td&gt;有加密机制，安全性较高&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;资源消耗&lt;/td&gt;
            &lt;td&gt;较少&lt;/td&gt;
            &lt;td&gt;由于加密处理，资源消耗更多&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;是否需要证书&lt;/td&gt;
            &lt;td&gt;不需要&lt;/td&gt;
            &lt;td&gt;需要&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;协议&lt;/td&gt;
            &lt;td&gt;运行在 TCP 协议之上&lt;/td&gt;
            &lt;td&gt;运行在 SSL 协议之上，SSL 运行在 TCP 协议之上&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;3-9-HTTPS的优缺点？&#34;&gt;3.9 HTTPS的优缺点？&lt;/h2&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安全性：
&lt;ul&gt;
&lt;li&gt;使用 HTTPS 协议可认证用户和服务器，确保数据发送到正确的客户机和服务器。&lt;/li&gt;
&lt;li&gt;HTTPS 协议是由 SSL + HTTP 协议构建的可进行加密传输、身份认证的网络协议，要比 HTTP 协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。&lt;/li&gt;
&lt;li&gt;HTTPS 是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SEO 方面：谷歌曾在2014年8月份调整搜索引擎算法，并称比起同等 HTTP 网站，采用 HTTPS 加密的网站在搜索结果中的排名将会更高。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在相同网络环境中，HTTPS 相比 HTTP 无论是响应时间还是耗电量都有大幅度上升。&lt;/li&gt;
&lt;li&gt;HTTPS 的安全是有范围的，在黑客攻击、服务器劫持等情况下几乎起不到作用。&lt;/li&gt;
&lt;li&gt;在现有的证书机制下，中间人攻击依然有可能发生。&lt;/li&gt;
&lt;li&gt;HTTPS 需要更多的服务器资源，也会导致成本的升高。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-10-HTTPS的原理？&#34;&gt;3.10 HTTPS的原理？&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;客户端请求 HTTPS 网址，例如：&lt;code&gt;https://www.baidu.com&lt;/code&gt;，然后连接到 Server 的443端口（HTTPS 默认端口，类似于 HTTP 的80端口）。&lt;/li&gt;
&lt;li&gt;采用 HTTPS 协议的服务器必须要有一套数字 CA（Certification Authority）证书。颁发证书的同时会产生一个私钥和公钥。私钥由服务端自己保存，不可泄漏。公钥则是附带在证书的信息中，可以公开的。证书本身也附带一个证书电子签名，这个签名用来验证证书的完整性和真实性，可以防止证书被篡改。&lt;/li&gt;
&lt;li&gt;服务器响应客户端请求，将证书传递给客户端，证书包含公钥和大量其他信息，比如证书颁发机构信息，公司信息和证书有效期等。&lt;/li&gt;
&lt;li&gt;客户端解析证书并对其进行验证。如果证书不是可信机构颁布，或者证书中的域名与实际域名不一致，或者证书已经过期，就会向访问者显示一个警告，由其选择是否还要继续通信。&lt;br&gt;
如果证书没有问题，客户端就会从服务器证书中取出服务器的公钥A。然后客户端还会生成一个随机码 &lt;code&gt;KEY&lt;/code&gt;，并使用公钥A将其加密。&lt;/li&gt;
&lt;li&gt;客户端把加密后的随机码 &lt;code&gt;KEY&lt;/code&gt; 发送给服务器，作为后面对称加密的密钥。&lt;/li&gt;
&lt;li&gt;服务器在收到随机码 &lt;code&gt;KEY&lt;/code&gt; 之后会使用私钥B将其解密。经过以上这些步骤，客户端和服务器终于建立了安全连接，完美解决了对称加密的密钥泄露问题，接下来就可以用对称加密愉快地进行通信了。&lt;/li&gt;
&lt;li&gt;服务器使用密钥（随机码 &lt;code&gt;KEY&lt;/code&gt;）对数据进行对称加密并发送给客户端，客户端使用相同的密钥（随机码 &lt;code&gt;KEY&lt;/code&gt;）解密数据。&lt;/li&gt;
&lt;li&gt;双方使用对称加密愉快地传输所有数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3-11-什么是Cookie和Session？&#34;&gt;3.11 什么是Cookie和Session？&lt;/h2&gt;
&lt;p&gt;HTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。&lt;/p&gt;
&lt;p&gt;Cookie 主要用于以下三个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）。&lt;/li&gt;
&lt;li&gt;个性化设置（如用户自定义设置、主题等）。&lt;/li&gt;
&lt;li&gt;浏览器行为跟踪（如跟踪分析用户行为等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Session 代表着服务器和客户端一次会话的过程。Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当客户端关闭会话，或者 Session 超时失效时会话结束。&lt;/p&gt;
&lt;h2 id=&#34;3-12-Cookie和Session是如何配合的呢？&#34;&gt;3.12 Cookie和Session是如何配合的呢？&lt;/h2&gt;
&lt;p&gt;用户第一次请求服务器的时候，服务器根据用户提交的相关信息，创建对应的 Session，请求返回时将此 Session 的唯一标识信息 SessionID 返回给浏览器，浏览器接收到服务器返回的 SessionID 信息后，会将此信息存入到 Cookie 中，同时 Cookie 记录此 SessionID 属于哪个域名。&lt;/p&gt;
&lt;p&gt;当用户第二次访问服务器的时候，请求会自动判断此域名下是否存在 Cookie 信息，如果存在则自动将 Cookie 信息也发送给服务端，服务端会从 Cookie 中获取 SessionID，再根据 SessionID 查找对应的 Session 信息，如果没有找到说明用户没有登录或者登录失效，如果找到 Session 证明用户已经登录可执行后面操作。&lt;/p&gt;
&lt;p&gt;根据以上流程可知，SessionID 是连接 Cookie 和 Session 的一道桥梁，大部分系统也是根据此原理来验证用户登录状态。&lt;/p&gt;
&lt;h2 id=&#34;3-13-Cookie和Session的区别？&#34;&gt;3.13 Cookie和Session的区别？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;作用范围不同：Cookie 保存在客户端（浏览器），Session 保存在服务器端。&lt;/li&gt;
&lt;li&gt;存取方式的不同：Cookie 只能保存 ASCII，Session 可以存任意数据类型，一般情况下我们可以在 Session 中保持一些常用变量信息，比如说 UserID 等。&lt;/li&gt;
&lt;li&gt;有效期不同：Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭或者 Session 超时都会失效。&lt;/li&gt;
&lt;li&gt;隐私策略不同：Cookie 存储在客户端，比较容易遭到不法获取，早期有人将用户的登录名和密码存储在 Cookie 中导致信息被窃取；Session 存储在服务端，安全性相对 Cookie 要好一些。&lt;/li&gt;
&lt;li&gt;存储大小不同：单个 Cookie 保存的数据不能超过4K，Session 可存储数据远高于 Cookie。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Interview" />
        <updated>2022-11-24T03:14:00.000Z</updated>
    </entry>
</feed>
